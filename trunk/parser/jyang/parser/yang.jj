/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yang.jj */
/*@egen*/options{                                                                                                  }PARSER_BEGIN(yang)package jyang.parser;import java.util.Enumeration;import java.util.Vector;import java.io.*;public class yang/*@bgen(jjtree)*/implements yangTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTyangState jjtree = new JJTyangState();

/*@egen*/  static private String filename;  static public void setFileName(String f)  {    filename = f;  }}PARSER_END(yang)TOKEN :{  < CMT :    (      "//" (~[ "\n", "\r" ])*      (        "\n"      | "\r"      | "\r\n"      )    )  |    (      "/*" (~[ "*" ])* "*"      (        ~[ "/" ] (~[ "*" ])* "*"      )*      "/"    ) >}TOKEN :{  < STRING :    (      "\""      (        ~[ "\"" ]      | "\\\""      )*      "\""      (        (          [ " ", "\t", "\n" , "\r"]        | < CMT >        )*        "+"        (          [ " ", "\t", "\n" , "\r"]        | < CMT >        )*        (          (            "\""            (              ~[ "\"" ]            | "\\\""            )*            "\""          )        |          (            "\'"            (              ~[ "\'" ]            | "\\\'"            )*            "\'"          )        )      )*    )  |    (      "\'" (~[ "\'" ])* "\'"      (        (          [ " ", "\t", "\n" , "\r"]        | < CMT >        )*        "+"        (          [ " ", "\t", "\n", "\r" ]        | < CMT >        )*        (          (            "\""            (              ~[ "\"" ]            | "\\\""            )*            "\""          )        |          (            "\'"            (              ~[ "\'" ]            | "\\\'"            )*            "\'"          )        )      )*    ) >}TOKEN :{  < WSP :    " "  | "\t" >| < CRLF :    "\n"  | "\r" >}TOKEN : /* KEYWORDS */{  < LB : "{" >| < RB : "}" >| < SC : ";" >| < anyxmlkeyword : "anyxml" >| < argumentkeyword : "argument" >| < augmentkeyword : "augment" >| < basekeyword : "base" >| < belongstokeyword : "belongs-to" >| < bitkeyword : "bit" >| < casekeyword : "case" >| < choicekeyword : "choice" >| < configkeyword : "config" >| < contactkeyword : "contact" >| < containerkeyword : "container" >| < defaultkeyword : "default" >| < descriptionkeyword : "description" >| < enumkeyword : "enum" >| < errorapptagkeyword : "error-app-tag" >| < errormessagekeyword : "error-message" >| < extensionkeyword : "extension" >| < deviationkeyword : "deviation" >| < deviatekeyword : "deviate" >| < featurekeyword : "feature" >| < fractiondigitskeyword : "fraction-digits" >| < groupingkeyword : "grouping" >| < identitykeyword : "identity" >| < iffeaturekeyword : "if-feature" >| < importkeyword : "import" >| < includekeyword : "include" >| < inputkeyword : "input" >| < keykeyword : "key" >| < leafkeyword : "leaf" >| < leaflistkeyword : "leaf-list" >| < lengthkeyword : "length" >| < listkeyword : "list" >| < mandatorykeyword : "mandatory" >| < maxelementskeyword : "max-elements" >| < minelementskeyword : "min-elements" >| < modulekeyword : "module" >| < mustkeyword : "must" >| < namespacekeyword : "namespace" >| < notificationkeyword : "notification" >| < orderedbykeyword : "ordered-by" >| < organizationkeyword : "organization" >| < outputkeyword : "output" >| < pathkeyword : "path" >| < patternkeyword : "pattern" >| < positionkeyword : "position" >| < prefixkeyword : "prefix" >| < presencekeyword : "presence" >| < rangekeyword : "range" >| < referencekeyword : "reference" >| < refinekeyword : "refine" >| < requireinstancekeyword : "require-instance" >| < revisionkeyword : "revision" >| < revisiondatekeyword : "revision-date" >| < rpckeyword : "rpc" >| < statuskeyword : "status" >| < submodulekeyword : "submodule" >| < typekeyword : "type" >| < typedefkeyword : "typedef" >| < uniquekeyword : "unique" >| < unitskeyword : "units" >| < useskeyword : "uses" >| < valuekeyword : "value" >| < whenkeyword : "when" >| < yangversionkeyword : "yang-version" >| < yinelementkeyword : "yin-element" >| < addkeyword : "add" >| < currentkeyword : "current" >| < deprecatedkeyword : "deprecated" >| < deletekeyword : "delete" >| < falsekeyword : "false" >| < minkeyword : "min" >| < maxkeyword : "max" >| < nankeyword : "NaN" >| < neginfkeyword : "-INF" >| < notsupportedkeyword : "not-supported" >| < obsoletekeyword : "obsolete" >| < posinfkeyword : "INF" >| < replacekeyword : "replace" >| < systemkeyword : "system" >| < truekeyword : "true" >| < unboundedkeyword : "unbounded" >| < userkeyword : "user" >| < P : < S > ":" < S > >| < S : (~[ " ", "{", "}", ";", "\t", "\n", "\r" ])+ >}JAVACODE void skip_to(int kind){  Token tok = getNextToken();  //System.out.print("skip : ");  YangErrorManager.addError  (    filename, tok.beginLine, tok.beginColumn, "unex_kw", tok.toString()  )  ;  boolean bracked = false;  if (kind != RB) while (tok.kind != kind)  {    // System.out.print(tok);    tok = getNextToken();  }  else  {    int level = 1;    boolean close = false;    while (!close)    {      // System.out.print(tok);      if (tok.kind == EOF) close = true;      if (tok.kind == LB) level++;      if (tok.kind == RB) level--;      if (tok.kind == RB && level == 0) close = true;      if (level < 0) close = true;      if (!close) tok = getNextToken();    }  }  //System.out.println();}YANG_Specification Start() :{  YANG_Specification n = null;}{  optsep()  (    n = module()    {      return n;    }  | n = submodule()    {      return n;    }  )}YANG_Specification module()         :{/*@bgen(jjtree) Module */
  YANG_Module jjtn000 = new YANG_Module(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token mt, t = null;  Node n = null;  YANG_Header h = null;  YANG_Linkage l = null;  YANG_Meta m = null;  YANG_Revision r = null;  YANG_Body b = null;  String mname = null;  Token currentToken = null;}{/*@bgen(jjtree) Module */
  try {
/*@egen*/  mt = < modulekeyword > sep() mname = identifierargstr() optsep()  {    jjtn000.setName(mname);    jjtn000.setLine(mt.beginLine);    jjtn000.setCol(mt.beginColumn);    jjtn000.setFileName(filename);    jjtn000.setLabel(mt.image);  }  < LB > stmtsep(jjtn000)  (    h = moduleheaderstmts()    {      jjtn000.addHeader(h);    }  )+  (    l = linkagestmts()    {      jjtn000.addLinkage(l);    }  )*  (    m = metastmts()    {      jjtn000.addMeta(m);    }  )*  (    r = revisionstmt() stmtsep(jjtn000) // No conform but saves a rule    {      jjtn000.addRevision(r);    }  )*  (    b = bodystmts()    {      jjtn000.addBody(b);    }  )*  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Specification submodule()            :{/*@bgen(jjtree) SubModule */
  YANG_SubModule jjtn000 = new YANG_SubModule(JJTSUBMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  YANG_Header sh = null;  YANG_Linkage l = null;  YANG_Meta s = null;  YANG_Revision r = null;  YANG_Body b = null;  Token st, t;  String mname = "";}{/*@bgen(jjtree) SubModule */
  try {
/*@egen*/  st = < submodulekeyword > sep() mname = identifierargstr() optsep()  {    jjtn000.setSubModule(mname);    jjtn000.setLine(st.beginLine);    jjtn000.setCol(st.beginColumn);    jjtn000.setFileName(filename);    jjtn000.setLabel(st.image);  }  < LB > stmtsep(jjtn000)  (    sh = submoduleheaderstmts()    {      jjtn000.addHeader(sh);    }  )+  (    l = linkagestmts()    {      jjtn000.addLinkage(l);    }  )*  (    s = metastmts()    {      jjtn000.addMeta(s);    }  )*  (    r = revisionstmt() stmtsep(jjtn000) // No conform but saves a rule    {      jjtn000.addRevision(r);    }  )*  (    b = bodystmts()    {      jjtn000.addBody(b);    }  )*  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Header moduleheaderstmts() :{  YANG_Header h = null;}{  (    h = yangversionstmt() stmtsep(h)  | h = namespacestmt() stmtsep(h)  | h = prefixstmt() stmtsep(h)  )  {    return h;  }}YANG_Header submoduleheaderstmts() : // these stmts can appear in any order
{  YANG_Header h = null;}{  (    h = belongstostmt() stmtsep(h)  | h = yangversionstmt() stmtsep(h)  )  {    return h;  }}YANG_Meta metastmts() : // these stmts can appear in any order
{  YANG_Meta n = null;}{  (    n = organizationstmt() stmtsep(n)  | n = contactstmt() stmtsep(n)  | n = descriptionstmt() stmtsep(n)  | n = referencestmt() stmtsep(n)  )  {    return (YANG_Meta) n;  }}YANG_Linkage linkagestmts() :{  YANG_Linkage n = null;}{  // these stmts can appear in any order
  (    n = importstmt() stmtsep(n)  | n = includestmt() stmtsep(n)  )  {    return n;  }}YANG_Body bodystmts() :{  YANG_Body b = null;  boolean ended = false;}{  (    (      b = extensionstmt()    | b = featurestmt()    | b = identitystmt()    | b = typedefstmt()    | b = groupingstmt()    | b = datadefstmt()    | b = augmentstmt()    | b = rpcstmt()    | b = notificationstmt()    | b = deviationstmt()    )    stmtsep(b)  )  {    return b;  }}YANG_DataDef datadefstmt() :{  YANG_DataDef d = null;}{  (    d = containerstmt()  | d = leafstmt()  | d = leafliststmt()  | d = liststmt()  | d = choicestmt()  | d = anyxmlstmt()  | d = usesstmt()  )  {    return d;  }}YANG_YangVersion yangversionstmt()              :{/*@bgen(jjtree) YangVersion */
  YANG_YangVersion jjtn000 = new YANG_YangVersion(JJTYANGVERSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token yt;  String y = null;}{/*@bgen(jjtree) YangVersion */
  try {
/*@egen*/  yt = < yangversionkeyword > sep() y = yangversionargstr() optsep() stmtend(jjtn000)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setVersion(y);    jjtn000.setFileName(filename);    jjtn000.setLine(yt.beginLine);    jjtn000.setCol(yt.beginColumn);    jjtn000.setLabel(yt.image);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String yangversionargstr() :{  String y = null;}{  //< a string which matches the rule  // yang-version-arg >  y = stringoroneword()  {    return y;  }}YANG_Import importstmt()         :{/*@bgen(jjtree) Import */
  YANG_Import jjtn000 = new YANG_Import(JJTIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  YANG_Prefix n = null;  String i;  YANG_Revision r = null;}{/*@bgen(jjtree) Import */
  try {
/*@egen*/  t = < importkeyword > sep() i = identifierargstr() optsep()  {    jjtn000.setIdentifier(i);    jjtn000.setFileName(filename);    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setLabel(t.image);  }  < LB > stmtsep(jjtn000)  (    n = prefixstmt() stmtsep(jjtn000)    {      jjtn000.setPrefix(n);    }    [      r = revisiondatestmt() stmtsep(jjtn000)      {        jjtn000.setRevision(r);      }    ]  )*  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Include includestmt()          :{/*@bgen(jjtree) Include */
  YANG_Include jjtn000 = new YANG_Include(JJTINCLUDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String i;  YANG_Revision r = null;}{/*@bgen(jjtree) Include */
  try {
/*@egen*/  t = < includekeyword > sep() i = identifierargstr() optsep()  {    jjtn000.setIdentifier(i);    jjtn000.setFileName(filename);    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtn000)    [      r = revisiondatestmt() stmtsep(jjtn000)      {        jjtn000.setRevision(r);      }    ]    < RB >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_NameSpace namespacestmt()            :{/*@bgen(jjtree) NameSpace */
  YANG_NameSpace jjtn000 = new YANG_NameSpace(JJTNAMESPACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String uri;  Token t, tn;}{/*@bgen(jjtree) NameSpace */
  try {
/*@egen*/  t = < namespacekeyword > sep() uri = uristr() optsep() stmtend(jjtn000)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setNameSpace(uri);    jjtn000.setFileName(filename);    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setLabel(t.image);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String uristr() :{  Token u, p;  String s = "";}{  //< a sring which matches the rule
  //   URI in RFC 3986 >  (    s = stringoroneword()  )  {    return s;  }}YANG_Prefix prefixstmt()         :{/*@bgen(jjtree) Prefix */
  YANG_Prefix jjtn000 = new YANG_Prefix(JJTPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String s;  Token t;}{/*@bgen(jjtree) Prefix */
  try {
/*@egen*/  t = < prefixkeyword > sep() s = prefixargstr() optsep() stmtend(jjtn000)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setPrefix(s);    jjtn000.setLabel(t.image);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Belong belongstostmt()         :{/*@bgen(jjtree) Belong */
  YANG_Belong jjtn000 = new YANG_Belong(JJTBELONG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String b = null;  YANG_Prefix p = null;}{/*@bgen(jjtree) Belong */
  try {
/*@egen*/  t = < belongstokeyword > sep() b = identifierargstr() optsep() < LB > stmtsep(jjtn000) p = prefixstmt() stmtsep(jjtn000) < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setBelong(b);    jjtn000.setPrefix(p);    jjtn000.setFileName(filename);    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setLabel(t.image);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Organization organizationstmt()               :{/*@bgen(jjtree) Organization */
  YANG_Organization jjtn000 = new YANG_Organization(JJTORGANIZATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String s;}{/*@bgen(jjtree) Organization */
  try {
/*@egen*/  t = < organizationkeyword > sep() s = stringoroneword() optsep() stmtend(jjtn000)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setOrganization(s);    jjtn000.setFileName(filename);    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setLabel(t.image);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Contact contactstmt()          :{/*@bgen(jjtree) Contact */
  YANG_Contact jjtn000 = new YANG_Contact(JJTCONTACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String c;}{/*@bgen(jjtree) Contact */
  try {
/*@egen*/  t = < contactkeyword > sep() c = stringoroneword() optsep() stmtend(jjtn000)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setContact(c);    jjtn000.setFileName(filename);    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setLabel(t.image);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Description descriptionstmt()              :{/*@bgen(jjtree) Description */
  YANG_Description jjtn000 = new YANG_Description(JJTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String d = "";}{/*@bgen(jjtree) Description */
  try {
/*@egen*/  try  {    t = < descriptionkeyword > sep() d = stringoroneword() optsep() stmtend(jjtn000)    {      jjtn000.setDescription(d);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Reference referencestmt()            :{/*@bgen(jjtree) Reference */
  YANG_Reference jjtn000 = new YANG_Reference(JJTREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String r;}{/*@bgen(jjtree) Reference */
  try {
/*@egen*/  try  {    t = < referencekeyword > sep() r = stringoroneword() optsep() stmtend(jjtn000)    {      jjtn000.setReference(r);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Units unitsstmt()        :{/*@bgen(jjtree) Units */
  YANG_Units jjtn000 = new YANG_Units(JJTUNITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t, ut;  String u = null;}{/*@bgen(jjtree) Units */
  try {
/*@egen*/  try  {    t = < unitskeyword > sep() u = stringoroneword() optsep() stmtend(jjtn000)    {      jjtn000.setUnits(u);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Revision revisionstmt()           :{/*@bgen(jjtree) Revision */
  YANG_Revision jjtn000 = new YANG_Revision(JJTREVISION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token t;  YANG_Description d = null;  YANG_Reference r = null;  String da = null;}{/*@bgen(jjtree) Revision */
  try {
/*@egen*/  try  {    t = < revisionkeyword > sep() da = revisiondate() optsep()    {      jjtn000.setDate(da);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);    }    (< SC >  | (< LB >    {      lb = true;    }    stmtsep(jjtn000) [ d = descriptionstmt() stmtsep(jjtn000) ] [ r = referencestmt() stmtsep(jjtn000) ] < RB >    {      if (d != null) jjtn000.setDescription(d);      if (r != null) jjtn000.setReference(r);    }    ))    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String revisiondate() :{  String r = null;}{  r = dateargstr()  {    return r;  }}YANG_Revision revisiondatestmt()           :{/*@bgen(jjtree) Revision */
  YANG_Revision jjtn000 = new YANG_Revision(JJTREVISION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  YANG_Description d = null;  String da = null;}{/*@bgen(jjtree) Revision */
  try {
/*@egen*/  try  {    t = < revisiondatekeyword > sep() da = revisiondate() stmtend(jjtn000)    {      jjtn000.setDate(da);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);    }    {      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Extension extensionstmt()            :{/*@bgen(jjtree) Extension */
  YANG_Extension jjtn000 = new YANG_Extension(JJTEXTENSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token t;  String s = null;  YANG_Argument a = null;  YANG_Status st = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) Extension */
  try {
/*@egen*/  try  {    t = < extensionkeyword > sep() s = identifierargstr() optsep()    {      jjtn000.setExtension(s);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) ( //extensionAnyOrder()
    a = argumentstmt() stmtsep(jjtn000)    {      jjtn000.setArgument(a);    }  | st = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(st);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Argument argumentstmt()           :{/*@bgen(jjtree) Argument */
  YANG_Argument jjtn000 = new YANG_Argument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  YANG_Yin y = null;  String i = null;  Token t, a;  String any = "";}{/*@bgen(jjtree) Argument */
  try {
/*@egen*/  try  {    t = < argumentkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setArgument(i);      jjtn000.setLabel(t.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)    [      y = yinelementstmt() stmtsep(jjtn000)      {        jjtn000.setYin(y);      }    ]    < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Yin yinelementstmt()      :{/*@bgen(jjtree) Yin */
  YANG_Yin jjtn000 = new YANG_Yin(JJTYIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String y = null;}{/*@bgen(jjtree) Yin */
  try {
/*@egen*/  try  {    t = < yinelementkeyword > sep() y = yinelementargstr() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setYin(y);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String yinelementargstr() :{  String y = null;}{  //< a string which matches the rule
  //   yinelementarg >
  y = stringoroneword()  {    return y;  }}YANG_Identity identitystmt()           :{/*@bgen(jjtree) Identity */
  YANG_Identity jjtn000 = new YANG_Identity(JJTIDENTITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token t;  String i = null;  YANG_Base b = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) Identity */
  try {
/*@egen*/  try  {    t = < identitykeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setIdentity(i);      jjtn000.setLabel(t.image);    }    (< SC >  | < LB >    {      lb = true;    }    optsep() (b = basestmt() stmtsep(jjtn000)    {      jjtn000.setBase(b);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Base basestmt()       :{/*@bgen(jjtree) Base */
  YANG_Base jjtn000 = new YANG_Base(JJTBASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String i = null;}{/*@bgen(jjtree) Base */
  try {
/*@egen*/  try  {    t = < basekeyword > sep() i = identifierrefargstr() stmtend(jjtn000)    {      jjtn000.setBase(i);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Feature featurestmt()          :{/*@bgen(jjtree) Feature */
  YANG_Feature jjtn000 = new YANG_Feature(JJTFEATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token t;  String f = null;  YANG_IfFeature i = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) Feature */
  try {
/*@egen*/  try  {    t = < featurekeyword > sep() f = identifierargstr() optsep()    {      jjtn000.setFeature(f);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (i = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(i);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_IfFeature iffeaturestmt()            :{/*@bgen(jjtree) IfFeature */
  YANG_IfFeature jjtn000 = new YANG_IfFeature(JJTIFFEATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String i = null;}{/*@bgen(jjtree) IfFeature */
  try {
/*@egen*/  try  {    t = < iffeaturekeyword > sep() i = identifierrefargstr() stmtend(jjtn000)    {      jjtn000.setIfFeature(i);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_TypeDef typedefstmt()          :{/*@bgen(jjtree) TypeDef */
  YANG_TypeDef jjtn000 = new YANG_TypeDef(JJTTYPEDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String i = null;  YANG_Type ty = null;  YANG_Units u = null;  YANG_Default df = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) TypeDef */
  try {
/*@egen*/  t = < typedefkeyword > sep() i = identifierargstr() optsep()  {    jjtn000.setTypedef(i);    jjtn000.setFileName(filename);    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setLabel(t.image);  }  < LB > stmtsep(jjtn000)  (    ty = typestmt() stmtsep(jjtn000)    {      jjtn000.setType(ty);    }  | u = unitsstmt() stmtsep(jjtn000)    {      jjtn000.setUnits(u);    }  | df = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(df);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  )*  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Type typestmt()       :{/*@bgen(jjtree) Type */
  YANG_Type jjtn000 = new YANG_Type(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  boolean header = false, lb = false;  String it = null;  YANG_Base i = null;  String ii = null;  YANG_Enum e = null;  YANG_Decimal64Spec d = null;  YANG_LeafRefSpecification k = null;  YANG_BitSpecification b = null;  YANG_UnionSpecification u = null;  YANG_NumericalRestriction n = null;  YANG_StringRestriction s = null;}{/*@bgen(jjtree) Type */
  try {
/*@egen*/  try  {    t = < typekeyword > sep() it = identifierrefargstr() optsep()    {      jjtn000.setType(it);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);      header = true;    }    (< SC >  | (< LB >    {      lb = true;    }    stmtsep(jjtn000) (n = numericalrestrictions()    {      jjtn000.setNumRest(n);    }  | d = decimal64specification()    {      jjtn000.setDec64Spec(d);    }  | s = stringrestrictions()    {      jjtn000.setStringRest(s);    }  | (LOOKAHEAD(2)    e = enumstmt() optsep() // No conform to save a rule    {      jjtn000.addEnum(e);    }    ) +  | LOOKAHEAD(2)    k = leafrefspecification()    {      jjtn000.setLeafRef(k);    }  | LOOKAHEAD(2)    u = unionspecification()    {      jjtn000.setUnionSpec(u);    }  | ii = instanceidentifierspecification(jjtn000)    {      jjtn000.setInstanceIdentifierSpec(ii);    }  | i = identityrefspecification(jjtn000)    {      jjtn000.setIdentityRefSpec(i);    }  | b = bitsspecification()    {      jjtn000.setBitSpec(b);    }    ) * < RB >))    {
      return jjtn000;    }  }  catch (ParseException pe)  {    if (lb)    {      skip_to(RB);    }    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_NumericalRestriction numericalrestrictions() :{  YANG_Range r = null;}{  r = rangestmt() stmtsep(r)  {    return r;  }}YANG_Range rangestmt()        :{/*@bgen(jjtree) Range */
  YANG_Range jjtn000 = new YANG_Range(JJTRANGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  String r = null;  YANG_ErrorMessage errmess = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference re = null;  Token rt = null;}{/*@bgen(jjtree) Range */
  try {
/*@egen*/  try  {    rt = < rangekeyword > sep() r = rangeargstr() optsep()    {      jjtn000.setLine(rt.beginLine);      jjtn000.setCol(rt.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(rt.image);      jjtn000.setRange(r);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(rangeAnyOrder())*
    (errmess = errormessagestmt() stmtsep(jjtn000)    {      jjtn000.setErrMess(errmess);    }  | eat = errorapptagstmt() stmtsep(jjtn000)    {      jjtn000.setErrAppTag(eat);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | re = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(re);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Decimal64Spec decimal64specification()                :{/*@bgen(jjtree) Decimal64Spec */
  YANG_Decimal64Spec jjtn000 = new YANG_Decimal64Spec(JJTDECIMAL64SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String s = null;  YANG_Range r = null;}{/*@bgen(jjtree) Decimal64Spec */
  try {
/*@egen*/  (    s = fractiondigitstmt(jjtn000) optsep()    [      LOOKAHEAD(2)      r = rangestmt()      {        jjtn000.setRange(r);      }    ]    optsep()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/    {      jjtn000.setFractionDigit(s);      jjtn000.setFileName(filename);      return jjtn000;    }  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String fractiondigitstmt(YANG_Decimal64Spec j) :{  Token f = null;  String s = null;}{  f = < fractiondigitskeyword > sep() s = fractiondigitargstr() stmtend(j)  {    j.setLine(f.beginLine);    j.setCol(f.beginColumn);    j.setLabel(f.image);    return s;  }}String fractiondigitargstr() :{  String f = null;}{  f = stringoroneword()  {    return f;  }}YANG_StringRestriction stringrestrictions()                    :// these stmts can appear in any order{/*@bgen(jjtree) StringRestriction */
  YANG_StringRestriction jjtn000 = new YANG_StringRestriction(JJTSTRINGRESTRICTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  YANG_Length l = null;  YANG_Pattern p = null;}{/*@bgen(jjtree) StringRestriction */
  try {
/*@egen*/  (    (      l = lengthstmt() stmtsep(jjtn000)      {        jjtn000.setLine(l.getLine());        jjtn000.setCol(l.getCol());        jjtn000.setFileName(filename);        jjtn000.setLength(l);      }      (        LOOKAHEAD(2)        p = patternstmt() stmtsep(jjtn000)        {          jjtn000.setLine(p.getLine());          jjtn000.setCol(p.getCol());          jjtn000.setFileName(filename);          jjtn000.addPattern(p);        }      )*    )  |    (      LOOKAHEAD(2)      p = patternstmt() stmtsep(jjtn000)      {        jjtn000.setLine(p.getLine());        jjtn000.setCol(p.getCol());        jjtn000.setFileName(filename);        jjtn000.addPattern(p);      }    )+    [      LOOKAHEAD(2)      l = lengthstmt() stmtsep(jjtn000)      {        jjtn000.setLine(l.getLine());        jjtn000.setCol(l.getCol());        jjtn000.setFileName(filename);        jjtn000.setLength(l);      }    ]  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Length lengthstmt()         :{/*@bgen(jjtree) Length */
  YANG_Length jjtn000 = new YANG_Length(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  String l = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference r = null;  Token lk;}{/*@bgen(jjtree) Length */
  try {
/*@egen*/  try  {    lk = < lengthkeyword > sep() l = lengthargstr() optsep()    {      jjtn000.setLine(lk.beginLine);      jjtn000.setCol(lk.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(lk.image);      jjtn000.setLength(l);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(lengthAnyOrder())*
    (em = errormessagestmt() stmtsep(jjtn000)    {      jjtn000.setErrMess(em);    }  | eat = errorapptagstmt() stmtsep(jjtn000)    {      jjtn000.setErrAppTag(eat);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Pattern patternstmt()          :{/*@bgen(jjtree) Pattern */
  YANG_Pattern jjtn000 = new YANG_Pattern(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  String pa = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{/*@bgen(jjtree) Pattern */
  try {
/*@egen*/  try  {    t = < patternkeyword > sep() pa = stringoroneword() optsep()    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(t.image);      jjtn000.setPattern(pa);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (em = errormessagestmt() stmtsep(jjtn000)    {      jjtn000.setErrMess(em);    }  | eat = errorapptagstmt() stmtsep(jjtn000)    {      jjtn000.setErrAppTag(eat);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Default defaultstmt()          :{/*@bgen(jjtree) Default */
  YANG_Default jjtn000 = new YANG_Default(JJTDEFAULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t, dt;  String d = null;}{/*@bgen(jjtree) Default */
  try {
/*@egen*/  try  {    t = < defaultkeyword > sep() d = stringoroneword() stmtend(jjtn000)    {      jjtn000.setDefault(d);      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Enum enumstmt()       :{/*@bgen(jjtree) Enum */
  YANG_Enum jjtn000 = new YANG_Enum(JJTENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  String e = null;  YANG_Value v = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t, te;}{/*@bgen(jjtree) Enum */
  try {
/*@egen*/  try  {    t = < enumkeyword > sep() e = stringoroneword() optsep()    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setEnum(e);      jjtn000.setLabel(t.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (v = valuestmt() stmtsep(jjtn000)    {      jjtn000.setValue(v);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_LeafRefSpecification leafrefspecification()                       :{/*@bgen(jjtree) LeafRefSpecification */
  YANG_LeafRefSpecification jjtn000 = new YANG_LeafRefSpecification(JJTLEAFREFSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  YANG_Path p = null;  String r = null;}{/*@bgen(jjtree) LeafRefSpecification */
  try {
/*@egen*/  (    p = pathstmt() stmtsep(jjtn000)    {      jjtn000.setPath(p);      jjtn000.setFileName(filename);    }    [      LOOKAHEAD(2)      r = requireinstancestmt(jjtn000) stmtsep(jjtn000)    ]  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (r != null) jjtn000.setRequireInstance(r);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Path pathstmt()       :{/*@bgen(jjtree) Path */
  YANG_Path jjtn000 = new YANG_Path(JJTPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String pa = null;  Token t;}{/*@bgen(jjtree) Path */
  try {
/*@egen*/  try  {    t = < pathkeyword > sep() pa = pathargstr() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setPath(pa);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String requireinstancestmt(YangNode j) :{  String s = null;}{  < requireinstancekeyword > sep() s = requireinstanceargstr() stmtend(j)  {    return s;  }}String requireinstanceargstr() :{  String r = null;}{  r = stringoroneword()  {    return r;  }}String instanceidentifierspecification(YangNode j) :{  String s = null;}{  //[                                        No conform because it is not usefulness  s = requireinstancestmt(j) stmtsep(j)  {    return s;  }  //]}YANG_Base identityrefspecification(YangNode j) :{  YANG_Base b = null;}{  b = basestmt() stmtsep(j)  {    return b;  }}YANG_UnionSpecification unionspecification()                     :{/*@bgen(jjtree) UnionSpecification */
  YANG_UnionSpecification jjtn000 = new YANG_UnionSpecification(JJTUNIONSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  YANG_Type t = null;}{/*@bgen(jjtree) UnionSpecification */
  try {
/*@egen*/  try  {    (LOOKAHEAD(2)    t = typestmt() stmtsep(jjtn000)    {      jjtn000.addType(t);    }    ) +    {      jjtn000.setFileName(filename);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_BitSpecification bitsspecification()                   :{/*@bgen(jjtree) BitSpecification */
  YANG_BitSpecification jjtn000 = new YANG_BitSpecification(JJTBITSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  YANG_Bit b = null;}{/*@bgen(jjtree) BitSpecification */
  try {
/*@egen*/  (    LOOKAHEAD(2)    b = bitstmt() stmtsep(jjtn000)    {      jjtn000.setLabel("bits");       jjtn000.addBit(b);    }  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Bit bitstmt()      :{/*@bgen(jjtree) Bit */
  YANG_Bit jjtn000 = new YANG_Bit(JJTBIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  String i = null;  YANG_Position po = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t = null;}{/*@bgen(jjtree) Bit */
  try {
/*@egen*/  try  {    t = < bitkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setBit(i);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(t.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (po = positionstmt() stmtsep(jjtn000)    {      jjtn000.setPosition(po);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Position positionstmt()           :{/*@bgen(jjtree) Position */
  YANG_Position jjtn000 = new YANG_Position(JJTPOSITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String po = null;  Token t = null;}{/*@bgen(jjtree) Position */
  try {
/*@egen*/  try  {    t = < positionkeyword > sep() po = positionvalueargstr() stmtend(jjtn000)    {      jjtn000.setPosition(po);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String positionvalueargstr() :{  String p = null;}{  // < a string which matches the rule
  //  positionvaluearg >
  p = stringoroneword()  {    return p;  }}YANG_Status statusstmt()         :{/*@bgen(jjtree) Status */
  YANG_Status jjtn000 = new YANG_Status(JJTSTATUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String s = null;}{/*@bgen(jjtree) Status */
  try {
/*@egen*/  try  {    t = < statuskeyword > sep() s = statusargstr() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setStatus(s);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String statusargstr() :{  String s = null;}{  s = stringoroneword()  {    return s;  }}YANG_Config configstmt()         :{/*@bgen(jjtree) Config */
  YANG_Config jjtn000 = new YANG_Config(JJTCONFIG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String c = null;}{/*@bgen(jjtree) Config */
  try {
/*@egen*/  try  {    t = < configkeyword > sep() c = configargstr() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setConfig(c);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String configargstr() :{  String c = null;}{  //	< a string which matches the rule
  //           configarg >  c = stringoroneword()  {    return c;  }}YANG_Mandatory mandatorystmt()            :{/*@bgen(jjtree) Mandatory */
  YANG_Mandatory jjtn000 = new YANG_Mandatory(JJTMANDATORY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String m = null;}{/*@bgen(jjtree) Mandatory */
  try {
/*@egen*/  try  {    t = < mandatorykeyword > sep() m = mandatoryargstr() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setMandatory(m);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String mandatoryargstr() :{  String m = null;}{  //< a string which matches the rule
  //   mandatoryarg >
  m = stringoroneword()  {    return m;  }}YANG_Presence presencestmt()           :{/*@bgen(jjtree) Presence */
  YANG_Presence jjtn000 = new YANG_Presence(JJTPRESENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String pr = null;}{/*@bgen(jjtree) Presence */
  try {
/*@egen*/  try  {    t = < presencekeyword > sep() pr = stringoroneword() stmtend(jjtn000)    {      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setPresence(pr);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_OrderedBy orderedbystmt()            :{/*@bgen(jjtree) OrderedBy */
  YANG_OrderedBy jjtn000 = new YANG_OrderedBy(JJTORDEREDBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String o = null;}{/*@bgen(jjtree) OrderedBy */
  try {
/*@egen*/  try  {    t = < orderedbykeyword > sep() o = orderedbyargstr() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setOrderedBy(o);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String orderedbyargstr() :{  String o = null;}{  //	< a string which matches the rule
  //           orderedbyarg >
  o = stringoroneword()  {    return o;  }}YANG_Must muststmt()       :{/*@bgen(jjtree) Must */
  YANG_Must jjtn000 = new YANG_Must(JJTMUST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token must;  String m = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt ea = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) Must */
  try {
/*@egen*/  try  {    must = < mustkeyword > sep() m = string() optsep()    {      jjtn000.setLine(must.beginLine);      jjtn000.setCol(must.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(must.image);      jjtn000.setMust(m);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (em = errormessagestmt() stmtsep(jjtn000)    {      jjtn000.setErrMess(em);    }  | ea = errorapptagstmt() stmtsep(jjtn000)    {      jjtn000.setErrAppTag(ea);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_ErrorMessage errormessagestmt()               :{/*@bgen(jjtree) ErrorMessage */
  YANG_ErrorMessage jjtn000 = new YANG_ErrorMessage(JJTERRORMESSAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String e = null;}{/*@bgen(jjtree) ErrorMessage */
  try {
/*@egen*/  try  {    t = < errormessagekeyword > sep() e = stringoroneword() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setErrorMessage(e);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_ErrorAppt errorapptagstmt()            :{/*@bgen(jjtree) ErrorAppt */
  YANG_ErrorAppt jjtn000 = new YANG_ErrorAppt(JJTERRORAPPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String e = null;}{/*@bgen(jjtree) ErrorAppt */
  try {
/*@egen*/  try  {    t = < errorapptagkeyword > sep() e = stringoroneword() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setErrorAppt(e);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_MinElement minelementsstmt()             :{/*@bgen(jjtree) MinElement */
  YANG_MinElement jjtn000 = new YANG_MinElement(JJTMINELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String m = null;}{/*@bgen(jjtree) MinElement */
  try {
/*@egen*/  try  {    t = < minelementskeyword > sep() m = minvalueargstr() stmtend(jjtn000)    {      jjtn000.setMinElement(m);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String minvalueargstr() :{  String m = null;}{  //	< a string which matches the rule
  //         minvaluearg >
  m = stringoroneword()  {    return m;  }}YANG_MaxElement maxelementsstmt()             :{/*@bgen(jjtree) MaxElement */
  YANG_MaxElement jjtn000 = new YANG_MaxElement(JJTMAXELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String m = null;}{/*@bgen(jjtree) MaxElement */
  try {
/*@egen*/  try  {    t = < maxelementskeyword > sep() m = maxvalueargstr() stmtend(jjtn000)    {      jjtn000.setFileName(filename);      jjtn000.setMaxElement(m);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String maxvalueargstr() :{  String m = null;}{  //	< a string which matches the rule
  //           maxvalue >
  m = stringoroneword()  {    return m;  }}YANG_Value valuestmt()        :{/*@bgen(jjtree) Value */
  YANG_Value jjtn000 = new YANG_Value(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String d = null;  Token t = null;}{/*@bgen(jjtree) Value */
  try {
/*@egen*/  try  {    t = < valuekeyword > sep() d = stringoroneword() stmtend(jjtn000)    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setValue(d);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Body groupingstmt()           :{/*@bgen(jjtree) Grouping */
  YANG_Grouping jjtn000 = new YANG_Grouping(JJTGROUPING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token to;  String i = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef dd = null;}{/*@bgen(jjtree) Grouping */
  try {
/*@egen*/  try  {    to = < groupingkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setFileName(filename);      jjtn000.setLine(to.beginLine);      jjtn000.setCol(to.beginColumn);      jjtn000.setGrouping(i);      jjtn000.setLabel(to.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(groupAnyOrder())*
    (s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | (LOOKAHEAD(2)    (t = typedefstmt()    {      jjtn000.addTypeDef(t);    }  | g = groupingstmt()    {      if (g instanceof YANG_Grouping) jjtn000.addGrouping((YANG_Grouping) g);    }    ) stmtsep(jjtn000)) +  | dd = datadefstmt() stmtsep(jjtn000)    {      jjtn000.addDataDef(dd);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException pe)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Container containerstmt()            :{/*@bgen(jjtree) Container */
  YANG_Container jjtn000 = new YANG_Container(JJTCONTAINER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token to;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must m = null;  YANG_Presence p = null;  YANG_Config c = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef da = null;}{/*@bgen(jjtree) Container */
  try {
/*@egen*/  try  {    to = < containerkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setFileName(filename);      jjtn000.setLine(to.beginLine);      jjtn000.setCol(to.beginColumn);      jjtn000.setContainer(i);      jjtn000.setLabel(to.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(containerAnyOrder())*
    (w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | p = presencestmt() stmtsep(jjtn000)    {      jjtn000.setPresence(p);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | (LOOKAHEAD(2)    (t = typedefstmt()    {      jjtn000.addTypeDef(t);    }  | g = groupingstmt()    {      jjtn000.addGrouping((YANG_Grouping) g);    }    ) stmtsep(jjtn000)) +  | da = datadefstmt() stmtsep(jjtn000)    {      jjtn000.addDataDef(da);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException pe)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Leaf leafstmt()       :{/*@bgen(jjtree) Leaf */
  YANG_Leaf jjtn000 = new YANG_Leaf(JJTLEAF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token leaf;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Type t = null;  YANG_Units u = null;  YANG_Must m = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_Status s = null;  YANG_Description de = null;  YANG_Reference r = null;}{/*@bgen(jjtree) Leaf */
  try {
/*@egen*/  try  {    leaf = < leafkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(leaf.beginLine);      jjtn000.setCol(leaf.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLeaf(i);      jjtn000.setLabel(leaf.image);    }    < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(leafAnyOrder())*
    (w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | t = typestmt() stmtsep(jjtn000)    {      jjtn000.setType(t);    }  | u = unitsstmt() stmtsep(jjtn000)    {      jjtn000.setUnits(u);    }  | m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | d = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(d);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | ma = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(ma);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | de = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(de);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >    {      return jjtn000;    }  }  catch (ParseException pe)  {    if (lb) skip_to(RB);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_LeafList leafliststmt()           :{/*@bgen(jjtree) LeafList */
  YANG_LeafList jjtn000 = new YANG_LeafList(JJTLEAFLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token leaflist;  boolean lb = false;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Type t = null;  YANG_Units u = null;  YANG_Must mu = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_OrderedBy o = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) LeafList */
  try {
/*@egen*/  try  {    leaflist = < leaflistkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(leaflist.beginLine);      jjtn000.setCol(leaflist.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLeafList(i);      jjtn000.setLabel(leaflist.image);    }    < LB >    {      lb = true;    }    stmtsep(jjtn000)  // these stmts can appear in any order
    (w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | t = typestmt() stmtsep(jjtn000)    {      jjtn000.setType(t);    }  | u = unitsstmt() stmtsep(jjtn000)    {      jjtn000.setUnits(u);    }  | mu = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(mu);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMaxElement(ma);    }  | o = orderedbystmt() stmtsep(jjtn000)    {      jjtn000.setOrderedBy(o);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_List liststmt()       :{/*@bgen(jjtree) List */
  YANG_List jjtn000 = new YANG_List(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token list;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must m = null;  YANG_Key k = null;  YANG_Unique u = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_OrderedBy o = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef dd = null;}{/*@bgen(jjtree) List */
  try {
/*@egen*/  try  {    list = < listkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(list.beginLine);      jjtn000.setCol(list.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setList(i);      jjtn000.setLabel(list.image);    }    < LB >    {      lb = true;    }    stmtsep(jjtn000) (w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | k = keystmt() stmtsep(jjtn000)    {      jjtn000.setKey(k);    }  | u = uniquestmt() stmtsep(jjtn000)    {      jjtn000.addUnique(u);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMaxElement(ma);    }  | o = orderedbystmt() stmtsep(jjtn000)    {      jjtn000.setOrderedBy(o);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | t = typedefstmt() stmtsep(jjtn000)    {      jjtn000.addTypeDef(t);    }  | g = groupingstmt() stmtsep(jjtn000)    {      jjtn000.addGrouping((YANG_Grouping) g);    }  | dd = datadefstmt() stmtsep(jjtn000)    {      jjtn000.addDataDef(dd);    }    ) * < RB >    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Key keystmt()      :{/*@bgen(jjtree) Key */
  YANG_Key jjtn000 = new YANG_Key(JJTKEY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token key;  String k = null;}{/*@bgen(jjtree) Key */
  try {
/*@egen*/  try  {    key = < keykeyword > sep() k = keyargstr() stmtend(jjtn000)    {      jjtn000.setLine(key.beginLine);      jjtn000.setCol(key.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setKey(k);      jjtn000.setLabel(key.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String keyargstr() :{  String k = null;}{  //< a string which matches the rule
  //   keyarg >  k = stringoroneword()  {    return k;  }}YANG_Unique uniquestmt()         :{/*@bgen(jjtree) Unique */
  YANG_Unique jjtn000 = new YANG_Unique(JJTUNIQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token unique;  String u = null;}{/*@bgen(jjtree) Unique */
  try {
/*@egen*/  try  {    unique = < uniquekeyword > sep() u = uniqueargstr() stmtend(jjtn000)    {      jjtn000.setLine(unique.beginLine);      jjtn000.setCol(unique.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setUnique(u);      jjtn000.setLabel(unique.image);      return jjtn000;    }  }  catch (ParseException p)  {    YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String uniqueargstr() :{  String u = null;}{  //	< a string which matches the rule
  //           uniquearg >
  u = stringoroneword()  {    return u;  }}YANG_Choice choicestmt()         :{/*@bgen(jjtree) Choice */
  YANG_Choice jjtn000 = new YANG_Choice(JJTCHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token choice;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Default d = null;  YANG_Config cf = null;  YANG_Mandatory m = null;  YANG_Status s = null;  YANG_Description de = null;  YANG_Reference r = null;  YANG_ShortCase sc = null;  YANG_Case c = null;}{/*@bgen(jjtree) Choice */
  try {
/*@egen*/  try  {    choice = < choicekeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(choice.beginLine);      jjtn000.setCol(choice.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setChoice(i);      jjtn000.setLabel(choice.image);    }    (< SC >  | (< LB >    {      lb = true;    }    stmtsep(jjtn000) (w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | d = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(d);    }  | cf = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(cf);    }  | m = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(m);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | de = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(de);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | sc = shortcasestmt() stmtsep(jjtn000)    {      jjtn000.addShortCase(sc);    }  | c = casestmt() stmtsep(jjtn000)    {      jjtn000.addCase(c);    }    ) * < RB >))    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_ShortCase shortcasestmt() :{  YANG_ShortCase d = null;}{  (    d = containerstmt()  | d = leafstmt()  | d = leafliststmt()  | d = liststmt()  | d = anyxmlstmt()  )  {    return d;  }}YANG_Case casestmt()       :{/*@bgen(jjtree) Case */
  YANG_Case jjtn000 = new YANG_Case(JJTCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token tcase;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DataDef c = null;}{/*@bgen(jjtree) Case */
  try {
/*@egen*/  try  {    tcase = < casekeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(tcase.beginLine);      jjtn000.setCol(tcase.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setCase(i);      jjtn000.setLabel(tcase.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(caseAnyOrder())*
    (w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | c = datadefstmt() stmtsep(jjtn000)    {      jjtn000.addDataDef(c);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_AnyXml anyxmlstmt()         :{/*@bgen(jjtree) AnyXml */
  YANG_AnyXml jjtn000 = new YANG_AnyXml(JJTANYXML);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token any;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must mu = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) AnyXml */
  try {
/*@egen*/  try  {    any = < anyxmlkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(any.beginLine);      jjtn000.setCol(any.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setAnyXml(i);      jjtn000.setLabel(any.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(anyxmlAnyOrder())*
    (w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | mu = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(mu);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | m = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(m);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Uses usesstmt()       :{/*@bgen(jjtree) Uses */
  YANG_Uses jjtn000 = new YANG_Uses(JJTUSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token uses;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_RefineAnyNode re = null;  YANG_UsesAugment u = null;}{/*@bgen(jjtree) Uses */
  try {
/*@egen*/  try  {    uses = < useskeyword > sep() i = identifierrefargstr() optsep()    {      jjtn000.setLine(uses.beginLine);      jjtn000.setCol(uses.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setUses(i);      jjtn000.setLabel(uses.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(useAnyOrder())*
    (LOOKAHEAD(3)    w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | LOOKAHEAD(3)    iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | LOOKAHEAD(3)    s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | LOOKAHEAD(3)    d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | LOOKAHEAD(3)    r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | re = refinementstmt() stmtsep(jjtn000)    {      jjtn000.addRefinement(re);    }  | u = usesaugmentstmt() stmtsep(jjtn000)    {      jjtn000.addUsesAugment(u);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_RefineAnyNode refinementstmt()                :{/*@bgen(jjtree) RefineAnyNode */
  YANG_RefineAnyNode jjtn000 = new YANG_RefineAnyNode(JJTREFINEANYNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  YANG_Must m = null;  YANG_Presence pr = null;  YANG_Config c = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_Default dt = null;  YANG_Mandatory ma = null;  YANG_MinElement mi = null;  YANG_MaxElement max = null;  Token t;  String i = null;}{/*@bgen(jjtree) RefineAnyNode */
  try {
/*@egen*/  try  {    t = < refinekeyword > sep() i = refineargstr() optsep() (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | pr = presencestmt() stmtsep(jjtn000)    {      jjtn000.setPresence(pr);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | dt = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(dt);    }  | ma = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(ma);    }  | mi = minelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMinElement(mi);    }  | max = maxelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMaxElement(max);    }    ) * < RB >)    {      jjtn000.setFileName(filename);      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setRefineAnyNodeId(i);      jjtn000.setLabel(t.image);      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String refineargstr() :{  String r = null;}{  r = stringoroneword()  {    return r;  }}YANG_RefineContainer refinecontainerstmt()                  :{/*@bgen(jjtree) RefineContainer */
  YANG_RefineContainer jjtn000 = new YANG_RefineContainer(JJTREFINECONTAINER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  YANG_Must m = null;  YANG_Presence p = null;  YANG_Config c = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) RefineContainer */
  try {
/*@egen*/  //(refinecontainerAnyOrder())*
  (    m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | p = presencestmt() stmtsep(jjtn000)    {      jjtn000.setPresence(p);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_RefineLeaf refineleafstmt()             :{/*@bgen(jjtree) RefineLeaf */
  YANG_RefineLeaf jjtn000 = new YANG_RefineLeaf(JJTREFINELEAF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  YANG_Must m = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_Description de = null;  YANG_Reference r = null;}{/*@bgen(jjtree) RefineLeaf */
  try {
/*@egen*/  (    m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | d = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(d);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | ma = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(ma);    }  | de = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(de);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_RefineLeafList refineleafliststmt()                 :{/*@bgen(jjtree) RefineLeafList */
  YANG_RefineLeafList jjtn000 = new YANG_RefineLeafList(JJTREFINELEAFLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String i = null;  YANG_Must m = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{/*@bgen(jjtree) RefineLeafList */
  try {
/*@egen*/  //(refineleaflistAnyOrder())*
  (    m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMaxElement(ma);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_RefineList refineliststmt()             :{/*@bgen(jjtree) RefineList */
  YANG_RefineList jjtn000 = new YANG_RefineList(JJTREFINELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String i = null;  YANG_Must m = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{/*@bgen(jjtree) RefineList */
  try {
/*@egen*/  //(refinelistAnyOrder())*
  (    m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMaxElement(ma);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_RefineChoice refinechoicestmt()               :{/*@bgen(jjtree) RefineChoice */
  YANG_RefineChoice jjtn000 = new YANG_RefineChoice(JJTREFINECHOICE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String i = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Description de = null;  YANG_Reference r = null;  Token t;}{/*@bgen(jjtree) RefineChoice */
  try {
/*@egen*/  //(refinechoiceAnyOrder())*
  (    d = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(d);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | m = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(m);    }  | de = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(de);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_RefineCase refinecasestmt()             :{/*@bgen(jjtree) RefineCase */
  YANG_RefineCase jjtn000 = new YANG_RefineCase(JJTREFINECASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String i = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{/*@bgen(jjtree) RefineCase */
  try {
/*@egen*/  //(refinecaseAnyOrder())*
  (    d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_RefineAnyXml refineanyxmlstmt()               :{/*@bgen(jjtree) RefineAnyXml */
  YANG_RefineAnyXml jjtn000 = new YANG_RefineAnyXml(JJTREFINEANYXML);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String i = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_Must mu = null;  Token t;}{/*@bgen(jjtree) RefineAnyXml */
  try {
/*@egen*/  //(refineanyxmlAnyOrder())*
  (    mu = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(mu);    }    c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | m = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(m);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setFileName(filename);    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_UsesAugment usesaugmentstmt()              :{/*@bgen(jjtree) UsesAugment */
  YANG_UsesAugment jjtn000 = new YANG_UsesAugment(JJTUSESAUGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token aug, aa;  String ds = null;  String a = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DataDef da = null;  YANG_Case c = null;}{/*@bgen(jjtree) UsesAugment */
  try {
/*@egen*/  aug = < augmentkeyword > sep() a = usesaugmentargstr() optsep()  {    jjtn000.setLine(aug.beginLine);    jjtn000.setCol(aug.beginColumn);    jjtn000.setFileName(filename);    jjtn000.setUsesAugment(a);    jjtn000.setLabel(aug.image);  }  < LB > stmtsep(jjtn000)  (    w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  |    (      (        da = datadefstmt() stmtsep(jjtn000)      )      {        jjtn000.addDataDef(da);      }    |      (        c = casestmt() stmtsep(jjtn000)      )      {        jjtn000.addCase(c);      }    )  )*  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String usesaugmentargstr() :{  String s = null;}{  s = stringoroneword()  {    return s;  }}YANG_Augment augmentstmt()          :{/*@bgen(jjtree) Augment */
  YANG_Augment jjtn000 = new YANG_Augment(JJTAUGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token aug, aa;  String a = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DataDef da = null;  YANG_Case c = null;  YANG_Input i = null;  YANG_Output o = null;}{/*@bgen(jjtree) Augment */
  try {
/*@egen*/  aug = < augmentkeyword > sep() a = augmentargstr() optsep()  {    jjtn000.setLine(aug.beginLine);    jjtn000.setCol(aug.beginColumn);    jjtn000.setFileName(filename);    jjtn000.setAugment(a);    jjtn000.setLabel(aug.image);  }  < LB > stmtsep(jjtn000)  (    w = whenstmt() stmtsep(jjtn000)    {      jjtn000.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  |    (      (        da = datadefstmt() stmtsep(jjtn000)      )      {        jjtn000.addDataDef(da);      }    |      (        c = casestmt() stmtsep(jjtn000)      )      {        jjtn000.addCase(c);      }    )  )*  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String augmentargstr() :{  String a = null;}{  a = stringoroneword()  {    return a;  }}YANG_Unknown unknownstatement()          :{/*@bgen(jjtree) Unknown */
  YANG_Unknown jjtn000 = new YANG_Unknown(JJTUNKNOWN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String p = null;  String i = null, str = "";  Token s;  YANG_Unknown unknown = null;}{/*@bgen(jjtree) Unknown */
  try {
/*@egen*/  (    s = < P >    {      jjtn000.setExtension(s.image);      jjtn000.setLabel(s.image);    }    [      LOOKAHEAD(2)      sep() str = stringoroneword()      {        jjtn000.setArgument(str);      }    ]    optsep()    (      < SC >    | < LB > optsep()      (        unknown = unknownstatement2() optsep()        {          jjtn000.addUnknown(unknown);        }      )*      < RB > optsep()    )  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Unknown unknownstatement2()          :{/*@bgen(jjtree) Unknown */
  YANG_Unknown jjtn000 = new YANG_Unknown(JJTUNKNOWN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  String a = null, i = null, str = "";  Token dp = null, s;  YANG_Unknown unknown = null;}{/*@bgen(jjtree) Unknown */
  try {
/*@egen*/  (    optsep()    (      LOOKAHEAD(2)      (        LOOKAHEAD(2)        s = < S >      | LOOKAHEAD(2)        s = < P >      )      {        jjtn000.setExtension(s.image);        jjtn000.setLabel(s.image);      }    | LOOKAHEAD(2)      (        a = anykeyword()        {          jjtn000.setExtension(a);        }      )    )    [      LOOKAHEAD(2)      sep() str = stringoroneword()      {        jjtn000.setArgument(str);      }    ]    optsep()    (      < SC >    | < LB > optsep()      (        unknown = unknownstatement2() optsep()        {          jjtn000.addUnknown(unknown);        }      )*      < RB > optsep()    )  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_When whenstmt()       :{/*@bgen(jjtree) When */
  YANG_When jjtn000 = new YANG_When(JJTWHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token when;  String w = null;  YANG_Description d = null;  YANG_Reference r = null;}{/*@bgen(jjtree) When */
  try {
/*@egen*/  try  {    when = < whenkeyword > sep() w = string() optsep() (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }    ) * < RB >)    {      jjtn000.setLine(when.beginLine);      jjtn000.setCol(when.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setWhen(w);      jjtn000.setLabel(when.image);      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Rpc rpcstmt()      :{/*@bgen(jjtree) Rpc */
  YANG_Rpc jjtn000 = new YANG_Rpc(JJTRPC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token to;  String i = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_Input in = null;  YANG_Output o = null;}{/*@bgen(jjtree) Rpc */
  try {
/*@egen*/  try  {    to = < rpckeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(to.beginLine);      jjtn000.setCol(to.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setRpc(i);      jjtn000.setLabel(to.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | (t = typedefstmt()    {      jjtn000.addTypeDef(t);    }  | g = groupingstmt()    {      jjtn000.addGrouping((YANG_Grouping) g);    }    ) stmtsep(jjtn000)  | in = inputstmt() stmtsep(jjtn000)    {      jjtn000.setInput(in);    }  | o = outputstmt() stmtsep(jjtn000)    {      jjtn000.setOutput(o);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Input inputstmt()        :{/*@bgen(jjtree) Input */
  YANG_Input jjtn000 = new YANG_Input(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token to;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef d = null;}{/*@bgen(jjtree) Input */
  try {
/*@egen*/  to = < inputkeyword > optsep()  {    jjtn000.setLine(to.beginLine);    jjtn000.setCol(to.beginColumn);    jjtn000.setFileName(filename);    jjtn000.setLabel(to.image);  }  < LB > stmtsep(jjtn000)  (    (      t = typedefstmt()      {        jjtn000.addTypeDef(t);      }    | g = groupingstmt()      {        jjtn000.addGrouping((YANG_Grouping) g);      }    )    stmtsep(jjtn000)  |    (      LOOKAHEAD(2)      d = datadefstmt() stmtsep(jjtn000)      {        jjtn000.addDataDef(d);      }    )+  )*  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Output outputstmt()         :{/*@bgen(jjtree) Output */
  YANG_Output jjtn000 = new YANG_Output(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token to;  String i = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef d = null;}{/*@bgen(jjtree) Output */
  try {
/*@egen*/  to = < outputkeyword > optsep()  {    jjtn000.setLine(to.beginLine);    jjtn000.setCol(to.beginColumn);    jjtn000.setFileName(filename);    jjtn000.setLabel(to.image);  }  < LB > stmtsep(jjtn000)  (    (      t = typedefstmt()      {        jjtn000.addTypeDef(t);      }    | g = groupingstmt()      {        jjtn000.addGrouping((YANG_Grouping) g);      }    )    stmtsep(jjtn000)  |    (      LOOKAHEAD(2)      d = datadefstmt() stmtsep(jjtn000)    )+    {      jjtn000.addDataDef(d);    }  )*  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Notification notificationstmt()               :{/*@bgen(jjtree) Notification */
  YANG_Notification jjtn000 = new YANG_Notification(JJTNOTIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token to;  String i = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef da = null;}{/*@bgen(jjtree) Notification */
  try {
/*@egen*/  try  {    to = < notificationkeyword > sep() i = identifierargstr() optsep()    {      jjtn000.setLine(to.beginLine);      jjtn000.setCol(to.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setNotification(i);      jjtn000.setLabel(to.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000)  //(notificationAnyOrder())*
    (iff = iffeaturestmt() stmtsep(jjtn000)    {      jjtn000.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtn000)    {      jjtn000.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  | (t = typedefstmt()    {      jjtn000.addTypeDef(t);    }  | g = groupingstmt()    {      jjtn000.addGrouping((YANG_Grouping) g);    }    ) stmtsep(jjtn000)  | (LOOKAHEAD(2)    da = datadefstmt() stmtsep(jjtn000)) +    {      jjtn000.addDataDef(da);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_Deviation deviationstmt()            :{/*@bgen(jjtree) Deviation */
  YANG_Deviation jjtn000 = new YANG_Deviation(JJTDEVIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t, u;  String dev = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DeviateNotSupported dns = null;  YANG_DeviateAdd da = null;  YANG_DeviateReplace dr = null;  YANG_DeviateDelete dd = null;}{/*@bgen(jjtree) Deviation */
  try {
/*@egen*/  t = < deviationkeyword > sep() dev = deviationargstr() optsep()  {    jjtn000.setLine(t.beginLine);    jjtn000.setCol(t.beginColumn);    jjtn000.setFileName(filename);    jjtn000.setDeviation(dev);    jjtn000.setLabel(t.image);  }  < LB > stmtsep(jjtn000)  (    d = descriptionstmt() stmtsep(jjtn000)    {      jjtn000.setDescription(d);    }  | r = referencestmt() stmtsep(jjtn000)    {      jjtn000.setReference(r);    }  |    (      u = < deviatekeyword > sep()      (        dns = deviatenotsupportedstmt() stmtsep(jjtn000)        {          jjtn000.setDeviateNotSupported(dns);        }      | da = deviateaddstmt() stmtsep(jjtn000)        {          jjtn000.addDeviateAdd(da);        }      | dr = deviatereplacestmt() stmtsep(jjtn000)        {          jjtn000.addDeviateReplace(dr);        }      | dd = deviatedeletestmt() stmtsep(jjtn000)        {          jjtn000.addDeviateDelete(dd);        }      )    )  )+  < RB >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String deviationargstr() :{  String d = null;}{  d = stringoroneword()  {    return d;  }}YANG_DeviateNotSupported deviatenotsupportedstmt()                      :{/*@bgen(jjtree) DeviateNotSupported */
  YANG_DeviateNotSupported jjtn000 = new YANG_DeviateNotSupported(JJTDEVIATENOTSUPPORTED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token u;}{/*@bgen(jjtree) DeviateNotSupported */
  try {
/*@egen*/  try  {    u = < notsupportedkeyword > optsep()    {      jjtn000.setLine(u.beginLine);      jjtn000.setCol(u.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(u.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_DeviateAdd deviateaddstmt()             :{/*@bgen(jjtree) DeviateAdd */
  YANG_DeviateAdd jjtn000 = new YANG_DeviateAdd(JJTDEVIATEADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token a;  YANG_Units u = null;  YANG_Must m = null;  YANG_Unique uq = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_MinElement min = null;  YANG_MaxElement max = null;}{/*@bgen(jjtree) DeviateAdd */
  try {
/*@egen*/  try  {    a = < addkeyword > optsep()    {      jjtn000.setLine(a.beginLine);      jjtn000.setCol(a.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(a.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (u = unitsstmt() stmtsep(jjtn000)    {      jjtn000.setUnits(u);    }  | m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | uq = uniquestmt() stmtsep(jjtn000)    {      jjtn000.addUnique(uq);    }  | d = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(d);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | ma = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(ma);    }  | min = minelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMinElement(min);    }  | max = maxelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMaxElement(max);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_DeviateDelete deviatedeletestmt()                :{/*@bgen(jjtree) DeviateDelete */
  YANG_DeviateDelete jjtn000 = new YANG_DeviateDelete(JJTDEVIATEDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token t;  YANG_Units u = null;  YANG_Must m = null;  YANG_Unique uq = null;  YANG_Default d = null;}{/*@bgen(jjtree) DeviateDelete */
  try {
/*@egen*/  try  {    t = < deletekeyword > optsep()    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(t.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (u = unitsstmt() stmtsep(jjtn000)    {      jjtn000.setUnits(u);    }  | m = muststmt() stmtsep(jjtn000)    {      jjtn000.addMust(m);    }  | uq = uniquestmt() stmtsep(jjtn000)    {      jjtn000.setUnique(uq);    }  | d = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(d);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}YANG_DeviateReplace deviatereplacestmt()                 :{/*@bgen(jjtree) DeviateReplace */
  YANG_DeviateReplace jjtn000 = new YANG_DeviateReplace(JJTDEVIATEREPLACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean lb = false;  Token t;  YANG_Units u = null;  YANG_Type tp = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_MinElement min = null;  YANG_MaxElement max = null;}{/*@bgen(jjtree) DeviateReplace */
  try {
/*@egen*/  try  {    t = < replacekeyword > optsep()    {      jjtn000.setLine(t.beginLine);      jjtn000.setCol(t.beginColumn);      jjtn000.setFileName(filename);      jjtn000.setLabel(t.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtn000) (tp = typestmt() stmtsep(jjtn000)    {      jjtn000.setType(tp);    }  | u = unitsstmt() stmtsep(jjtn000)    {      jjtn000.setUnits(u);    }  | d = defaultstmt() stmtsep(jjtn000)    {      jjtn000.setDefault(d);    }  | c = configstmt() stmtsep(jjtn000)    {      jjtn000.setConfig(c);    }  | ma = mandatorystmt() stmtsep(jjtn000)    {      jjtn000.setMandatory(ma);    }  | min = minelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMinElement(min);    }  | max = maxelementsstmt() stmtsep(jjtn000)    {      jjtn000.setMaxElement(max);    }    ) * < RB >)    {      return jjtn000;    }  }  catch (ParseException p)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn, "token_exp", ";");    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}// Ranges
String rangeargstr() :{  String r = null;}{  //	< a string which matches the rule
  //         rangearg >  r = stringoroneword()  {    return r;  }}// Lengths
String lengthargstr() :{  String l = null;}{  //	< a string which matches the rule
  //         lengtharg >  l = stringoroneword()  {    return l;  }}// DateString dateargstr() :{  String d = null;}{  //< a string which matches the rule
  //   datearg >
  d = stringoroneword()  {    return d;  }}// leafref pathString pathargstr() :{  String p = "", pa = "";}{  //	< a string which matches the rule
  //          patharg >  p = stringoroneword()  {    return p + pa;  }}// Basic RulesString prefixargstr() :{  String p = "";}{  p = stringoroneword()  {    return p;  }}String identifierargstr() :{  String i = null;}{  i = stringoroneword()  {    return i;  }}String identifierrefargstr() :{  String i = null;}{  // < a string which matches the rule  //   identifier-ref-arg  i = stringoroneword()  {    return i;  }}String stringoroneword() :{  Token t;  String s = "";}{  (    s = string()  | s = anykeyword()  |    (      LOOKAHEAD(2)      t = < S >    | LOOKAHEAD(2)      t = < P >    )    {      s = t.image;    }  )  {    return s;  }}String string() :{  Token s;}{  s = < STRING >  {    return YangBuiltInTypes.concat(s.image);  }}void stmtend(YangNode zis) :{  YANG_Unknown un = null;}{  (    < SC >  | < LB > optsep()    (      un = unknownstatement()      {        zis.addUnknown(un);      }    )*    < RB > optsep()  )}void sep() :{}{  (    < WSP >  | linebreack()  | < CMT >  )+}String optsep() :{  Token t = null;  String o = "";}{  (    LOOKAHEAD(2)    (      t = < WSP >      {        o = o + " ";      }    | linebreack()      {        o = o + "\n";      }    | t = < CMT >      {        o = o + t.image;      }    )  )*  {    return o;  }}void stmtsep(YangNode zis) :{}{  (    LOOKAHEAD(2)    stmtsep2(zis)  )*}void stmtsep2(YangNode zis) :{  YANG_Unknown un = null;}{  (    < WSP >  | < CRLF >  | < CMT >  | un = unknownstatement()    {      zis.addUnknown(un);    }  )}void linebreack() :{}{  < CRLF >}String anykeyword() :{  Token t;}{  (    t = < anyxmlkeyword >  | t = < argumentkeyword >  | t = < augmentkeyword >  | t = < basekeyword >  | t = < belongstokeyword >  | t = < bitkeyword >  | t = < casekeyword >  | t = < choicekeyword >  | t = < configkeyword >  | t = < contactkeyword >  | t = < containerkeyword >  | t = < defaultkeyword >  | t = < descriptionkeyword >  | t = < enumkeyword >  | t = < errorapptagkeyword >  | t = < errormessagekeyword >  | t = < extensionkeyword >  | t = < deviationkeyword >  | t = < deviatekeyword >  | t = < featurekeyword >  | t = < fractiondigitskeyword >  | t = < groupingkeyword >  | t = < identitykeyword >  | t = < iffeaturekeyword >  | t = < importkeyword >  | t = < includekeyword >  | t = < inputkeyword >  | t = < keykeyword >  | t = < leafkeyword >  | t = < leaflistkeyword >  | t = < lengthkeyword >  | t = < listkeyword >  | t = < mandatorykeyword >  | t = < maxelementskeyword >  | t = < minelementskeyword >  | t = < modulekeyword >  | t = < mustkeyword >  | t = < namespacekeyword >  | t = < notificationkeyword >  | t = < orderedbykeyword >  | t = < organizationkeyword >  | t = < outputkeyword >  | t = < pathkeyword >  | t = < patternkeyword >  | t = < positionkeyword >  | t = < prefixkeyword >  | t = < presencekeyword >  | t = < rangekeyword >  | t = < referencekeyword >  | t = < refinekeyword >  | t = < requireinstancekeyword >  | t = < revisionkeyword >  | t = < rpckeyword >  | t = < statuskeyword >  | t = < submodulekeyword >  | t = < typekeyword >  | t = < typedefkeyword >  | t = < uniquekeyword >  | t = < unitskeyword >  | t = < useskeyword >  | t = < valuekeyword >  | t = < whenkeyword >  | t = < yangversionkeyword >  | t = < yinelementkeyword >  | t = < addkeyword >  | t = < currentkeyword >  | t = < deprecatedkeyword >  | t = < falsekeyword >  | t = < deletekeyword >  | t = < maxkeyword >  | t = < minkeyword >  | t = < nankeyword >  | t = < neginfkeyword >  | t = < notsupportedkeyword >  | t = < obsoletekeyword >  | t = < posinfkeyword >  | t = < replacekeyword >  | t = < systemkeyword >  | t = < truekeyword >  | t = < unboundedkeyword >  | t = < userkeyword >  )  {    return t.image;  }}