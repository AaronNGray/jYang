options{  MULTI = true;  NODE_DEFAULT_VOID = true;  NODE_PREFIX = "YANG_";  NODE_PACKAGE = "jyang.parser";}PARSER_BEGIN(yang)package jyang.parser;import java.util.Enumeration;import java.util.Vector;import java.io.*;public class yang{  static private String filename;  static public void setFileName(String f)  {    filename = f;  }}PARSER_END(yang)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN :{  < DECVALUE :    ([ "0"-"9" ])+  | ([ "+", "-" ])? ("0x") ([ "a"-"f", "A"-"F", "0"-"9" ])+ >| < NEGDECVALUE : "-" < DECVALUE > >| < #NONZERO : [ "1"-"9" ] >| < DQUOTE : "\"" >| < SQUOTE : "'" >| < DDOT : ".." >}TOKEN : /* DATE */{  < DATE : < FDIGIT > "-" < TDIGIT > "-" < TDIGIT > >| < FDIGIT : [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] [ "0"-"9" ] >| < TDIGIT : [ "0"-"9" ] [ "0"-"9" ] >}TOKEN :{  < FLOAT :    ([ "+", "-" ])? ([ "0"-"9" ])+    (      "." ([ "0"-"9" ])+    )?    (< EXPONENT >)? >| < #EXPONENT : [ "E", "e" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >}TOKEN : /* KEYWORDS */{  < anyxmlkeyword : "anyxml" >| < argumentkeyword : "argument" >| < augmentkeyword : "augment" >| < basekeyword : "base" >| < belongstokeyword : "belongs-to" >| < bitkeyword : "bit" >| < casekeyword : "case" >| < choicekeyword : "choice" >| < configkeyword : "config" >| < contactkeyword : "contact" >| < containerkeyword : "container" >| < defaultkeyword : "default" >| < descriptionkeyword : "description" >| < enumkeyword : "enum" >| < errorapptagkeyword : "error-app-tag" >| < errormessagekeyword : "error-message" >| < extensionkeyword : "extension" >| < deviationkeyword : "deviation" >| < deviatekeyword : "deviate" >| < featurekeyword : "feature" >| < fractiondigitskeyword : "fraction-digits" >| < groupingkeyword : "grouping" >| < identitykeyword : "identity" >| < iffeaturekeyword : "if-feature" >| < importkeyword : "import" >| < includekeyword : "include" >| < inputkeyword : "input" >| < keykeyword : "key" >| < leafkeyword : "leaf" >| < leaflistkeyword : "leaf-list" >| < lengthkeyword : "length" >| < listkeyword : "list" >| < mandatorykeyword : "mandatory" >| < maxelementskeyword : "max-elements" >| < minelementskeyword : "min-elements" >| < modulekeyword : "module" >| < mustkeyword : "must" >| < namespacekeyword : "namespace" >| < notificationkeyword : "notification" >| < orderedbykeyword : "ordered-by" >| < organizationkeyword : "organization" >| < outputkeyword : "output" >| < pathkeyword : "path" >| < patternkeyword : "pattern" >| < positionkeyword : "position" >| < prefixkeyword : "prefix" >| < presencekeyword : "presence" >| < rangekeyword : "range" >| < referencekeyword : "reference" >| < refinekeyword : "refine" >| < requireinstancekeyword : "require-instance" >| < revisionkeyword : "revision" >| < revisiondatekeyword : "revision-date" >| < rpckeyword : "rpc" >| < statuskeyword : "status" >| < submodulekeyword : "submodule" >| < typekeyword : "type" >| < typedefkeyword : "typedef" >| < uniquekeyword : "unique" >| < unitskeyword : "units" >| < useskeyword : "uses" >| < valuekeyword : "value" >| < whenkeyword : "when" >| < yangversionkeyword : "yang-version" >| < yinelementkeyword : "yin-element" >| < addkeyword : "add" >| < currentkeyword : "current" >| < deprecatedkeyword : "deprecated" >| < deletekeyword : "delete" >| < falsekeyword : "false" >| < minkeyword : "min" >| < maxkeyword : "max" >| < nankeyword : "NaN" >| < neginfkeyword : "-INF" >| < notsupportedkeyword : "not-supported" >| < obsoletekeyword : "obsolete" >| < posinfkeyword : "INF" >| < replacekeyword : "replace" >| < systemkeyword : "system" >| < truekeyword : "true" >| < unboundedkeyword : "unbounded" >| < userkeyword : "user" >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    | "-"    | "."    )*  | "\"" < LETTER >    (      < LETTER >    | < DIGIT >    | "-"    | "."    )*    "\"" >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < ABSNODEID :    (      (        "/" < LETTER >        (          < LETTER >        | < DIGIT >        | "-"        | "."        | ":"        )*      )+    )  |    (      "\""      (        "/" < LETTER >        (          < LETTER >        | < DIGIT >        | "-"        | "."        | ":"        )*      )+      "\""    ) >}TOKEN :{  < RELNODEID :    (      < LETTER >      (        < LETTER >      | < DIGIT >      | "-"      | "."      | ":"      )*      (        "/" < LETTER >        (          < LETTER >        | < DIGIT >        | "-"        | "."        | ":"        )*      )+    )  |    (      "\""      (        < LETTER >        (          < LETTER >        | < DIGIT >        | "-"        | "."        | ":"        )*        "/" < LETTER >        (          < LETTER >        | < DIGIT >        | "-"        | "."        | ":"        )*      )+      "\""    ) >}TOKEN : /* string without quote and without space */{  < ONEWORD : < FIRST > (< FIRST >)+ >| < #FIRST : [ "/", "\\", "(", ")", "~", "0"-"9", "_", "a"-"z", "A"-"Z", "[", "]", ".", "-", "=", "?", "+" ] >| < ID_SEMI_COL_ID : < FIRST > (< SEC >)+ >| < #SEC : [ "/", "\\", "(", ")", "~", "0"-"9", "_", "a"-"z", "A"-"Z", "[", "]", ".", "-", "=", "?", "+", ":" ] >| < COL : ":" >| < PREFIXEDID : < IDENTIFIER > < COL > < IDENTIFIER > >}TOKEN :{  < STRING :    "\"" (~[ "\"", " " ])* "\""  | "\""    (      (~[ "\"" ])    | "\\" "\""    )*    "\""  | "\'" (~[ "\'" ])* "\'" >}TOKEN : /* a quoted string of one word */{  < QWORD : "\"" (~[ " " ])* "\"" >}YANG_Specification Start() :{  YANG_Specification n = null;}{  (    n = module()  | n = submodule()  )  {    return n;  }}YANG_Specification module() #Module :{  Token mt, t = null;  Node n = null;  YANG_Header h = null;  YANG_Linkage l = null;  YANG_Meta m = null;  YANG_Revision r = null;  YANG_Body b = null;  String mname = null;}{  mt = < modulekeyword >  (    mname = identifier()    {      jjtThis.setName(mname);      jjtThis.setName(mt.image);      jjtThis.setLine(mt.beginLine);      jjtThis.setCol(mt.beginColumn);    }  )  "{" stmtsep(jjtThis)  (    h = moduleheaderstmts()    {      jjtThis.addHeader(h);    }  )+  (    l = linkagestmts()    {      jjtThis.addLinkage(l);    }  )*  (    m = metastmts()    {      jjtThis.addMeta(m);    }  )*  (    r = revisionstmt()    {      jjtThis.addRevision(r);    }  )*  (    b = bodystmts()    {      jjtThis.addBody(b);    }  )*  "}"  {    return jjtThis;  }}YANG_Specification submodule() #SubModule :{  YANG_Header sh = null;  YANG_Linkage l = null;  YANG_Meta s = null;  YANG_Revision r = null;  YANG_Body b = null;  Vector < YANG_Unknown > un = null;  Token st, t;  String mname = "";}{  st = < submodulekeyword >  (    mname = identifier()    {      jjtThis.setSubModule(mname);      jjtThis.setLine(st.beginLine);      jjtThis.setCol(st.beginColumn);    }  )  "{" stmtsep(jjtThis)  (    sh = submoduleheaderstmts()    {      jjtThis.addHeader(sh);    }  )+  (    l = linkagestmts()    {      jjtThis.addLinkage(l);    }  )*  (    s = metastmts()    {      jjtThis.addMeta(s);    }  )*  (    r = revisionstmt()    {      jjtThis.addRevision(r);    }  )*  (    b = bodystmts()    {      jjtThis.addBody(b);    }  )*  "}"  {    return jjtThis;  }}YANG_Header moduleheaderstmts() :{  YANG_Header h = null;}{  (    h = yangversionstmt() stmtsep(h)  | h = namespacestmt() stmtsep(h)  | h = prefixstmt() stmtsep(h)  )  {    return h;  }}YANG_Header submoduleheaderstmts() : // these stmts can appear in any order
{  YANG_Header h = null;}{  (    h = belongstostmt() stmtsep(h)  | h = yangversionstmt() stmtsep(h)  )  {    return h;  }}YANG_Meta metastmts() : // these stmts can appear in any order
{  YANG_Meta n = null;}{  (    n = organizationstmt() stmtsep(n)  | n = contactstmt() stmtsep(n)  | n = descriptionstmt() stmtsep(n)  | n = referencestmt() stmtsep(n)  )  {    return (YANG_Meta) n;  }}YANG_Linkage linkagestmts() :{  YANG_Linkage n = null;}{  // these stmts can appear in any order
  (    n = importstmt() stmtsep(n)  | n = includestmt() stmtsep(n)  )  {    return n;  }}YANG_Body bodystmts() :{  YANG_Body b = null;}{  (    (      b = extensionstmt()    | b = featurestmt()    | b = identitystmt()    | b = typedefstmt()    | b = groupingstmt()    | b = datadefstmt()    | b = augmentstmt()    | b = rpcstmt()    | b = notificationstmt()    | b = deviationstmt()    )    stmtsep(b)  )  {    return b;  }}YANG_DataDef datadefstmt() :{  YANG_DataDef d = null;}{  (    d = containerstmt()  | d = leafstmt()  | d = leafliststmt()  | d = liststmt()  | d = choicestmt()  | d = anyxmlstmt()  | d = usesstmt()  )  {    return d;  }}/*YANG_CaseDataDef casedatadefstmt() :{  YANG_CaseDataDef d = null;}{  (    d = containerstmt()  | d = leafstmt()  | d = leafliststmt()  | d = liststmt()  | d = anyxmlstmt()  | d = usesstmt()  )  {    return d;  }}*/YANG_YangVersion yangversionstmt() #YangVersion :{  Token t;}{  // the digit must be 1
  < yangversionkeyword > t = < DECVALUE >  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setVersion(t.image);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_Import importstmt() #Import :{  Token t;  YANG_Prefix n = null;  String i;  YANG_Revision r = null;  Vector < YANG_Unknown > un = null;}{  t = < importkeyword > i = identifierargstr()  {    jjtThis.setIdentifier(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);  }  "{" stmtsep(jjtThis)  (    n = prefixstmt() stmtsep(jjtThis)    {      jjtThis.setPrefix(n);    }  | r = revisiondatestmt() stmtsep(jjtThis)    {      jjtThis.setRevision(r);    }  )*  "}"  {    //jjtThis.setFileName("import " + filename);
    return jjtThis;  }}YANG_Include includestmt() #Include :{  Token t;  String i;  YANG_Revision r = null;  Vector < YANG_Unknown > un = null;}{  t = < includekeyword > i = identifierargstr()  {    jjtThis.setIdentifier(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);  }  (    ";"  | "{" stmtsep(jjtThis) [ r = revisiondatestmt() stmtsep(jjtThis) ]    {      jjtThis.setRevision(r);    }    "}"  )  {    return jjtThis;  }}YANG_NameSpace namespacestmt() #NameSpace :{  String uri;  Token t, tn;  Vector < YANG_Unknown > un = null;}{  t = < namespacekeyword >  (    uri = uristr()  | tn = < ID_SEMI_COL_ID >    {      uri = tn.image;    }  )  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setNameSpace(uri);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}String uristr() :{  String s;}{  //< a sring which matches the rule
  //   URI in RFC 3986 >
  s = string()  {    return s;  }}YANG_Prefix prefixstmt() #Prefix :{  String s;  Token t;  Vector < YANG_Unknown > un = null;}{  t = < prefixkeyword > s = string() /*prefixstr()*/  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setPrefix(s);    return jjtThis;  }}YANG_Belong belongstostmt() #Belong :{  Token t;  String b = null;  YANG_Prefix p = null;  Vector < YANG_Unknown > un = null;}{  t = < belongstokeyword > b = identifierargstr()  //(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
  "{" p = prefixstmt()  //(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
  "}"  {    jjtThis.setBelong(b);    jjtThis.setPrefix(p);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_Organization organizationstmt() #Organization :{  Token t;  String s;  Vector < YANG_Unknown > un = null;}{  t = < organizationkeyword > s = string()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setOrganization(s);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_Contact contactstmt() #Contact :{  Token t;  String c;  Vector < YANG_Unknown > un = null;}{  t = < contactkeyword > c = string()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setContact(c);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_Description descriptionstmt() #Description :{  Token t;  String d;  Vector < YANG_Unknown > un = null;}{  t = < descriptionkeyword > d = string()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setDescription(d);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_Reference referencestmt() #Reference :{  Token t;  String r;  Vector < YANG_Unknown > un = null;}{  t = < referencekeyword > r = string()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setReference(r);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_Units unitsstmt() #Units :{  Token t, ut;  String u = null;  Vector < YANG_Unknown > un = null;}{  t = < unitskeyword >  (    u = string()  | ut = < ONEWORD >    {      u = ut.image;    }  )  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setUnits(u);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_Revision revisionstmt() #Revision :{  Token t;  YANG_Description d = null;  String da = null;}{  t = < revisionkeyword > da = dateexprstr()  {    jjtThis.setDate(da);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);  }  (    ";"  |    (      "{" stmtsep(jjtThis) [ d = descriptionstmt() stmtsep(jjtThis) ] "}"      {        if (d != null) jjtThis.setDescription(d);      }    )  )  {    return jjtThis;  }}YANG_Revision revisiondatestmt() #Revision :{  Token t;  YANG_Description d = null;  String da = null;}{  t = < revisiondatekeyword > da = dateexprstr()  {    jjtThis.setDate(da);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);  }  (    ";"  | "{" stmtsep(jjtThis) [ d = descriptionstmt() stmtsep(jjtThis) ] "}"    {      if (d != null) jjtThis.setDescription(d);    }  )  {    return jjtThis;  }}YANG_Extension extensionstmt() #Extension :{  Token t;  String s = null;  YANG_Argument a = null;  YANG_Status st = null;  YANG_Description d = null;  YANG_Reference r = null;  Vector < YANG_Unknown > un = null;}{  t = < extensionkeyword > s = identifierargstr()  {    jjtThis.setExtension(s);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);  }  (    ";"  | "{" stmtsep(jjtThis)    (      //extensionAnyOrder()
      a = argumentstmt() stmtsep(jjtThis)      {        jjtThis.setArgument(a);      }    | st = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(st);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Argument argumentstmt() #Argument :{  YANG_Yin y = null;  String i = null;  Token t, a;  String any = "";}{  t = < argumentkeyword > i = identifierargstr()  {    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setArgument(i);  }  (    ";"  | "{"    [      stmtsep(jjtThis) y = yinelementstmt()      {        jjtThis.setYin(y);      }    ]    "}"  )  {    return jjtThis;  }}/*String anyArgument() :{  String s = "", any = "";  Token a;}{  (    any = anykeyword()    {      s = s + any;    }  | a = < IDENTIFIER >    {      s = s + a.image;    }  | a = < ID_SEMI_COL_ID >    {      s = s + a.image;    }  )+  (    ";"  | s = anyArgument()  | "{" s = anyArgument() "}"  )+  {    return s;  }}*/YANG_Yin yinelementstmt() #Yin :{  Token t;  String y = null;}{  t = < yinelementkeyword > y = yinelementargstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setYin(y);    return jjtThis;  }}String yinelementargstr() :{  String y = null;}{  //< a string which matches the rule
  //   yinelementarg >
  (    LOOKAHEAD(2)    y = yinelementarg()  | y = string()  )  {    return y;  }}String yinelementarg() :{  Token t;}{  (    t = < truekeyword >  | t = < falsekeyword >  )  {    return t.image;  }}YANG_Identity identitystmt() #Identity :{  Token t;  String i = null;  YANG_Base b = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  t = < identitykeyword > i = identifierargstr()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setIdentity(i);  }  (    ";"  | "{"    (      b = basestmt() stmtsep(jjtThis)      {        jjtThis.setBase(b);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Base basestmt() #Base :{  Token t;  String i = null;}{  t = < basekeyword > i = identifierrefstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setBase(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_Feature featurestmt() #Feature :{  Token t;  String f = null;  YANG_IfFeature i = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  t = < featurekeyword > f = identifierargstr()  {    jjtThis.setFeature(f);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);  }  (    ";"  | "{"    (      i = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(i);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }}YANG_IfFeature iffeaturestmt() #IfFeature :{  Token t;  String i = null;}{  t = < iffeaturekeyword > i = identifierrefstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setIfFeature(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}YANG_TypeDef typedefstmt() #TypeDef :{  Token t;  String i = null;  YANG_Type ty = null;  YANG_Units u = null;  YANG_Default df = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  t = < typedefkeyword > i = identifierargstr()  {    jjtThis.setTypedef(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);  }  "{" stmtsep(jjtThis)  (    ty = typestmt() stmtsep(jjtThis)    {      jjtThis.setType(ty);    }  | u = unitsstmt() stmtsep(jjtThis)    {      jjtThis.setUnits(u);    }  | df = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(df);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  "}"  {    return jjtThis;  }}YANG_Type typestmt() #Type :{  Token t;  String it = null;  YANG_Base i = null;  String ii = null;  YANG_Enum e = null;  YANG_Decimal64Spec d = null;  YANG_LeafRefSpecification k = null;  YANG_BitSpecification b = null;  YANG_UnionSpecification u = null;  YANG_NumericalRestriction n = null;  YANG_StringRestriction s = null;}{  t = < typekeyword > it = identifierrefstr()  {    jjtThis.setType(it);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);  }  (    ";"  |    (      "{" stmtsep(jjtThis)      (        n = numericalrestrictions()        {          jjtThis.setNumRest(n);        }      | LOOKAHEAD(2)        d = decimal64specification()        {          jjtThis.setDec64Spec(d);        }      |        (          (            LOOKAHEAD(2)            e = enumstmt()            {              jjtThis.addEnum(e);            }          )+        )      | LOOKAHEAD(2)        k = leafrefspecification()        {          jjtThis.setLeafRef(k);        }      | LOOKAHEAD(2)        u = unionspecification()        {          jjtThis.setUnionSpec(u);        }      | ii = instanceidentifierspecification()        {          jjtThis.setInstanceIdentifierSpec(ii);        }      | i = identityrefspecification()        {          jjtThis.setIdentityRefSpec(i);        }      | b = bitsspecification()        {          jjtThis.setBitSpec(b);        }      | s = stringrestrictions()        {          jjtThis.setStringRest(s);        }      )    )    stmtsep(jjtThis)    {}    "}"  )  {    //jjtThis.checkTypeSyntax();
    return jjtThis;  }}YANG_NumericalRestriction numericalrestrictions() :{  YANG_Range r = null;}{  r = rangestmt() stmtsep(r)  {    return r;  }}YANG_Range rangestmt() #Range :{  String r = null;  YANG_ErrorMessage errmess = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference re = null;  Token rt = null;}{  rt = < rangekeyword > r = rangeexprstr()  {    jjtThis.setLine(rt.beginLine);    jjtThis.setCol(rt.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setRange(r);  }  (    ";"  | "{" stmtsep(jjtThis)    //(rangeAnyOrder())*
    (      errmess = errormessagestmt() stmtsep(jjtThis)      {        jjtThis.setErrMess(errmess);      }    | eat = errorapptagstmt() stmtsep(jjtThis)      {        jjtThis.setErrAppTag(eat);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | re = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(re);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Decimal64Spec decimal64specification() #Decimal64Spec :{  Token f, r;  String s = null;  YANG_Range rg = null;}{  f = < fractiondigitskeyword > s = fractiondigitstmt()  {    jjtThis.setFractionDigit(s);    jjtThis.setFileName(filename);    jjtThis.setLine(f.beginLine);    jjtThis.setCol(f.beginColumn);  }  {    return jjtThis;  }}String fractiondigitstmt() :{  Token t;}{  t = < DECVALUE > ";"  {    return t.image;  }}YANG_StringRestriction stringrestrictions() #StringRestriction :// these stmts can appear in any order
{  YANG_Length l = null;  YANG_Pattern p = null;}{  (    LOOKAHEAD(3)    (      l = lengthstmt() stmtsep(jjtThis)      {        jjtThis.setLine(l.getLine());        jjtThis.setCol(l.getCol());        jjtThis.setFileName(filename);        jjtThis.setLength(l);      }      //[LOOKAHEAD(2)
      (        LOOKAHEAD(3)        p = patternstmt() stmtsep(jjtThis)        {          jjtThis.setLine(p.getLine());          jjtThis.setCol(p.getCol());          jjtThis.setFileName(filename);          jjtThis.addPattern(p);        }      )*      //]
    )  |    (      (        LOOKAHEAD(3)        p = patternstmt() stmtsep(jjtThis)        {          jjtThis.setLine(p.getLine());          jjtThis.setCol(p.getCol());          jjtThis.setFileName(filename);          jjtThis.addPattern(p);        }      )*      [        LOOKAHEAD(3)        l = lengthstmt() stmtsep(jjtThis)        {          jjtThis.setLine(l.getLine());          jjtThis.setCol(l.getCol());          jjtThis.setFileName(filename);          jjtThis.setLength(l);        }      ]    )  )  {    return jjtThis;  }}YANG_Length lengthstmt() #Length :{  String l = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference r = null;  Token lk;}{  lk = < lengthkeyword > l = lengthexprstr()  {    jjtThis.setLine(lk.beginLine);    jjtThis.setCol(lk.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLength(l);  }  (    ";"  | "{" stmtsep(jjtThis)    //(lengthAnyOrder())*
    (      em = errormessagestmt() stmtsep(jjtThis)      {        jjtThis.setErrMess(em);      }    | eat = errorapptagstmt() stmtsep(jjtThis)      {        jjtThis.setErrAppTag(eat);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Pattern patternstmt() #Pattern :{  String p = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t, pt;}{  t = < patternkeyword >  (    p = string()  | pt = < ONEWORD >    {      p = pt.image;    }  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setPattern(p);  }  (    ";"  | "{" stmtsep(jjtThis)    //(patternAnyOrder())*
    (      em = errormessagestmt() stmtsep(jjtThis)      {        jjtThis.setErrMess(em);      }    | eat = errorapptagstmt() stmtsep(jjtThis)      {        jjtThis.setErrAppTag(eat);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Default defaultstmt() #Default :{  Token t, dt;  String d = null;}{  t = < defaultkeyword >  (    d = string()  | dt = < ONEWORD >    {      d = dt.image;    }  )  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setDefault(d);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}/*
YANG_Enum enumspecification()     : 
{
YANG_Enum e = null;
Vector<YANG_Unknown> un = null;
}
{			
	(
	e = enumstmt() (LOOKAHEAD(2) un = unknownstatement(){e.addUnknown(un);})*
	)
		{
		return e;
		}
}
*/YANG_Enum enumstmt() #Enum :{  String e = null;  YANG_Value v = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t, te;}{  t = < enumkeyword > e = string()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setEnum(e);  }  (    ";"  | "{" stmtsep(jjtThis)    (      v = valuestmt() stmtsep(jjtThis)      {        jjtThis.setValue(v);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }}YANG_LeafRefSpecification leafrefspecification() #LeafRefSpecification :{  YANG_Path p = null;  String r = null;}{  (    p = pathstmt() stmtsep(jjtThis)    {      jjtThis.setPath(p);      jjtThis.setFileName(filename);    }    [      LOOKAHEAD(2)      r = requireinstancestmt() stmtsep(jjtThis)    ]  )  {    if (r != null) jjtThis.setRequireInstance(r);    return jjtThis;  }}YANG_Path pathstmt() #Path :{  String p = null;  Token t;}{  t = < pathkeyword > p = pathargstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setPath(p);    return jjtThis;  }}String requireinstancestmt() :{  Token t;}{  < requireinstancekeyword >  (    t = < truekeyword >  | t = < falsekeyword >  )  ";"  {    return t.image;  }}String instanceidentifierspecification() :{  String s = null;}{  //LOOKAHEAD(2) 
  s = requireinstancestmt()  {    return s;  }}YANG_Base identityrefspecification() :{  YANG_Base b = null;}{  b = basestmt()  {    return b;  }}YANG_UnionSpecification unionspecification() #UnionSpecification :{  YANG_Type t = null;}{  (    LOOKAHEAD(2)    t = typestmt() stmtsep(jjtThis)    {      jjtThis.addType(t);    }  )+  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_BitSpecification bitsspecification() #BitSpecification :{  YANG_Bit b = null;}{  (    LOOKAHEAD(2)    b = bitstmt()    {      jjtThis.addBit(b);    }    stmtsep(jjtThis)  )+  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_Bit bitstmt() #Bit :{  String i = null;  YANG_Position p = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t = null;}{  t = < bitkeyword > i = identifierargstr()  {    jjtThis.setBit(i);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);  }  (    ";"  | "{" stmtsep(jjtThis)    //bitAnyOrder())*
    (      p = positionstmt() stmtsep(jjtThis)      {        jjtThis.setPosition(p);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }  //"}"
}YANG_Position positionstmt() #Position :{  String p = null;  Token t = null;}{  t = < positionkeyword > p = positionvaluestr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setPosition(p);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    return jjtThis;  }}String positionvaluestr() :{  String p = null;}{  // < a string which matches the rule
  //  positionvalue >
  (    LOOKAHEAD(2)    p = positionvalue()  | p = string()  )  {    return p;  }}String positionvalue() :{  String p = null;}{  p = nonnegativeintegervalue()  {    return p;  }}YANG_Status statusstmt() #Status :{  Token t;  String s = null;}{  t = < statuskeyword > s = statusargstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setStatus(s);    return jjtThis;  }}String statusargstr() :{  String s = null;}{  //< a string which matches the rule
  //  statusarg >
  (    LOOKAHEAD(2)    s = statusarg()  | s = string()  )  {    return s;  }}String statusarg() :{  Token t;}{  (    t = < currentkeyword >  | t = < obsoletekeyword >  | t = < deprecatedkeyword >  )  {    return t.image;  }}YANG_Config configstmt() #Config :{  Token t;  String c = null;}{  t = < configkeyword > c = configargstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setConfig(c);    return jjtThis;  }}String configargstr() :{  String c = null;}{  //	< a string which matches the rule
  //           configarg >
  (    LOOKAHEAD(2)    c = configarg()  | c = string()  )  {    return c;  }}String configarg() :{  Token t;}{  (    t = < truekeyword >  | t = < falsekeyword >  )  {    return t.image;  }}YANG_Mandatory mandatorystmt() #Mandatory :{  Token t;  String m = null;}{  t = < mandatorykeyword > m = mandatoryargstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setMandatory(m);    return jjtThis;  }}String mandatoryargstr() :{  String m = null;}{  //< a string which matches the rule
  //   mandatoryarg >
  m = mandatoryarg()  {    return m;  }}String mandatoryarg() :{  Token t;}{  (    t = < truekeyword >  | t = < falsekeyword >  )  {    return t.image;  }}YANG_Presence presencestmt() #Presence :{  Token t;  String p = null;}{  t = < presencekeyword > p = string()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setPresence(p);    return jjtThis;  }}YANG_OrderedBy orderedbystmt() #OrderedBy :{  Token t;  String o = null;}{  t = < orderedbykeyword > o = orderedbyargstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setOrderedBy(o);    return jjtThis;  }}String orderedbyargstr() :{  String o = null;}{  //	< a string which matches the rule
  //           orderedbyarg >
  o = orderedbyarg()  {    return o;  }}String orderedbyarg() :{  Token t;}{  (    t = < userkeyword >  | t = < systemkeyword >  )  {    return t.image;  }}YANG_Must muststmt() #Must :{  Token must;  String m = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt ea = null;  YANG_Description d = null;  YANG_Reference r = null;}{  must = < mustkeyword > m = string()  {    jjtThis.setLine(must.beginLine);    jjtThis.setCol(must.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setMust(m);  }  (    ";"  | "{" stmtsep(jjtThis)    //(mustAnyOrder())*
    (      em = errormessagestmt() stmtsep(jjtThis)      {        jjtThis.setErrMess(em);      }    | ea = errorapptagstmt() stmtsep(jjtThis)      {        jjtThis.setErrAppTag(ea);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }}YANG_ErrorMessage errormessagestmt() #ErrorMessage :{  Token t;  String e = null;}{  t = < errormessagekeyword > e = string()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setErrorMessage(e);    return jjtThis;  }}YANG_ErrorAppt errorapptagstmt() #ErrorAppt :{  Token t;  String e = null;}{  t = < errorapptagkeyword > e = string()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setErrorAppt(e);    return jjtThis;  }}YANG_MinElement minelementsstmt() #MinElement :{  Token t;  String m = null;}{  t = < minelementskeyword > m = minvaluestr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  //;
  {    jjtThis.setMinElement(m);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    return jjtThis;  }}String minvaluestr() :{  String m = null;}{  //	< a string which matches the rule
  //         minvalue >
  m = minvalue()  {    return m;  }}String minvalue() :{  String m = null;}{  m = nonnegativeintegervalue()  {    return m;  }}YANG_MaxElement maxelementsstmt() #MaxElement :{  Token t;  String m = null;}{  t = < maxelementskeyword > m = maxvaluestr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  //;
  {    jjtThis.setFileName(filename);    jjtThis.setMaxElement(m);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    return jjtThis;  }}String maxvaluestr() :{  String m = null;}{  //	< a string which matches the rule
  //           maxvalue >
  m = maxvalue()  {    return m;  }}String maxvalue() :{  Token t;  String p = null;}{  LOOKAHEAD(2)  t = < unboundedkeyword >  {    return t.image;  }| LOOKAHEAD(2)  p = positiveintegervalue()  {    return p;  }}YANG_Value valuestmt() #Value :{  String d = null;  Token t = null;}{  t = < valuekeyword > d = integervalue()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setValue(d);    return jjtThis;  }}YANG_Body groupingstmt() #Grouping :{  Token to;  String i = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef dd = null;}{  to = < groupingkeyword > i = identifierargstr()  {    jjtThis.setFileName(filename);    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setGrouping(i);  }  (    ";"  | "{" stmtsep(jjtThis)    //(groupAnyOrder())*
    (      s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    |      (        LOOKAHEAD(2)        (          t = typedefstmt()          {            jjtThis.addTypeDef(t);          }        | g = groupingstmt()          {            if (g instanceof YANG_Grouping) jjtThis.addGrouping((YANG_Grouping) g);          }        )        stmtsep(jjtThis)      )+    | dd = datadefstmt() stmtsep(jjtThis)      {        jjtThis.addDataDef(dd);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Container containerstmt() #Container :{  Token to;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must m = null;  YANG_Presence p = null;  YANG_Config c = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef da = null;}{  to = < containerkeyword > i = identifierargstr()  {    jjtThis.setFileName(filename);    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setContainer(i);  }  (    ";"  | "{" stmtsep(jjtThis)    //(containerAnyOrder())*
    (      w = whenstmt() stmtsep(jjtThis)      {        jjtThis.setWhen(w);      }    | iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | m = muststmt() stmtsep(jjtThis)      {        jjtThis.addMust(m);      }    | p = presencestmt() stmtsep(jjtThis)      {        jjtThis.setPresence(p);      }    | c = configstmt() stmtsep(jjtThis)      {        jjtThis.setConfig(c);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    |      (        LOOKAHEAD(2)        (          t = typedefstmt()          {            jjtThis.addTypeDef(t);          }        | g = groupingstmt()          {            jjtThis.addGrouping((YANG_Grouping) g);          }        )        stmtsep(jjtThis)      )+    | da = datadefstmt() stmtsep(jjtThis)      {        jjtThis.addDataDef(da);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Leaf leafstmt() #Leaf :{  Token leaf;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Type t = null;  YANG_Units u = null;  YANG_Must m = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_Status s = null;  YANG_Description de = null;  YANG_Reference r = null;}{  leaf = < leafkeyword > i = identifierargstr()  {    jjtThis.setLine(leaf.beginLine);    jjtThis.setCol(leaf.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLeaf(i);  }  "{" stmtsep(jjtThis)  //(leafAnyOrder())*
  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | t = typestmt() stmtsep(jjtThis)    {      jjtThis.setType(t);    }  | u = unitsstmt() stmtsep(jjtThis)    {      jjtThis.setUnits(u);    }  | m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | d = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(d);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | ma = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(ma);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | de = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(de);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  "}"  {    return jjtThis;  }}YANG_LeafList leafliststmt() #LeafList :{  Token leaflist;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Type t = null;  YANG_Units u = null;  YANG_Must mu = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_OrderedBy o = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  leaflist = < leaflistkeyword > i = identifierargstr()  {    jjtThis.setLine(leaflist.beginLine);    jjtThis.setCol(leaflist.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLeafList(i);  }  "{" stmtsep(jjtThis)  // these stmts can appear in any order
  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | t = typestmt() stmtsep(jjtThis)    {      jjtThis.setType(t);    }  | u = unitsstmt() stmtsep(jjtThis)    {      jjtThis.setUnits(u);    }  | mu = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(mu);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(ma);    }  | o = orderedbystmt() stmtsep(jjtThis)    {      jjtThis.setOrderedBy(o);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  "}"  {    return jjtThis;  }}YANG_List liststmt() #List :{  Token list;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must m = null;  YANG_Key k = null;  YANG_Unique u = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_OrderedBy o = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef dd = null;}{  list = < listkeyword > i = identifierargstr()  {    jjtThis.setLine(list.beginLine);    jjtThis.setCol(list.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setList(i);  }  "{" stmtsep(jjtThis)  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | k = keystmt() stmtsep(jjtThis)    {      jjtThis.setKey(k);    }  | u = uniquestmt() stmtsep(jjtThis)    {      jjtThis.addUnique(u);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(ma);    }  | o = orderedbystmt() stmtsep(jjtThis)    {      jjtThis.setOrderedBy(o);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  | t = typedefstmt() stmtsep(jjtThis)    {      jjtThis.addTypeDef(t);    }  | g = groupingstmt() stmtsep(jjtThis)    {      jjtThis.addGrouping((YANG_Grouping) g);    }  | dd = datadefstmt() stmtsep(jjtThis)    {      jjtThis.addDataDef(dd);    }  )*  "}"  {    return jjtThis;  }}YANG_Key keystmt() #Key :{  Token key;  String k = null;}{  key = < keykeyword > k = keyargstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(key.beginLine);    jjtThis.setCol(key.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setKey(k);    return jjtThis;  }}String keyargstr() :{  String k = null;}{  //< a string which matches the rule
  //   keyarg >
  LOOKAHEAD(2)  k = keyarg()  {    return k;  }| k = string()  {    return k;  }}String keyarg() :{  Token t;  String k = new String();}{  (t = < IDENTIFIER >  {    k += t.image + " ";  }  )+  {    return k;  }}YANG_Unique uniquestmt() #Unique :{  Token unique;  String u = null;}{  unique = < uniquekeyword > u = uniqueargstr()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(unique.beginLine);    jjtThis.setCol(unique.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setUnique(u);    return jjtThis;  }}String uniqueargstr() :{  String u = null;}{  //	< a string which matches the rule
  //           uniquearg >
  LOOKAHEAD(2)  u = uniquearg()  {    return u;  }| u = string()  {    return u;  }}String uniquearg() :{  String d = null, u = new String();}{  (    d = descendantschemanodeid()    {      u = d;    }  )  {    return u;  }}YANG_Choice choicestmt() #Choice :{  Token choice;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Default d = null;  YANG_Config cf = null;  YANG_Mandatory m = null;  YANG_Status s = null;  YANG_Description de = null;  YANG_Reference r = null;  YANG_ShortCase sc = null;  YANG_Case c = null;}{  choice = < choicekeyword > i = identifierargstr()  {    jjtThis.setLine(choice.beginLine);    jjtThis.setCol(choice.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setChoice(i);  }  (    ";"  |    (      "{" stmtsep(jjtThis)      (        w = whenstmt() stmtsep(jjtThis)        {          jjtThis.setWhen(w);        }      | iff = iffeaturestmt() stmtsep(jjtThis)        {          jjtThis.addIfFeature(iff);        }      | d = defaultstmt() stmtsep(jjtThis)        {          jjtThis.setDefault(d);        }      | cf = configstmt() stmtsep(jjtThis)        {          jjtThis.setConfig(cf);        }      | m = mandatorystmt() stmtsep(jjtThis)        {          jjtThis.setMandatory(m);        }      | s = statusstmt() stmtsep(jjtThis)        {          jjtThis.setStatus(s);        }      | de = descriptionstmt() stmtsep(jjtThis)        {          jjtThis.setDescription(de);        }      | r = referencestmt() stmtsep(jjtThis)        {          jjtThis.setReference(r);        }      | sc = shortcasestmt() stmtsep(jjtThis)        {          jjtThis.addShortCase(sc);        }      | c = casestmt() stmtsep(jjtThis)        {          jjtThis.addCase(c);        }      )*      "}"    )  )  {    return jjtThis;  }}YANG_ShortCase shortcasestmt() :{  YANG_ShortCase d = null;}{  (    d = containerstmt()  | d = leafstmt()  | d = leafliststmt()  | d = liststmt()  | d = anyxmlstmt()  )  {    return d;  }}YANG_Case casestmt() #Case :{  Token tcase;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_CaseDataDef c = null;}{  tcase = < casekeyword > i = identifierargstr()  {    jjtThis.setLine(tcase.beginLine);    jjtThis.setCol(tcase.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setCase(i);  }  (    ";"  | "{" stmtsep(jjtThis)    //(caseAnyOrder())*
    (      w = whenstmt() stmtsep(jjtThis)      {        jjtThis.setWhen(w);      }    | iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    | c = datadefstmt() stmtsep(jjtThis)      {        jjtThis.addCaseDef(c);      }    )*    "}"  )  {    return jjtThis;  }}YANG_AnyXml anyxmlstmt() #AnyXml :{  Token any;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must mu = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  any = < anyxmlkeyword > i = identifierargstr()  {    jjtThis.setLine(any.beginLine);    jjtThis.setCol(any.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setAnyXml(i);  }  (    ";"  | "{" stmtsep(jjtThis)    //(anyxmlAnyOrder())*
    (      w = whenstmt() stmtsep(jjtThis)      {        jjtThis.setWhen(w);      }    | iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | mu = muststmt() stmtsep(jjtThis)      {        jjtThis.addMust(mu);      }    | c = configstmt() stmtsep(jjtThis)      {        jjtThis.setConfig(c);      }    | m = mandatorystmt() stmtsep(jjtThis)      {        jjtThis.setMandatory(m);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Uses usesstmt() #Uses :{  Token uses;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_Refine re = null;  YANG_UsesAugment u = null;}{  uses = < useskeyword > i = identifierrefstr()  {    jjtThis.setLine(uses.beginLine);    jjtThis.setCol(uses.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setUses(i);  }  (    ";"  | "{" stmtsep(jjtThis)    //(useAnyOrder())*
    (      LOOKAHEAD(3)      w = whenstmt() stmtsep(jjtThis)      {        jjtThis.setWhen(w);      }    | LOOKAHEAD(3)      iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | LOOKAHEAD(3)      s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | LOOKAHEAD(3)      d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | LOOKAHEAD(3)      r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    | re = refinementstmt() stmtsep(jjtThis)      {        jjtThis.addRefinement(re);      }    | u = usesaugmentstmt() stmtsep(jjtThis)      {        jjtThis.addUsesAugment(u);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Refine refinementstmt() #RefineAnyNode:{YANG_Must m = null;  YANG_Presence p = null;  YANG_Config c = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_Default dt = null;  YANG_Mandatory ma = null;  YANG_MinElement mi = null;  YANG_MaxElement max = null;  Token t;  String i = null;  Vector < YANG_Unknown > vu = new Vector < YANG_Unknown > ();  YANG_Unknown un = null;}{  t = < refinekeyword > i = refineargstr()  (    ";"  | "{"    (      LOOKAHEAD(2)      un = unknownstatement()      {        vu.add(un);      }    )*    /*    (LOOKAHEAD(3)      r = refinecontainerstmt()    | LOOKAHEAD(3)      r = refineleafstmt()    | LOOKAHEAD(3)      r = refineleafliststmt()    | LOOKAHEAD(3)      r = refineliststmt()    | LOOKAHEAD(3)      r = refinechoicestmt()    | LOOKAHEAD(3)      r = refinecasestmt()    | LOOKAHEAD(3)      r = refineanyxmlstmt()    )    */(    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | p = presencestmt() stmtsep(jjtThis)    {      jjtThis.setPresence(p);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  | dt = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(dt);    }  | ma = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(ma);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | max = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(max);    }  )*        "}"  )  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setRefineAnyNodeId(i);    for (Enumeration < YANG_Unknown > eu = vu.elements(); eu.hasMoreElements();) jjtThis.addUnknown(eu.nextElement());    return jjtThis;  }}String refineargstr() :{  String r = null;}{  r = refinearg()  {    return r;  }}String refinearg() :{  String r = null;}{  r = descendantschemanodeid()  {    return r;  }}YANG_RefineContainer refinecontainerstmt() #RefineContainer :{  YANG_Must m = null;  YANG_Presence p = null;  YANG_Config c = null;  YANG_Description d = null;  YANG_Reference r = null;}{  //(refinecontainerAnyOrder())*
  (    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | p = presencestmt() stmtsep(jjtThis)    {      jjtThis.setPresence(p);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineLeaf refineleafstmt() #RefineLeaf :{  YANG_Must m = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_Description de = null;  YANG_Reference r = null;}{  (    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | d = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(d);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | ma = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(ma);    }  | de = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(de);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineLeafList refineleafliststmt() #RefineLeafList :{  String i = null;  YANG_Must m = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{  //(refineleaflistAnyOrder())*
  (    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(ma);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineList refineliststmt() #RefineList :{  String i = null;  YANG_Must m = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{  //(refinelistAnyOrder())*
  (    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(ma);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineChoice refinechoicestmt() #RefineChoice :{  String i = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Description de = null;  YANG_Reference r = null;  Token t;}{  //(refinechoiceAnyOrder())*
  (    d = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(d);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | m = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(m);    }  | de = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(de);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineCase refinecasestmt() #RefineCase :{  String i = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{  //(refinecaseAnyOrder())*
  (    d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineAnyXml refineanyxmlstmt() #RefineAnyXml :{  String i = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{  //(refineanyxmlAnyOrder())*
  (    c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | m = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(m);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_UsesAugment usesaugmentstmt() #UsesAugment :{  Token aug, aa;  String ds = null;  String a = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DataDef da = null;  YANG_Case c = null;}{  aug = < augmentkeyword >  (    LOOKAHEAD(2)    a = usesaugmentargstr()  | aa = < IDENTIFIER >    {      a = aa.image;    }  )  {    jjtThis.setLine(aug.beginLine);    jjtThis.setCol(aug.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setUsesAugment(a);  }  "{" stmtsep(jjtThis)  //(augmentAnyOrder())*
  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  |    (      (        da = datadefstmt() stmtsep(jjtThis)      )      {        jjtThis.addDataDef(da);      }    |      (        c = casestmt() stmtsep(jjtThis)      )      {        jjtThis.addCase(c);      }    )  )*  "}"  {    return jjtThis;  }}String usesaugmentargstr() :{  String s = null;}{  s = useaugmentarg()  {    return s;  }}String useaugmentarg() :{  String ua = null;}{  ua = descendantschemanodeid()  {    return ua;  }}YANG_Augment augmentstmt() #Augment :{  Token aug, aa;  String a = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DataDef da = null;  YANG_Case c = null;  YANG_Input i = null;  YANG_Output o = null;}{  aug = < augmentkeyword >  (    a = augmentargstr()    {      System.out.println("augment");    }    /*  | aa = < ONEWORD >    {      System.out.println("one word");      a = aa.image;    }    */  )  {    jjtThis.setLine(aug.beginLine);    jjtThis.setCol(aug.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setAugment(a);  }  "{" stmtsep(jjtThis)  //(augmentAnyOrder())*
  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  |    (      (        da = datadefstmt() stmtsep(jjtThis)      )      {        jjtThis.addDataDef(da);      }    |      (        c = casestmt() stmtsep(jjtThis)      )      {        jjtThis.addCase(c);      }    )  )*  "}"  {    return jjtThis;  }}String augmentargstr() :{  String a = null;  Token t;}{  a = augmentarg()  {    return a;  }}String augmentarg() :{  Token a;}{  a = < ABSNODEID >  {    return a.image;  }}/*  (    LOOKAHEAD(2)    //  a = string()    t = < STRING >  | t = < QWORD >    {      System.out.println("string or qword");      return t.image;    }  | a = schemanodeid()  )  {    return a;  }}*/YANG_Unknown unknownstatement() #Unknown :{  String kw = null;  String str = null;  Token i, j;  YANG_Unknown unknown = null;}{  (    i = < PREFIXEDID >    {      jjtThis.setExtension(i.image);      jjtThis.setLine(i.beginLine);      jjtThis.setCol(i.beginColumn);      jjtThis.setFileName(filename);    }    [      str = string()      {        jjtThis.setArgument(str);      }    ]    (      ";"    | "{"      (        unknown = unknownstatement2()        {          jjtThis.addUnknown(unknown);        }      )*      "}"    )  )  {    return jjtThis;  }}YANG_Unknown unknownstatement2() #Unknown :{  String kw = null;  String str = null;  Token i, j;  YANG_Unknown unknown = null;}{  (    i = < PREFIXEDID >  | i = < IDENTIFIER >    {      jjtThis.setExtension(i.image);      jjtThis.setLine(i.beginLine);      jjtThis.setCol(i.beginColumn);      jjtThis.setFileName(filename);    }    [      str = string()      {        jjtThis.setArgument(str);      }    ]    (      ";"    | "{"      (        unknown = unknownstatement2()        {          jjtThis.addUnknown(unknown);        }      )*      "}"    )  )  {    return jjtThis;  }}YANG_When whenstmt() #When :{  Token when;  String w = null;}{  when = < whenkeyword > w = string()  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    jjtThis.setLine(when.beginLine);    jjtThis.setCol(when.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setWhen(w);    return jjtThis;  }}YANG_Rpc rpcstmt() #Rpc :{  Token to;  String i = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_Input in = null;  YANG_Output o = null;}{  to = < rpckeyword > i = identifierargstr()  {    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setRpc(i);  }  (    ";"  | "{" stmtsep(jjtThis)    //(rpcAnyOrder())*
    (      iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    |      (        t = typedefstmt()        {          jjtThis.addTypeDef(t);        }      | g = groupingstmt()        {          jjtThis.addGrouping((YANG_Grouping) g);        }      )      stmtsep(jjtThis)    | in = inputstmt() stmtsep(jjtThis)      {        jjtThis.setInput(in);      }    | o = outputstmt() stmtsep(jjtThis)      {        jjtThis.setOutput(o);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Input inputstmt() #Input :{  Token to;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef d = null;}{  to = < inputkeyword >  {    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setFileName(filename);  }  "{" stmtsep(jjtThis)  (    (      t = typedefstmt()      {        jjtThis.addTypeDef(t);      }    | g = groupingstmt()      {        jjtThis.addGrouping((YANG_Grouping) g);      }    )    stmtsep(jjtThis)  |    (      LOOKAHEAD(2)      d = datadefstmt() stmtsep(jjtThis)      {        jjtThis.addDataDef(d);      }    )+  )*  "}"  {    return jjtThis;  }}YANG_Output outputstmt() #Output :{  Token to;  String i = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef d = null;}{  to = < outputkeyword >  {    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setFileName(filename);  }  "{" stmtsep(jjtThis)  (    (      t = typedefstmt()      {        jjtThis.addTypeDef(t);      }    | g = groupingstmt()      {        jjtThis.addGrouping((YANG_Grouping) g);      }    )    stmtsep(jjtThis)  |    (      LOOKAHEAD(2)      d = datadefstmt() stmtsep(jjtThis)    )+    {      jjtThis.addDataDef(d);    }  )*  "}"  {    return jjtThis;  }}YANG_Notification notificationstmt() #Notification :{  Token to;  String i = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef da = null;}{  to = < notificationkeyword > i = identifierargstr()  {    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setNotification(i);  }  (    ";"  | "{" stmtsep(jjtThis)    //(notificationAnyOrder())*
    (      iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    |      (        t = typedefstmt()        {          jjtThis.addTypeDef(t);        }      | g = groupingstmt()        {          jjtThis.addGrouping((YANG_Grouping) g);        }      )      stmtsep(jjtThis)    |      (        LOOKAHEAD(2)        da = datadefstmt() stmtsep(jjtThis)      )+      {        jjtThis.addDataDef(da);      }    )*    "}"  )  {    return jjtThis;  }}YANG_Deviation deviationstmt() #Deviation :{  Token t;  String dev = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DeviateNotSupported dns = null;  YANG_DeviateAdd da = null;  YANG_DeviateReplace dr = null;  YANG_DeviateDelete dd = null;}{  t = < deviationkeyword > dev = absoluteschemanodeid()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setDeviation(dev);  }  "{" stmtsep(jjtThis)  (    d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  | LOOKAHEAD(2)    dns = deviatenotsupportedstmt()    {      jjtThis.setDeviateNotSupported(dns);    }  | LOOKAHEAD(2)    da = deviateaddstmt()    {      jjtThis.addDeviateAdd(da);    }  | LOOKAHEAD(2)    dr = deviatereplacestmt()    {      jjtThis.addDeviateReplace(dr);    }  | LOOKAHEAD(2)    dd = deviatedeletestmt()    {      jjtThis.addDeviateDelete(dd);    }  )*  "}"  {    return jjtThis;  }}YANG_DeviateNotSupported deviatenotsupportedstmt() #DeviateNotSupported :{  Token t, u;}{  t = < deviatekeyword > u = < notsupportedkeyword >  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);  }  (    ";"  | "{" stmtsep(jjtThis) "}"  )  {    return jjtThis;  }}YANG_DeviateAdd deviateaddstmt() #DeviateAdd :{  Token t;  YANG_Units u = null;  YANG_Must m = null;  YANG_Unique uq = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_MinElement min = null;  YANG_MaxElement max = null;}{  t = < deviatekeyword > < addkeyword >  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);  }  (    ";"  | "{" stmtsep(jjtThis)    (      u = unitsstmt() stmtsep(jjtThis)      {        jjtThis.setUnits(u);      }    | m = muststmt() stmtsep(jjtThis)      {        jjtThis.addMust(m);      }    | uq = uniquestmt() stmtsep(jjtThis)      {        jjtThis.addUnique(uq);      }    | d = defaultstmt() stmtsep(jjtThis)      {        jjtThis.setDefault(d);      }    | c = configstmt() stmtsep(jjtThis)      {        jjtThis.setConfig(c);      }    | ma = mandatorystmt() stmtsep(jjtThis)      {        jjtThis.setMandatory(ma);      }    | min = minelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMinElement(min);      }    | max = maxelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMaxElement(max);      }    )*    "}"  )  {    return jjtThis;  }}YANG_DeviateDelete deviatedeletestmt() #DeviateDelete :{  Token t;  YANG_Units u = null;  YANG_Must m = null;  YANG_Unique uq = null;  YANG_Default d = null;}{  t = < deviatekeyword > < deletekeyword >  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);  }  (    ";"  | "{" stmtsep(jjtThis)    (      u = unitsstmt() stmtsep(jjtThis)      {        jjtThis.setUnits(u);      }    | m = muststmt() stmtsep(jjtThis)      {        jjtThis.addMust(m);      }    | uq = uniquestmt() stmtsep(jjtThis)      {        jjtThis.addUnique(uq);      }    | d = defaultstmt() stmtsep(jjtThis)      {        jjtThis.setDefault(d);      }    )*    "}"  )  {    return jjtThis;  }}YANG_DeviateReplace deviatereplacestmt() #DeviateReplace :{  Token t;  YANG_Units u = null;  YANG_Type tp = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_MinElement min = null;  YANG_MaxElement max = null;}{  t = < deviatekeyword > < replacekeyword >  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);  }  (    ";"  | "{" stmtsep(jjtThis)    (      tp = typestmt() stmtsep(jjtThis)      {        jjtThis.setType(tp);      }    | u = unitsstmt() stmtsep(jjtThis)      {        jjtThis.setUnits(u);      }    | d = defaultstmt() stmtsep(jjtThis)      {        jjtThis.setDefault(d);      }    | c = configstmt() stmtsep(jjtThis)      {        jjtThis.setConfig(c);      }    | ma = mandatorystmt() stmtsep(jjtThis)      {        jjtThis.setMandatory(ma);      }    | min = minelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMinElement(min);      }    | max = maxelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMaxElement(max);      }    )*    "}"  )  {    return jjtThis;  }}// Ranges
String rangeexprstr() :{  String r = null;  Token t;}{  //	< a string which matches the rule
  //         rangeexpr >
  (    r = string()  | t = < ONEWORD >    {      r = t.image;    }  )  {    return r;  }}// Lengths
String lengthexprstr() :{  String l = null;  Token t;}{  //	< a string which matches the rule
  //         lengthexpr >
  (    l = string()  | t = < ONEWORD >    {      l = t.image;    }  )  {    return l;  }}// Date
String dateexprstr() :{  String d = null;}{  //< a string which matches the rule
  //   dateexpr >
  d = dateexpr()  {    return d;  }}String dateexpr() :{  String d = null;  Token a, b, c;}{  a = < DATE >  {    return a.image;  }| d = string()  {    return d;  }}// Schema Node Identifiers
String schemanodeid() :{  String s = null;}{  (    LOOKAHEAD(2)    s = absoluteschemanodeid()    {      return s;    }  | s = descendantschemanodeid()    {      return s;    }  )}String absoluteschemanodeid() :{  Token t;}{  t = < ABSNODEID >  {    return t.image;  }}String descendantschemanodeid() :{  String d = null, a = null;  Token r = null;}{  LOOKAHEAD(2)  (    (      d = nodeidentifier()    | d = absoluteschemanodeid()    )    {      return d;    }  )| r = < RELNODEID >  {    return r.image;  }}String nodeidentifier() :{  Token n;}{  (    n = < IDENTIFIER >  | n = < PREFIXEDID >  )  {    return n.image;  }}/*String nodeidentifier() :{  Token t = null;  String p = null, n = new String(), m = null;}{  [    LOOKAHEAD(2)    p = prefix() ":"  ]  (    t = < IDENTIFIER >  | m = anykeyword()  )  {    if (p != null) n += p + ":";    if (m == null) return n + t.image;    else return n + m;  }}*/// Instance Identifiers
void instanceidentifier() :{}{  (    "/"    (      nodeidentifier()      (        predicate()      )*    )  )+}void predicate() :{}{  "["  (    LOOKAHEAD(2)    predicateexpr()  | LOOKAHEAD(2)    pos()  )  "]"}String predicateexpr() :{  String l = null, s = null;}{  (    l = nodeidentifier()  | "."    {      l = ".";    }  )  "="  (    (      < DQUOTE > s = string() < DQUOTE >    )    {      l += "=\"" + s + "\"";    }  |    (      < SQUOTE > string() < SQUOTE >    )    {      l += "=\'" + s + "\'";    }  )  {    return l;  }}String pos() :{  String p = null;}{  p = nonnegativeintegervalue()  {    return p;  }}// keyref path
String pathargstr() :{  String p = null;}{  //	< a string which matches the rule
  //          patharg >
  (    LOOKAHEAD(2)    p = patharg()  | p = string()  )  {    return p;  }}String patharg() :{  String p = null;}{  (    p = absolutepatharg()  | p = relativepatharg()  )  {    return p;  }}String absolutepatharg() :{  String p = null, n = null, ap = new String();}{  (    "/"    {      ap += "/";    }    (      n = nodeidentifier()      {        ap += n;      }      (        p = pathpredicate()        {          ap += p;        }      )*    )  )+  {    return ap;  }}String relativepatharg() :{  String rp = new String(), d = null, r = null;}{  d = descendantpatharg()  {    return d;  }|  (    ".." "/"    {      rp += "../";    }    (      LOOKAHEAD(2)      r = relativepatharg()      {        rp += r;      }    )*    {      return rp;    }  )}String descendantpatharg() :{  String n = null, p = null, a = null, dp = new String();  ;}{  n = nodeidentifier()  {    dp += n;  }  (    p = pathpredicate()    {      dp += p;    }  )*  a = absolutepatharg()  {    dp += a;    return dp;  }}String pathpredicate() :{  String p = null;}{  "[" p = pathequalityexpr() "]"  {    return "[" + p + "]";  }}String pathequalityexpr() :{  String n = null, p = null;}{  n = nodeidentifier() "=" p = pathkeyexpr()  {    return n + "=" + p;  }}String pathkeyexpr() :{  String p = null;}{  currentfunctioninvocation() "/" p = relpathkeyexpr()  {    return "this/" + p;  }}String relpathkeyexpr() :{  String n = null, rp = new String();}{  (".." "/"  {    rp += "../";  }  )+  (    LOOKAHEAD(2)    n = nodeidentifier() "/"    {      rp += n + "/";    }  )*  n = nodeidentifier()  {    rp += n;    return rp;  }}void currentfunctioninvocation() :{}{  < currentkeyword > "(" ")"}// Basic Rules
String prefixstr() :{  String s;}{  // < a string which matches the rule
  //   prefix >
  (    //s = prefix()
    //|
    s = string()  )  {    return s;  }}String prefix() :{  Token t;  String s = null;}{  t = < IDENTIFIER >  {    return t.image;  }| s = anykeyword()  {    return s;  }}String identifierargstr() :{  String i = null;}{  i = identifierarg()  {    return i;  }}String identifierarg() :{  String i = null;}{  i = identifier()  {    return i;  }}String identifierstr() :{  Token t;  String s;}{  // < a string which matches the rule;
  //   identifier >
  (    LOOKAHEAD(2)    s = string()  | s = identifier()  | t = < ONEWORD >    {      s = t.image;    }  | t = < DDOT >    {      s = t.image;    }  | t = "."    {      s = t.image;    }  | t = "+"    {      s = t.image;    }  )  {    return s;  }}String identifier() :{  String s = null;  Token id = null;}{  id = < IDENTIFIER >  {    return id.image;  }| s = anykeyword()  {    return s;  }}String anykeyword() :{  Token t;}{  (    t = < anyxmlkeyword >  | t = < argumentkeyword >  | t = < augmentkeyword >  | t = < basekeyword >  | t = < belongstokeyword >  | t = < bitkeyword >  | t = < casekeyword >  | t = < choicekeyword >  | t = < configkeyword >  | t = < contactkeyword >  | t = < containerkeyword >  | t = < defaultkeyword >  | t = < descriptionkeyword >  | t = < enumkeyword >  | t = < errorapptagkeyword >  | t = < errormessagekeyword >  | t = < extensionkeyword >  | t = < deviationkeyword >  | t = < deviatekeyword >  | t = < featurekeyword >  | t = < fractiondigitskeyword >  | t = < groupingkeyword >  | t = < identitykeyword >  | t = < iffeaturekeyword >  | t = < importkeyword >  | t = < includekeyword >  | t = < inputkeyword >  | t = < keykeyword >  | t = < leafkeyword >  | t = < leaflistkeyword >  | t = < lengthkeyword >  | t = < listkeyword >  | t = < mandatorykeyword >  | t = < maxelementskeyword >  | t = < minelementskeyword >  | t = < modulekeyword >  | t = < mustkeyword >  | t = < namespacekeyword >  | t = < notificationkeyword >  | t = < orderedbykeyword >  | t = < organizationkeyword >  | t = < outputkeyword >  | t = < pathkeyword >  | t = < patternkeyword >  | t = < positionkeyword >  | t = < prefixkeyword >  | t = < presencekeyword >  | t = < rangekeyword >  | t = < referencekeyword >  | t = < refinekeyword >  | t = < requireinstancekeyword >  | t = < revisionkeyword >  | t = < rpckeyword >  | t = < statuskeyword >  | t = < submodulekeyword >  | t = < typekeyword >  | t = < typedefkeyword >  | t = < uniquekeyword >  | t = < unitskeyword >  | t = < useskeyword >  | t = < valuekeyword >  | t = < whenkeyword >  | t = < yangversionkeyword >  | t = < yinelementkeyword >  | t = < addkeyword >  | t = < currentkeyword >  | t = < deprecatedkeyword >  | t = < falsekeyword >  | t = < deletekeyword >  | t = < maxkeyword >  | t = < minkeyword >  | t = < nankeyword >  | t = < neginfkeyword >  | t = < notsupportedkeyword >  | t = < obsoletekeyword >  | t = < posinfkeyword >  | t = < replacekeyword >  | t = < systemkeyword >  | t = < truekeyword >  | t = < unboundedkeyword >  | t = < userkeyword >  )  {    return t.image;  }}String identifierrefstr() :{  String i = null;}{  // < a string which matches the rule
  //   identifier-ref
  (    LOOKAHEAD(2)    i = identifierref()  | i = string()  )  {    return i;  }}String identifierref() :{  Token t, s;  String p = null;  String i = null;}{  // [
  // LOOKAHEAD(2)p = prefix() ":"
  //] 
  (    s = < ID_SEMI_COL_ID >    {      i = s.image;      return i;    }  | t = < IDENTIFIER >    {      i = t.image;      return i;    }  )}String string() :{  Token t, u;  String k = "", s = null, a = null;}{  (    t = < STRING >    {      s = t.image;    }    ("+" u = < STRING >    {      s = s + " + " + u.image;    }    )*    {      return s;    }  )| s = anykeyword()  {    return s;  }| t = < IDENTIFIER >  {    return t.image;  }| t = < DECVALUE >  {    return t.image;  }| t = < NEGDECVALUE >  {    return t.image;  }| t = < FLOAT >  {    return t.image;  }}String integervalue() :{  String n = null;  Token t;}{  //("-" n = nonnegativedecimalvalue())  
  LOOKAHEAD(2)  t = < NEGDECVALUE >  {    return t.image;  }| LOOKAHEAD(2)  n = nonnegativeintegervalue()  {    return n;  }}String nonnegativeintegervalue() :{  String p = null;}{ // "0" or positive
  p = positiveintegervalue()  {    return p;  }}String positiveintegervalue() :{  Token t;  String v = null;}{  LOOKAHEAD(2)  t = < DECVALUE >  {    return t.image;  }| LOOKAHEAD(2)  v = string()  {    return v;  }}String zerointegervalue() :{  Token t;  String v = null;}{  LOOKAHEAD(2)  t = < DECVALUE >  {    return t.image;  }| LOOKAHEAD(2)  v = string()  {    return v;  }}String floatvalue() :{  Token t;}{  t = < neginfkeyword >  {    return t.image;  }| t = < posinfkeyword >  {    return t.image;  }| t = < nankeyword >  {    return t.image;  }| t = < FLOAT >  {    return t.image;  }}/*Vector < YANG_Unknown > stmtsep(jjtThis) :{  Vector < YANG_Unknown > unknowns = new Vector < YANG_Unknown > ();  YANG_Unknown un = null;}{  (    LOOKAHEAD(2)    un = unknownstatement()    {      unknowns.add(un);    }  )*  {    return unknowns;  }}*/void stmtsep(YangNode zis) :{  YANG_Unknown un = null;}{  (    LOOKAHEAD(2)    un = unknownstatement()    {      zis.addUnknown(un);    }  )*}
