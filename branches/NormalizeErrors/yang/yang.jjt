options {
  MULTI=true;
  NODE_DEFAULT_VOID=true;
  NODE_PREFIX="YANG_";
  NODE_PACKAGE="jyang.parser";
  
}

PARSER_BEGIN(yang)
package jyang.parser;
import java.util.Enumeration;
import java.util.Vector;
import java.io.*;
public class yang {


  
}
PARSER_END(yang)

SKIP : 
{
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}





TOKEN : 
{
<DECVALUE :  (["0"-"9"])+ | (["+","-"])? ("0x")  (["a"-"f", "A"-"F","0"-"9"])+ >
|
<NEGDECVALUE : "-" <DECVALUE>>
|
<#NONZERO : ["1"-"9"]>
|
<DQUOTE : "\"">
|
<SQUOTE : "'">
|
<DDOT : "..">
}
TOKEN : /* DATE */
{
<DATE : <FDIGIT>"-"<TDIGIT>"-"<TDIGIT>>
|
<FDIGIT: ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]>
|
<TDIGIT: ["0"-"9"]["0"-"9"]>
}

TOKEN :
{
<STRING: "\"" ((~["\""])|"\\""\"")* "\""  | "\'" (~["\'"])* "\'">
}


TOKEN :
{
<FLOAT :
        (["+","-"])? (["0"-"9"])+ ("." (["0"-"9"])+)? (<EXPONENT>)?
  >
|
  < #EXPONENT: ["E", "e"] (["+","-"])? (["0"-"9"])+ >
}


TOKEN : /* KEYWORDS */ 
{
<anyxmlkeyword         : "anyxml">
|
<argumentkeyword       : "argument">
|
<augmentkeyword        : "augment">
|
<basekeyword           : "base">
|
<belongstokeyword     : "belongs-to">
|
<bitkeyword            : "bit">
|
<casekeyword           : "case">
|
<choicekeyword         : "choice">
|
<configkeyword         : "config">
|
<contactkeyword        : "contact">
|
<containerkeyword      : "container">
|
<defaultkeyword        : "default">
|
<descriptionkeyword    : "description">
|
<enumkeyword           : "enum">
|
<errorapptagkeyword  : "error-app-tag">
|
<errormessagekeyword  : "error-message">
|
<extensionkeyword      : "extension">
|
<deviationkeyword        : "deviation">
|
<deviatekeyword        : "deviate">
|
<featurekeyword        : "feature">
|
<fractiondigitskeyword : "fraction-digits">
|
<groupingkeyword       : "grouping">
|
<identitykeyword        : "identity">
|
<iffeaturekeyword        : "if-feature">
|
<importkeyword         : "import">
|
<includekeyword        : "include">
|
<inputkeyword          : "input">
|
<keykeyword            : "key">
|
<leafkeyword           : "leaf">
|
<leaflistkeyword      : "leaf-list">
|
<lengthkeyword         : "length">
|
<listkeyword           : "list">
|
<mandatorykeyword      : "mandatory">
|
<maxelementskeyword   : "max-elements">
|
<minelementskeyword   : "min-elements">
|
<modulekeyword         : "module">
|
<mustkeyword           : "must">
|
<namespacekeyword      : "namespace">
|
<notificationkeyword   : "notification">
|
<orderedbykeyword     : "ordered-by">
|
<organizationkeyword   : "organization">
|
<outputkeyword         : "output">
|
<pathkeyword           : "path">
|
<patternkeyword        : "pattern">
|
<positionkeyword       : "position">
|
<prefixkeyword         : "prefix">
|
<presencekeyword       : "presence">
|
<rangekeyword          : "range">
|
<referencekeyword      : "reference">
|
<refinekeyword        : "refine">
|
<requireinstancekeyword : "require-instance">
|
<revisionkeyword       : "revision">
|
<revisiondatekeyword : "revision-date">
|
<rpckeyword            : "rpc">
|
<statuskeyword         : "status">
|
<submodulekeyword      : "submodule">
|
<typekeyword           : "type">
|
<typedefkeyword        : "typedef">
|
<uniquekeyword         : "unique">
|
<unitskeyword          : "units">
|
<useskeyword           : "uses">
|
<valuekeyword          : "value">
|
<whenkeyword           : "when">
|
<yangversionkeyword   : "yang-version">
|
<yinelementkeyword    : "yin-element">
|
<addkeyword        : "add">
|
<currentkeyword        : "current">
|
<deprecatedkeyword     : "deprecated">
|
<deletekeyword        : "delete">
|
<falsekeyword          : "false">
|
<minkeyword            : "min">
|
<maxkeyword            : "max">
|
<nankeyword            : "NaN">
|
<neginfkeyword         : "-INF">
|
<notsupportedkeyword   : "not-supported">
|
<obsoletekeyword       : "obsolete">
|
<posinfkeyword         : "INF">
|
<replacekeyword        : "replace">
|
<systemkeyword         : "system">
|
<truekeyword           : "true">
|
<unboundedkeyword      : "unbounded">
|
<userkeyword           : "user">

}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"-"|".")* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
 < #DIGIT: ["0"-"9"]>
}
TOKEN: /* string without quote and without space */
{
	<ONEWORD: <FIRST> (<FIRST>)+>
	|
	<#FIRST: ["/", "\\", "(", ")","~","0"-"9","_","a"-"z","A"-"Z", "[", "]", ".", "-", "=","?", "+"]>
	|
	<ABSNODEID: "/" (<FIRST>)+>
	|
	<ID_SEMI_COL_ID: <FIRST> (<SEC>)+>
	|
	<#SEC:  ["/", "\\", "(", ")","~","0"-"9","_","a"-"z","A"-"Z", "[", "]", ".", "-", "=","?", "+",":"]>
	|
	<COL: ":">
	|
	<PREFIXEDID: <IDENTIFIER> <COL> <IDENTIFIER>>
}




YANG_Specification Start(): 
{
YANG_Specification n = null;
}
{
	(
	n = module() 
	| 
	n = submodule()
	)
		{
		return n;
		}
}

YANG_Specification module() #Module	:
{Token t;
Node n=null;
YANG_Header h = null;
YANG_Linkage l = null;
YANG_Meta m = null;
YANG_Revision r = null;
YANG_Body b = null;
YANG_Unknown un = null;
String mname = null;
}                
{
 	<modulekeyword>  (t = <IDENTIFIER>  
		{
		jjtThis.setName(t.image);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		}
		|
		mname = anykeyword()
		{
			jjtThis.setName(mname);
		}
		)
                "{"   (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		(
		h = moduleheaderstmts()
		
			{
			  jjtThis.addHeader(h);
			}
		)+
                (
		l = linkagestmts()
			{
			jjtThis.addLinkage(l);
			}

		)*
                (
		m = metastmts()
			{
			   jjtThis.addMeta(m);
			}
		)*
		(
                r = revisionstmt()
			{
			jjtThis.addRevision(r);
			}
		)*
		(
                b = bodystmts()
			{
			jjtThis.addBody(b);
			}
		)*
                "}" 
			{
			return jjtThis;
			}
}

YANG_Specification submodule()      #SubModule        : 
{
YANG_Header sh = null;
YANG_Linkage l = null;
YANG_Meta s = null;
YANG_Revision r = null;
YANG_Body b = null;
YANG_Unknown un = null;
Token t;
}
{
	<submodulekeyword>  t = <IDENTIFIER> 
		{
		jjtThis.setSubModule(t.image);
		}
	"{" (LOOKAHEAD(2)un = unknownstatement() {jjtThis.addUnknown(un);})*
 	(
	sh = submoduleheaderstmts()
		{
		jjtThis.addHeader(sh);
		}
	)+
	(
	l = linkagestmts()
		{
		jjtThis.addLinkage(l);
		}
	)*
	(
	s = metastmts()
		{
		jjtThis.addMeta(s);
		}
	)*
	(
	r = revisionstmt()
		{
		jjtThis.addRevision(r);
		}
	)*
	(
	b = bodystmts()
		{
		jjtThis.addBody(b);
		}
	)*
	"}" 
		{
		return jjtThis;
		}
}


YANG_Header moduleheaderstmts() :
{
YANG_Header h = null;
YANG_Unknown un = null;
}
{
	(
		h = yangversionstmt() (LOOKAHEAD(2) un = unknownstatement() {h.addUnknown(un);})*
	|
        h = namespacestmt() (LOOKAHEAD(2) un = unknownstatement() {h.addUnknown(un);})*
	|
        h = prefixstmt() (LOOKAHEAD(2) un = unknownstatement() {h.addUnknown(un);})*
	)
		{
			return h;
		}
}
	


YANG_Header submoduleheaderstmts() : // these stmts can appear in any order
{
YANG_Header h = null;
YANG_Unknown un = null;
}
{
	(
		h = belongstostmt() (LOOKAHEAD(2) un = unknownstatement() {h.addUnknown(un);})*
	|
		h = yangversionstmt() (LOOKAHEAD(2) un = unknownstatement() {h.addUnknown(un);})*
	)
		{
			return h;
		}
}

YANG_Meta metastmts()        : // these stmts can appear in any order
{
YANG_Meta n = null;
YANG_Unknown un = null;
}
{
	(
        n = organizationstmt() (LOOKAHEAD(2) un = unknownstatement() {n.addUnknown(un);})*
	|
        n = contactstmt() (LOOKAHEAD(2) un = unknownstatement() {n.addUnknown(un);})*
	|
        n = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {n.addUnknown(un);})*
	|
        n = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {n.addUnknown(un);})*
	)
		{
			return (YANG_Meta) n;
		}
}

YANG_Linkage linkagestmts()     :

{
YANG_Linkage n = null;
YANG_Unknown un = null;
}
{
 // these stmts can appear in any order
	(
		n = importstmt() (LOOKAHEAD(2) un = unknownstatement() {n.addUnknown(un);})*
	|
		n = includestmt() (LOOKAHEAD(2) un = unknownstatement() {n.addUnknown(un);})*
	)
		{
			return  n;
		}
}


YANG_Body bodystmts ()           : 
{
YANG_Body b = null;
YANG_Unknown un = null;
}
{
	(
	  (
	    	b = extensionstmt() 
	    |
	    	b = featurestmt()
 	    |
 	    	b = identitystmt()
 	    |
            b = typedefstmt() 
	    |
            b = groupingstmt()
	    |
            b = datadefstmt()
	    |
		    b = augmentstmt() 
	    |
            b = rpcstmt() 
	    |
            b = notificationstmt()
        |
        	b = deviationstmt()
        	
	  ) (LOOKAHEAD(2) un = unknownstatement() {b.addUnknown(un);})*
	)
		{
		return b;
		}
}

YANG_DataDef datadefstmt()      : 
{
YANG_DataDef d = null;}
{
	(
	d = containerstmt() 
	|
	d = leafstmt() 
	|
	d = leafliststmt() 
	|
	d = liststmt() 
	|
	d = choicestmt() 
	|
	d = anyxmlstmt() 
	|
	d = usesstmt() 
	)
		{
		return d;
		}
}

YANG_CaseDataDef casedatadefstmt()   : 
{
YANG_CaseDataDef d = null;}
{
	(
	d = containerstmt() 
	|
        d = leafstmt() 
	|
        d = leafliststmt() 
	|
        d = liststmt() 
	|
        d = anyxmlstmt() 
	|
        d = usesstmt() 
	)
		{
			return d;
		}
}

YANG_YangVersion yangversionstmt()    #YangVersion  :
{
Token t;
YANG_Unknown un = null;
}
{
	// the digit must be 1
	<yangversionkeyword>  t=<DECVALUE>  (";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
                                                                                                        
		{
		jjtThis.setVersion(t.image);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}

YANG_Import importstmt()      #Import      : 
{
Token t;
YANG_Prefix n = null;
String i;
YANG_Revision r = null;
YANG_Unknown un = null;
}
{
	t = <importkeyword>  i = identifierstr() 
		{
		jjtThis.setIdentifier(i);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		}
     "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
     	  (
           n = prefixstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
          		{
					jjtThis.setPrefix(n);
				}	
           |
           r = revisiondatestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
          		{
					jjtThis.setRevision(r);
				}
			)*
			
        
		
		"}"
		{
			
			return jjtThis;
		}
}

YANG_Include includestmt()       #Include    : 
{
Token t;
String i;
YANG_Revision r = null;
YANG_Unknown un = null;
}
{
	t = <includekeyword>  i = identifierstr()
		{
		jjtThis.setIdentifier(i);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		}
		(
				";"
			|
				"{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
					[ r = revisiondatestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*]
						{
							jjtThis.setRevision(r);
						}
				"}"
		)
		{
			
			return jjtThis;
		}
					
}

YANG_NameSpace namespacestmt()   #NameSpace      : 
{
String uri;
Token t, tn;
YANG_Unknown un = null;
}
{
	t = <namespacekeyword>  (uri = uristr() | tn = <ID_SEMI_COL_ID> { uri = tn.image;})  
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		
		{
		jjtThis.setNameSpace(uri);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
		
}

String uristr()                : 
{
String s;
}
{
			//< a sring which matches the rule
                        //   URI in RFC 3986 >
	s = string()
		
		{
		return s;
		}
}

YANG_Prefix prefixstmt()   #Prefix         : 
{
String s;
Token t;
YANG_Unknown un = null;
}
{
	t = <prefixkeyword>  s = string() /*prefixstr()*/  
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")

		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setPrefix(s);
		return jjtThis;
		}	
}

YANG_Belong belongstostmt()       #Belong : 
{
Token t;
String b = null;
YANG_Prefix p = null;
YANG_Unknown un = null;
}
{
	t = <belongstokeyword>  b = identifierstr() 
		//(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		"{" 
		p = prefixstmt()
		//(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		"}"
		{
		jjtThis.setBelong(b);
		jjtThis.setPrefix(p);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}

YANG_Organization organizationstmt()     #Organization : 
{
Token t;
String s;
YANG_Unknown un = null;
}
{
	t = <organizationkeyword> s =  string()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setOrganization(s);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
		
}

YANG_Contact contactstmt()         #Contact  : 
{
Token t;
String c;
YANG_Unknown un = null;
}
{
	t = <contactkeyword>  c = string()  
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setContact(c);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}

YANG_Description descriptionstmt()     #Description  : 
{
Token t;
String d;
YANG_Unknown un = null;
}
{
	t = <descriptionkeyword>  d = string() 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setDescription(d);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}

YANG_Reference referencestmt()     #Reference    : 
{
Token t;
String r;
YANG_Unknown un = null;
}
{
	t = <referencekeyword>  r = string() 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setReference(r);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}

YANG_Units unitsstmt()      #Units       : 
{
Token t,ut;
String u = null;
YANG_Unknown un = null;
}
{
	t = <unitskeyword>  
	
	 ( u = string()
	  |
	   ut = <ONEWORD>
	   	{
	   		u = ut.image;
	   	}
	  )  
	
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setUnits(u);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);

		return jjtThis;
		}
}
YANG_Revision revisionstmt()    #Revision      : 

{
Token t;
YANG_Description d = null;
String da = null;
YANG_Unknown un = null;}
{
	t = <revisionkeyword>  da = dateexprstr() 
		{
		jjtThis.setDate(da);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		}
    (
	";" 
	|
		(
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
         [d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*]
        "}"
		{
		if(d != null)
			jjtThis.setDescription(d);
		}
		)
		
	)
		{
		return jjtThis;
		}
}
YANG_Revision revisiondatestmt()    #Revision      : 

{
Token t;
YANG_Description d = null;
String da = null;
YANG_Unknown un = null;}
{
	t = <revisiondatekeyword>  da = dateexprstr() 
		{
		jjtThis.setDate(da);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		}
        (
	";" 
	|
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
         [d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*]
        "}"
		{
		if(d != null)
			jjtThis.setDescription(d);
		}
	)
		{
		return jjtThis;
		}
}

YANG_Extension extensionstmt()  #Extension  :

{
Token t;
String s = null;
YANG_Argument a = null;
YANG_Status st = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	t = <extensionkeyword>  s = identifierstr() 
		{
		jjtThis.setExtension(s);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		}
        (
	  ";" 
	 |
          "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	  (
	   //extensionAnyOrder()
	    a = argumentstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*   
		{
		jjtThis.setArgument(a);
		}
	    |
            st = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setStatus(st);
		}    
	    |
            d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}
	    |
            r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	  )*
	  "}"

	)
		{
		 return  jjtThis;
		}
}

YANG_Argument argumentstmt()      #Argument    : 
{
YANG_Yin y = null;
String i = null;
YANG_Unknown un = null;
Token t, a;
}
{
	t = <argumentkeyword>   i = identifierstr()
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
			jjtThis.setArgument(i);
		}
        (
	 ";" 
	|
 	 "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
             [
		y = yinelementstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
			jjtThis.setYin(y);
			}
	     ]
         "}"
	)
		{
		return jjtThis;
		}
}

YANG_Yin yinelementstmt()     #Yin  : 
{
Token t;
String y = null;
YANG_Unknown un = null;
}
{
	t = <yinelementkeyword>  y = yinelementargstr()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setYin(y);
		return jjtThis;
		}
}

String yinelementargstr()    : 

{
String y = null;
}
{
			//< a string which matches the rule
                        //   yinelementarg >
	(
	LOOKAHEAD(2) y = yinelementarg() 
	| 
	y = string()
	)
		{
		return y;
		}
}

String yinelementarg()        : 
{Token t;}
{
	(
	t = <truekeyword> 
	| 
	t = <falsekeyword>
	)
		{
		return t.image;
		}
}

YANG_Identity identitystmt()	#Identity	:
{
Token t;
String i = null;
YANG_Base b = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	t = <identitykeyword> i = identifierstr()	
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
			jjtThis.setIdentity(i);
		}
		( 
			";"
		|
		
			"{"
			(
				b = basestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
					{
						jjtThis.setBase(b);
					}
				|
				s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
					{
						jjtThis.setStatus(s);
					}
				|
				d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
					{
						jjtThis.setDescription(d);
					}
				|
				r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
					{
						jjtThis.setReference(r);
					}
			)*
			"}"
			)
			{
				return jjtThis;
			}
}

YANG_Base basestmt()	#Base :
{
	Token t;
	String i = null;
	YANG_Unknown un = null;
}
{
	t = <basekeyword> i = identifierrefstr() (";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setBase(i);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}

YANG_Feature featurestmt()	#Feature	:
{
	Token t;
	String f = null;
	YANG_IfFeature i = null;
	YANG_Status s = null;
	YANG_Description d = null;
	YANG_Reference r = null;
	YANG_Unknown un = null;
}
{
	t = <featurekeyword> f = identifierstr()
		{
			jjtThis.setFeature(f);
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
		}
	(
		";"
	|
		"{"
		(
			i = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
				{
					jjtThis.addIfFeature(i);
				}
			|
			s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
				{
					jjtThis.setStatus(s);
				}
			|
			d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
				{
					jjtThis.setDescription(d);
				}
			|
			r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
				{
					jjtThis.setReference(r);
				}
		)*
		"}"
	)
	{
		return jjtThis;
	}
}	

YANG_IfFeature iffeaturestmt() #IfFeature	:
{
	Token t;
	String i = null;
	YANG_Unknown un = null;
}
{
	t = <iffeaturekeyword> i = identifierrefstr() (";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
			jjtThis.setIfFeature(i);
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
			return jjtThis;
		}
}
			

YANG_TypeDef typedefstmt()     #TypeDef      : 
{
Token t;
String i = null;
YANG_Type ty = null;
YANG_Units u = null;
YANG_Default df = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	t = <typedefkeyword>  i = identifierstr() 
		{
			jjtThis.setTypedef(i);
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
		}
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
    	(
		 	ty = typestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
				 jjtThis.setType(ty);
			}
		 |
        	 u = unitsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
				jjtThis.setUnits(u);
			}  
		 |
        	 df = defaultstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*  
			{
				jjtThis.setDefault(df);
			}
		 |
			s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
				jjtThis.setStatus(s);
			}  
		 |
			d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
				jjtThis.setDescription(d);
			} 
		 |
			r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
				jjtThis.setReference(r);
			} 

		)*
        "}"
		{
		return jjtThis;
		}
}


YANG_Type typestmt()      #Type        : 
{
Token t;
String it = null;
YANG_Base i = null;
String ii = null;
YANG_Enum e = null;
YANG_Decimal64Spec d = null;
YANG_LeafRefSpecification k = null;
YANG_BitSpecification b = null;
YANG_UnionSpecification u = null;
YANG_NumericalRestriction n = null;
YANG_StringRestriction s = null;
YANG_Unknown un = null;
}
{
		
	t = <typekeyword>  it = identifierrefstr()
		{
		jjtThis.setType(it);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		} 
   ( 
		";" 
	|
		(
          "{"  (LOOKAHEAD(2) un = unknownstatement(){jjtThis.addUnknown(un);})*
         ( 
	 		n = numericalrestrictions() 
			{
				jjtThis.setNumRest(n);
			}
	  	 |
	  		 LOOKAHEAD(2) d = decimal64specification()
	     	{
	     		jjtThis.setDec64Spec(d);
	   		}
	  	 |
           ( 
             (
               LOOKAHEAD(2) e = enumstmt()
				{
					jjtThis.addEnum(e);
				}
	     	  )+
	       ) 
	   	|
	   		LOOKAHEAD(2) k = leafrefspecification() 
				{
					jjtThis.setLeafRef(k);
				}
	   |
          LOOKAHEAD(2) u = unionspecification()
			{
				jjtThis.setUnionSpec(u);
			}
		|
 			ii = instanceidentifierspecification()
	    	{
	    		jjtThis.setInstanceIdentifierSpec(ii);
	   		}
	   |
	  		 i = identityrefspecification()
	    	{
	    		jjtThis.setIdentityRefSpec(i);
	    	}
	   |
	   		b = bitsspecification() 
			{
				jjtThis.setBitSpec(b);
			}
		|
			s = stringrestrictions()
			{
				jjtThis.setStringRest(s);
			}
	   	)
          )
          
          (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
          
          "}"
         ) 
	
		{
			//jjtThis.checkTypeSyntax();
			return jjtThis;
		}
		
}

YANG_NumericalRestriction numericalrestrictions() : 
{
YANG_Range r = null;
YANG_Unknown un = null;}
{
	r = rangestmt() (LOOKAHEAD(2) un = unknownstatement() {r.addUnknown(un);})*
		{
		return r;
		}
}

YANG_Range rangestmt()       #Range      : 
{
String r = null;
YANG_ErrorMessage errmess = null;
YANG_ErrorAppt eat = null;
YANG_Description d = null;
YANG_Reference re = null;
YANG_Unknown un = null;
Token rt;
}
{
	rt = <rangekeyword>  r = rangeexprstr() 
		{
		jjtThis.setLine(rt.beginLine);
		jjtThis.setCol(rt.beginColumn);
		jjtThis.setRange(r);
		}
        (
	";" 
	|
        "{" 
	(LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(rangeAnyOrder())*
	(
         errmess = errormessagestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setErrMess(errmess);
		}
	|
         eat = errorapptagstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setErrAppTag(eat);
		}
	|
         d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setDescription(d);
		}
	|
         re = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(re);
		}
	)*
	"}"
	)
		{
		return jjtThis;
		}
}

YANG_Decimal64Spec decimal64specification()      #Decimal64Spec:
{
	Token f,r;
	String s =  null;
	YANG_Range rg = null;
}
{
	f = <fractiondigitskeyword> s = fractiondigitstmt()
	{
		jjtThis.setFractionDigit(s);
		jjtThis.setLine(f.beginLine);
		jjtThis.setCol(f.beginColumn);
	}
	
	{
		return jjtThis;
	}
}

String fractiondigitstmt()        :
{
Token t;
}
{
	t = <DECVALUE> ";"
	{
		return t.image;
	}
}
YANG_StringRestriction stringrestrictions()     #StringRestriction :
 // these stmts can appear in any order
{
YANG_Length l = null;
YANG_Pattern p = null;
YANG_Unknown un = null;
}
{
(	
	LOOKAHEAD(3)
	(
	l = lengthstmt()(LOOKAHEAD(2) un = unknownstatement(){jjtThis.addUnknown(un);})*
		{
		jjtThis.setLine(l.getLine());
		jjtThis.setCol(l.getCol());
		jjtThis.setLength(l);
		}
	//[LOOKAHEAD(2)
       	 (LOOKAHEAD(3)
	  p = patternstmt() (LOOKAHEAD(2) un =  unknownstatement(){jjtThis.addUnknown(un);})*
		{
		jjtThis.setLine(p.getLine());
		jjtThis.setCol(p.getCol());
		jjtThis.addPattern(p);
		}
	 )*

	//]
	)
	|
	
	(
	(LOOKAHEAD(3)
        p = patternstmt() (LOOKAHEAD(2) un =  unknownstatement(){jjtThis.addUnknown(un);})*
		{
		jjtThis.setLine(p.getLine());
		jjtThis.setCol(p.getCol());
		jjtThis.addPattern(p);
		}
	)*
	[LOOKAHEAD(3)
        l = lengthstmt()(LOOKAHEAD(2) un = unknownstatement(){jjtThis.addUnknown(un);})*
		{
		jjtThis.setLine(l.getLine());
		jjtThis.setCol(l.getCol());
		jjtThis.setLength(l);
		}
	]
	)
	
	)
		{
		return jjtThis;
		}

}

YANG_Length lengthstmt()     #Length       : 
{
String l = null;
YANG_ErrorMessage em = null;
YANG_ErrorAppt eat = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token lk;
}
{
	lk = <lengthkeyword>  l = lengthexprstr() 
		{
		jjtThis.setLine(lk.beginLine);
		jjtThis.setCol(lk.beginColumn);
		jjtThis.setLength(l);
		}
        (
	";" 
	|
        "{" (LOOKAHEAD(2) un = unknownstatement(){jjtThis.addUnknown(un);})*
	//(lengthAnyOrder())*
	(
         em = errormessagestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setErrMess(em);
		}
	|
         eat = errorapptagstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*  
		{
		jjtThis.setErrAppTag(eat);
		}
	|
         d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*  
		{
		jjtThis.setDescription(d);
		}
	|
         r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	)*
	"}"
	)
		{
		return jjtThis;
		}
}

YANG_Pattern patternstmt()     #Pattern      : 
{
String p = null;
YANG_ErrorMessage em = null;
YANG_ErrorAppt eat = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t, pt;
}
{
	t = <patternkeyword> 
	(
		p = string()
	|
		pt = <ONEWORD>
		{
			p = pt.image;
		}
	) 
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setPattern(p);
		}
        (
	";" 
	|
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(patternAnyOrder())*
	(
        em = errormessagestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setErrMess(em);
		}
	|
        eat = errorapptagstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setErrAppTag(eat);
		}
	|
        d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setDescription(d);
		}
	|
        r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	)*
	"}"
	)
		{
		return jjtThis;
		}
}


YANG_Default defaultstmt()      #Default     : 
{
Token t, dt;
String d = null;
YANG_Unknown un = null;
}
{
	t = <defaultkeyword>  
	(
		d = string()
	|
		dt = <ONEWORD>
		{
			d = dt.image;
		}
	) 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setDefault(d);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}
/*
YANG_Enum enumspecification()     : 
{
YANG_Enum e = null;
YANG_Unknown un = null;
}
{			
	(
	e = enumstmt() (LOOKAHEAD(2) un = unknownstatement(){e.addUnknown(un);})*
	)
		{
		return e;
		}
}
*/
YANG_Enum enumstmt()       #Enum       : 
{
String e = null;
YANG_Value v = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t,te;
}
{
	t = <enumkeyword>  	 e = identifierstr() 
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
			jjtThis.setEnum(e);
		}
        (
	";" 
	|
         "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	 (
	  v = valuestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setValue(v);
		}
	  |
          s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setStatus(s);
		}
	  |
          d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setDescription(d);
		}
	  |
          r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	  )*
	  "}"
	)
		{
		return jjtThis;
		}
}

YANG_LeafRefSpecification leafrefspecification()   #LeafRefSpecification: 
{
YANG_Path p = null;
YANG_Unknown un = null;
String r = null;
}
{
	(
	p =  pathstmt() (LOOKAHEAD(2) un = unknownstatement() {p.addUnknown(un);})*
		{
			jjtThis.setPath(p);
		}
	[	LOOKAHEAD(2)
	r =  requireinstancestmt() (LOOKAHEAD(2) un = unknownstatement() {p.addUnknown(un);})*
	]
	)
	{
		if (r != null)
			jjtThis.setRequireInstance(r);
		return jjtThis;
	}
			
}



YANG_Path pathstmt()   #Path           : 
{
String p = null;
YANG_Unknown un = null;
Token t;
}
{
	t = <pathkeyword>  p = pathargstr()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
		jjtThis.setPath(p);
		return jjtThis;
		}
}

String requireinstancestmt()		:
{
Token t;
YANG_Unknown un = null;
}
{	
		<requireinstancekeyword> 
	(
	t = <truekeyword>
	|
	t = <falsekeyword>
	) ";"
	{ 
		return t.image;
	}
}

String instanceidentifierspecification()	:
{
String s = null;
}
{
	
		//LOOKAHEAD(2) 
		s = requireinstancestmt()
		{
			return s;
		}
	
}	

YANG_Base identityrefspecification() :
{
	YANG_Base b = null;
}
{
	b = basestmt()
	{
		return b;
	}
}

YANG_UnionSpecification unionspecification()   #UnionSpecification :
{
YANG_Type t = null;
YANG_Unknown un = null;
}
{
	(
		LOOKAHEAD(2)
	 	t = typestmt() 
		(LOOKAHEAD(2) un = unknownstatement(){jjtThis.addUnknown(un);})*
		{
			jjtThis.addType(t);
		}
	)+
		{
			return jjtThis;
		}
}

YANG_BitSpecification bitsspecification()    #BitSpecification: 
{
YANG_Bit b = null;
YANG_Unknown un = null;}
{
	(LOOKAHEAD(2)
	b = bitstmt() 
		{
		jjtThis.addBit(b);
		}
	(LOOKAHEAD(2) un = unknownstatement(){jjtThis.addUnknown(un);})*
	)+
		{
		return jjtThis;
		}
}

YANG_Bit bitstmt()     #Bit          : 
{
String i = null;
YANG_Position p = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	<bitkeyword>  i = identifierstr() 
		{
		jjtThis.setBit(i);
		}
	(
	";"
	|
	
	"{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//bitAnyOrder())*
	(
         p = positionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setPosition(p);
		} 
	|
         s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*  
		{
		jjtThis.setStatus(s);
		} 
	|
         d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}
	|
         r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	)*
	"}" 
	)
		{
		return jjtThis;
		}
//"}"
}

YANG_Position positionstmt()     #Position     : 
{
String p = null;
YANG_Unknown un = null;
}
{
	<positionkeyword>  p = positionvaluestr() 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setPosition(p);
		return jjtThis;
		}
}

String positionvaluestr()     :
{
String p = null;
}
{
	// < a string which matches the rule
        //  positionvalue >
	(
	LOOKAHEAD(2) p = positionvalue() 
	| 
	p = string()
	)
		{
		return p;
		}
}

String positionvalue()         : 
{
String p = null;
}
{
	p = nonnegativeintegervalue()
		{
		return p;
		}
}

YANG_Status statusstmt()        #Status    : 
{
Token t;
String s = null;
YANG_Unknown un = null;
}
{
	t = <statuskeyword>  s = statusargstr()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setStatus(s);
		return jjtThis;
		}
}

String statusargstr()         : 
{
String s = null;
}
{
	//< a string which matches the rule
        //  statusarg >
	(
	LOOKAHEAD(2) s = statusarg() 
	| 
	s = string()
	)
		{
		return s;
		}
}

String statusarg()             : 
{Token t;}
{
	(
	t = <currentkeyword> 
	|
        t = <obsoletekeyword> 
	|
        t = <deprecatedkeyword>
	)
		{
		return t.image;
		}
}


YANG_Config configstmt()      #Config      : 
{
Token t;
String c = null;
YANG_Unknown un = null;
}
{
	t = <configkeyword> c = configargstr() 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setConfig(c);
		return jjtThis;
		}
}

String configargstr()         : 
{
String c = null;
}
{
	//	< a string which matches the rule
	//           configarg >
	(
	LOOKAHEAD(2) c = configarg() 
	| 
	c = string()
	)
		{
		return c;
		}
}

String configarg()             : 
{
Token t;
}
{
	(
	t = <truekeyword> 
	| 
	t = <falsekeyword>
	)
	{
	return t.image;
	}
}

YANG_Mandatory mandatorystmt()     #Mandatory    : 
{
Token t;
String m = null;
YANG_Unknown un = null;
}
{
	t = <mandatorykeyword> 
	m = mandatoryargstr()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setMandatory(m);
		return jjtThis;
		}
}

String mandatoryargstr()      : 
{String m = null;}
{
	//< a string which matches the rule
	//   mandatoryarg >
	m = mandatoryarg()
		{
		return m;
		}
}

String mandatoryarg()          : 
{Token t;}
{
	(
	t = <truekeyword> 
	|  
	t = <falsekeyword>
	)
		{
		return t.image;
		}
}

YANG_Presence presencestmt()      #Presence    : 
{
Token t;
String p = null;
YANG_Unknown un = null;
}
{
	t = <presencekeyword>  p = string()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setPresence(p);
		return jjtThis;
		}
}

YANG_OrderedBy orderedbystmt()     #OrderedBy   : 
{
Token t;
String o = null;
YANG_Unknown un = null;
}
{
	t = <orderedbykeyword> o = orderedbyargstr()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setOrderedBy(o);
		return jjtThis;
		}
}

String orderedbyargstr()     : 
{
String o = null;
}
{
		//	< a string which matches the rule
                //           orderedbyarg >
	o = orderedbyarg()
		{
		return o;
		}
}

String orderedbyarg()         : 
{
Token t;
}
{
	(
	t = <userkeyword> 
	| 
	t = <systemkeyword>
	)
		{
		return t.image;
		}
}

YANG_Must muststmt()        #Must      : 
{
Token must;
String m = null;
YANG_ErrorMessage em = null;
YANG_ErrorAppt ea = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	must = <mustkeyword>  m = string() 
			{
			jjtThis.setLine(must.beginLine);
			jjtThis.setCol(must.beginColumn);
			jjtThis.setMust(m);
			}
	(
	 ";" 
	|
	 "{" 
		(LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		//(mustAnyOrder())*
		(
		 em = errormessagestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
			jjtThis.setErrMess(em);
			}
		 |
		 ea = errorapptagstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setErrAppTag(ea);
			}
		 |
 		 d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setDescription(d);
			}
		 |
		 r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
			jjtThis.setReference(r);
			}
		)*
	 "}"
	)
		{
		return jjtThis;
		}
}

YANG_ErrorMessage errormessagestmt()   #ErrorMessage : 
{
Token t;
String e = null;
YANG_Unknown un = null;
}
{
	t = <errormessagekeyword>  e = string()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setErrorMessage(e);
		return jjtThis;
		}
}

YANG_ErrorAppt errorapptagstmt()    #ErrorAppt : 
{
Token t;
String e = null;
YANG_Unknown un = null;
}
{
	t = <errorapptagkeyword>  e = string() 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		jjtThis.setErrorAppt(e);
		return jjtThis;
		}
}

YANG_MinElement minelementsstmt()    #MinElement  : 
{
Token t;
String m = null;
YANG_Unknown un = null;
}
{
	t = <minelementskeyword> m = minvaluestr() 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
//;
		{
		jjtThis.setMinElement(m);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}

String minvaluestr()          : 
{
String m = null;
}
{
		//	< a string which matches the rule
                  //         minvalue >
	m = minvalue()
		{
		return m;
		}
}

String minvalue()              : 
{
String m = null;
}
{
	m = nonnegativeintegervalue()
		{
		return m;
		}
}

YANG_MaxElement maxelementsstmt()   #MaxElement   : 
{
Token t;
String m= null;
YANG_Unknown un = null;
}
{
	t = <maxelementskeyword> m = maxvaluestr() 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")

//;
		{
		jjtThis.setMaxElement(m);
		jjtThis.setLine(t.beginLine);
		jjtThis.setCol(t.beginColumn);
		return jjtThis;
		}
}

String maxvaluestr()          : 
{
String m = null;
}
{
		//	< a string which matches the rule
                //           maxvalue >
	m = maxvalue()
		{
		return m;
		}
}

String maxvalue()              : 
{
Token t;
String p = null;
}
{
	 LOOKAHEAD(2) t =  <unboundedkeyword> 
		{
		return t.image;
		}
	| 
	 LOOKAHEAD(2) p = positiveintegervalue()
		{
		return p;
		}
}

YANG_Value valuestmt()      #Value       : 
{
String d = null;
YANG_Unknown un = null;
}
{
	<valuekeyword>  d = integervalue()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setValue(d);
		return jjtThis;
		}
}

YANG_Body groupingstmt()     #Grouping     : 
{
Token to;
String i = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef dd = null;
YANG_Unknown un = null;
}
{
	to = <groupingkeyword>  i = identifierstr() 
			{
			 jjtThis.setLine(to.beginLine);
			 jjtThis.setCol(to.beginColumn);
			 jjtThis.setGrouping(i);
			}
        (
	 ";" 
	 |
         "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	 //(groupAnyOrder())*
	 (
           s =  statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setStatus(s);
			}
	 |
          d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setDescription(d);
			}
	 |
          r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setReference(r);
			}
	 |
          (LOOKAHEAD(2)
		(
		 t = typedefstmt() 
			{
			jjtThis.addTypeDef(t);
			}
		 |
                 g = groupingstmt()
			{
			if(g instanceof YANG_Grouping)
				jjtThis.addGrouping((YANG_Grouping)g );
			}
		) (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	   )+ 
	 |
          dd = datadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
			jjtThis.addDataDef(dd);
			}
	 )*
	 "}"
	)
			{
			return jjtThis;
			}
}

YANG_Container containerstmt()     #Container    : 
{
Token to;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Must m = null;
YANG_Presence p = null;
YANG_Config c = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef da = null;
YANG_Unknown un = null;
}
{
	to = <containerkeyword>  i = identifierstr() 
			{
			jjtThis.setLine(to.beginLine);
			jjtThis.setCol(to.beginColumn);
			jjtThis.setContainer(i);
			}
	(
	 ";" 
	|
	 "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	 //(containerAnyOrder())*
	  (
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
		m = muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.addMust(m);
			}
		|
		p = presencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setPresence(p);
			}
		|
		c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setConfig(c);
			}  
		|
 		s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*   
			{
			jjtThis.setStatus(s);
			}
		|
		d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setDescription(d);
			}
		|
		r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setReference(r);
			}
		|
 		(LOOKAHEAD(2) 
			(
			 t = typedefstmt() 
				{
				jjtThis.addTypeDef(t);
				}
			 |
 			 g = groupingstmt()
				{
				jjtThis.addGrouping((YANG_Grouping)g);
				}
			) (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		 )+
		|
 		da = datadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
			jjtThis.addDataDef(da);
			}
	   )*
	 "}"
	)
			{
			return jjtThis;
			}
}

YANG_Leaf leafstmt()          #Leaf    : 
{
Token leaf;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Type t = null;
YANG_Units u = null;
YANG_Must m = null;
YANG_Default d = null;
YANG_Config c = null;
YANG_Mandatory ma = null;
YANG_Status s = null;
YANG_Description de = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	leaf = <leafkeyword>  i = identifierstr() 
			{
			jjtThis.setLine(leaf.beginLine);
			jjtThis.setCol(leaf.beginColumn);
			jjtThis.setLeaf(i);
			}
	"{" 
		(LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		//(leafAnyOrder())*
		(
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
		t = typestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setType(t);
			}
		|
		u = unitsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 	
			{
			jjtThis.setUnits(u);
			}
		|
		
 		 m = muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.addMust(m);
			}
		
		|
		d = defaultstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setDefault(d);
			}
		|
 		c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setConfig(c);
			}
		|
		ma = mandatorystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setMandatory(ma);
			}
		|
		s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setStatus(s);
			}
		|
		de = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
			jjtThis.setDescription(de);
			}
		|
		r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
			jjtThis.setReference(r);
			}
		)*
	"}"
			{
			return jjtThis;
			}
}

YANG_LeafList leafliststmt()    #LeafList     : 
{
Token leaflist;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Type t = null;
YANG_Units u = null;
YANG_Must mu = null;
YANG_Config c = null;
YANG_MinElement mi = null;
YANG_MaxElement ma = null;
YANG_OrderedBy o = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	leaflist = <leaflistkeyword>  i = identifierstr() 
		{
		jjtThis.setLine(leaflist.beginLine);
		jjtThis.setCol(leaflist.beginColumn);
		jjtThis.setLeafList(i);
		}
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
        // these stmts can appear in any order
	(
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
         t = typestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setType(t);
		}
	|
         u = unitsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setUnits(u);
		}
	|
         mu = muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.addMust(mu);
		}
	|
         c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setConfig(c);
		}
	|
         mi = minelementsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setMinElement(mi);
		}
	|
         ma = maxelementsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setMaxElement(ma);
		}
	|
         o = orderedbystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setOrderedBy(o);
		}
	|
         s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setStatus(s);
		}
	|
         d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}
	|
         r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	)*
	"}"
		{
		return jjtThis;
		}
}

YANG_List liststmt()        #List      : 
{
Token list;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Must m = null;
YANG_Key k = null;
YANG_Unique u = null;
YANG_Config c = null;
YANG_MinElement mi = null;
YANG_MaxElement ma = null;
YANG_OrderedBy o = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef dd = null;
YANG_Unknown un = null;
}
{
	list = <listkeyword>  i = identifierstr() 
		{
		jjtThis.setLine(list.beginLine);
		jjtThis.setCol(list.beginColumn);
		jjtThis.setList(i);
		}
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	
	(
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
         m = muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.addMust(m);
		}
	|
         k = keystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*    
		{
		jjtThis.setKey(k);
		}
	|
         u = uniquestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.addUnique(u);
		}
	|
         c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*  
		{
		jjtThis.setConfig(c);
		}
	|
         mi = minelementsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setMinElement(mi);
		}
	|
         ma = maxelementsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setMaxElement(ma);
		}
	|
         o = orderedbystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setOrderedBy(o);
		}
	|
         s= statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setStatus(s);
		}
	|
         d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}
	|
         r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	|
        t = typedefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.addTypeDef(t);
		}
	|
        g = groupingstmt()(LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.addGrouping((YANG_Grouping)g);
		}
	|
         dd = datadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.addDataDef(dd);
		}
	)*
	"}"
		{
		return jjtThis;
		}
}

YANG_Key keystmt()     #Key          : 
{
Token key;
String k = null;
YANG_Unknown un = null;
}
{
	key = <keykeyword>  k = keyargstr()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(key.beginLine);
		jjtThis.setCol(key.beginColumn);
		jjtThis.setKey(k);
		return jjtThis;
		}
}

String keyargstr()            : 
{
String k = null;
}
{
	//< a string which matches the rule
        //   keyarg >
	LOOKAHEAD(2) k = keyarg() 
		{
		return k;
		}
	| 
	k = string()
		{
		return k;
		}
}

String keyarg()                : 
{
Token t;
String k = new String();
}
{
	(
	t = <IDENTIFIER>
		{
		k += t.image + " ";
		}
	)+
		{
		return k;
		}
}

YANG_Unique uniquestmt()     #Unique       : 
{
Token unique;
String u = null;
YANG_Unknown un = null;
}
{
	unique = <uniquekeyword>  u = uniqueargstr()
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(unique.beginLine);
		jjtThis.setCol(unique.beginColumn);
		jjtThis.setUnique(u);
		return jjtThis;
		}
}

String uniqueargstr()         : 
{
String u = null;
}
{
	//	< a string which matches the rule
        //           uniquearg >
	 LOOKAHEAD(2) u = uniquearg() 
		{
		return u;
		}
	| 
	u = string()
		{
		return u;
		}
}

String uniquearg()             : 
{
String d = null,u = new String();
}
{
	( 
	d = descendantschemanodeid()
		{
		u = d;
		}
	)
		{
		return u;
		}
}

 YANG_Choice choicestmt()    #Choice        : 
{
Token choice;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Default d = null;
YANG_Config cf = null;
YANG_Mandatory m = null;
YANG_Status s = null;
YANG_Description de = null;
YANG_Reference r = null;
YANG_ShortCase sc = null;
YANG_Case c = null;
YANG_Unknown un = null;
}
{
	choice = <choicekeyword>  i = identifierstr() 
		{
		jjtThis.setLine(choice.beginLine);
		jjtThis.setCol(choice.beginColumn);
		jjtThis.setChoice(i);
		}
        (
	 ";" 
	|
	(
	 "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	  (
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|

            d = defaultstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setDefault(d);
		}
	  |
	    cf = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
			jjtThis.setConfig(cf);
		}
	  |
            m = mandatorystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setMandatory(m);
		}
	  |
            s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setStatus(s);
		}
	  |
            de = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(de);
		}
	  |
            r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	  |
            
		sc =  shortcasestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
				{
					jjtThis.addShortCase(sc);
				}
		| 
		c = casestmt()(LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
				{
					jjtThis.addCase(c); 
				}
	  )*
	 "}"
	 )
	)
		{
		return jjtThis;
		}
}

YANG_ShortCase shortcasestmt()      : 
{
YANG_ShortCase d = null;
}
{
	(
	d = containerstmt() 
	|
        d = leafstmt()
	|
        d = leafliststmt() 
	|
        d = liststmt()
	|
        d = anyxmlstmt()
	)
		{
		return d;
		}
}


YANG_Case casestmt()      #Case        : 
{
Token tcase;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_CaseDataDef c = null;
YANG_Unknown un = null;}
{
	tcase = <casekeyword>  i = identifierstr() 
		{
		jjtThis.setLine(tcase.beginLine);
		jjtThis.setCol(tcase.beginColumn);
		jjtThis.setCase(i);
		}
        (
	 ";" 
	|
         "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(caseAnyOrder())*
	 (
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
            s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setStatus(s);
		}
	  |
            d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setDescription(d);
		}
	  |
            r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setReference(r);
		}
	  |
            c = casedatadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.addCaseDef(c);
		}
	 )*
	 "}"
	)
		{
		return jjtThis;
		}
}

YANG_AnyXml anyxmlstmt()      #AnyXml      : 
{
Token any;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Must mu = null;
YANG_Config c = null;
YANG_Mandatory m = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	any = <anyxmlkeyword>  i = identifierstr() 
		{
		jjtThis.setLine(any.beginLine);
		jjtThis.setCol(any.beginColumn);
		jjtThis.setAnyXml(i);
		}
        (
	 ";" 
	|
         "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(anyxmlAnyOrder())*
	 (
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
         mu = muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
			{
				jjtThis.addMust(mu);
			}
	  	|
	  c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setConfig(c);
		}  
	 |
          m = mandatorystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setMandatory(m);
		}
	 |
          s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*    
		{
		jjtThis.setStatus(s);
		}
	 |
          d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setDescription(d);
		}
	 |
          r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setReference(r);
		}
	 )*

	 "}"
	)
		{
		return jjtThis;
		}
}

YANG_Uses usesstmt()          #Uses    : 
{
Token uses;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Refine re = null;
YANG_UsesAugment u = null;
YANG_Unknown un = null;
}
{
	uses = <useskeyword>  i = identifierrefstr() 
		{
		jjtThis.setLine(uses.beginLine);
		jjtThis.setCol(uses.beginColumn);
		jjtThis.setUses(i);
		}
        (
	";" 
	|
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(useAnyOrder())*
	 (
	  		LOOKAHEAD(3) w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  		LOOKAHEAD(3) iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
          LOOKAHEAD(3) s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
		jjtThis.setStatus(s);
		}
	 | 
          LOOKAHEAD(3) d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}
	 |
          LOOKAHEAD(3) r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*   
		{
		jjtThis.setReference(r);
		}
	 |
          re = refinementstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.addRefinement(re);
		}
	|
		u = usesaugmentstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			{
				jjtThis.addUsesAugment(u);
			}
	 )*
	"}"
	)
		{
		return jjtThis;
		}
}

YANG_Refine refinementstmt()       : 
{
YANG_Refine r = null;
Token t;
String i = null;
YANG_Unknown un = null;
Vector<YANG_Unknown> vu = new Vector<YANG_Unknown>();
}
{
	t = <refinekeyword> i = identifierstr()
		
     (
	 ";" 
	 |
	  "{"(LOOKAHEAD(2) un = unknownstatement() {vu.add(un);})*
	  ( 
			LOOKAHEAD(3) r = refinecontainerstmt()
		|
   	    	 LOOKAHEAD(3) r = refineleafstmt() 
		|
    	    LOOKAHEAD(3) r = refineleafliststmt() 
		|
        	LOOKAHEAD(3) r = refineliststmt() 
		|
        	LOOKAHEAD(3) r = refinechoicestmt() 
    	|
    		LOOKAHEAD(3) r = refinecasestmt()
		|
        	LOOKAHEAD(3) r = refineanyxmlstmt()
	   )
	   "}"
	  )
		{
			
			r.setLine(t.beginLine);
			r.setCol(t.beginColumn);
			r.setRefineNodeId(i);
			for (Enumeration<YANG_Unknown> eu = vu.elements(); eu.hasMoreElements();)
				r.addUnknown(eu.nextElement());
			return r;
		}
}

YANG_RefineContainer refinecontainerstmt() #RefineContainer : 
{
YANG_Must m = null;
YANG_Presence p = null;
YANG_Config c = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	//(refinecontainerAnyOrder())*
	 (
           m= muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.addMust(m);
		}	
	 |
           p = presencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setPresence(p);
		}
	 |
           c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*		
		{
		jjtThis.setConfig(c);
		}
	 |
           d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setDescription(d);
		}
	 |
           r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setReference(r);
		}
	 )
		{
		return jjtThis;
		}
}


YANG_RefineLeaf refineleafstmt()    #RefineLeaf   : 
{
YANG_Must m = null;
YANG_Default d = null;
YANG_Config c = null;
YANG_Mandatory ma = null;
YANG_Description de = null;
YANG_Reference r = null;
YANG_Unknown un = null;
}
{
	(
         m = muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
			jjtThis.addMust(m);
		}
	|
         d = defaultstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
			jjtThis.setDefault(d);
		}
	|
         c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
		{
			jjtThis.setConfig(c);
		}
	|
         ma = mandatorystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
			jjtThis.setMandatory(ma);
		}
	|
         de = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
			jjtThis.setDescription(de);
		}
	|
         r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
			jjtThis.setReference(r);
		}
	)
		{
		return jjtThis;
		}
}


YANG_RefineLeafList refineleafliststmt() #RefineLeafList : 
{
String i = null;
YANG_Must m = null;
YANG_Config c = null;
YANG_MinElement mi = null;
YANG_MaxElement ma = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t;
}
{
	//(refineleaflistAnyOrder())*
	  (
           m = muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*      
		{
		jjtThis.addMust(m);
		}	
	 |
           c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setConfig(c);
		}		
	 |
           mi = minelementsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setMinElement(mi);
		}	
	 |
           ma = maxelementsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setMaxElement(ma);
		}
	 |
           d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}	
	 |
           r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	  )*
		{
		return jjtThis;
		}
}

YANG_RefineList refineliststmt()   #RefineList    : 
{
String i = null;
YANG_Must m = null;
YANG_Config c = null;
YANG_MinElement mi = null;
YANG_MaxElement ma = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t;
}
{
	
	//(refinelistAnyOrder())*
	 (
          m = muststmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	     
		{
		jjtThis.addMust(m);
		}	
	 |
          c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setConfig(c);
		}				
	 |
          mi = minelementsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setMinElement(mi);
		}		
	 |
          ma = maxelementsstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setMaxElement(ma);
		}
	 |
          d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}		
	 |
          r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}	
	 )
		{
		return jjtThis;
		}
}

YANG_RefineChoice refinechoicestmt()  #RefineChoice   : 
{
String i = null;
YANG_Default d = null;
YANG_Config c = null;
YANG_Mandatory m = null;
YANG_Description de = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t;
}
{
	
	//(refinechoiceAnyOrder())*
	 
	  (
           d = defaultstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setDefault(d);
		}
	 |
           c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setConfig(c);
		}
	 |
           m = mandatorystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setMandatory(m);
		}	
	 |
           de = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(de);
		}	
	 |
           r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}	
	  )
		{
		return jjtThis;
		}
}

YANG_RefineCase refinecasestmt()   #RefineCase    : 
{
String i = null;
YANG_Description d = null;
YANG_Reference r = null;YANG_Unknown un = null;
Token t;
}
{
	//(refinecaseAnyOrder())*
	 (
          d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}	
	 |
          r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setReference(r);
		}
	 )
		{
		return jjtThis;
		}
}





YANG_RefineAnyXml refineanyxmlstmt()    #RefineAnyXml : 
{
String i = null;
YANG_Config c = null;
YANG_Mandatory m = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t;
}
{
	//(refineanyxmlAnyOrder())*
	 (
          c = configstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setConfig(c);
		}		
	 |
          m = mandatorystmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setMandatory(m);
		}
	 |
          d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setDescription(d);
		}
	 |
          r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}
	 )
		{
		return jjtThis;
		}
}

YANG_UsesAugment usesaugmentstmt()	 #UsesAugment:
{
Token aug, aa;
String ds = null;
String a = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_DataDef da = null;
YANG_Case c = null;
YANG_Unknown un = null;
	
}
{
	aug = <augmentkeyword>  (LOOKAHEAD(2) a = usesaugmentargstr()  | aa = <IDENTIFIER> { a = aa.image;})
		{
		jjtThis.setLine(aug.beginLine);
		jjtThis.setCol(aug.beginColumn);
		jjtThis.setUsesAugment(a);
		}
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(augmentAnyOrder())*
	(
         
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
         s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setStatus(s);
		}	
	|
         d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setDescription(d);
		}
	|
         r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}	
	|
         (
		(da = datadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*) 
			{
			jjtThis.addDataDef(da);
			}	
		|
                (c = casestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*)
			{
			jjtThis.addCase(c);
			}			
	 )
	 )*
	 "}"
	 {
	 	return jjtThis;
	 }
}

String usesaugmentargstr() :
{
String s = null;
}
{
	s = descendantschemanodeid()
	{
		return s;
	}
}

YANG_Augment augmentstmt()         #Augment  : 
{
Token aug, aa;
String a = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_DataDef da = null;
YANG_Case c = null;
YANG_Input i = null;
YANG_Output o = null;
YANG_Unknown un = null;
}
{
	aug = <augmentkeyword> ( a = augmentargstr() | aa = <ONEWORD> { a = aa.image;})
		{
		jjtThis.setLine(aug.beginLine);
		jjtThis.setCol(aug.beginColumn);
		jjtThis.setAugment(a);
		}
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(augmentAnyOrder())*
	(
         
	  	w = whenstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.setWhen(w);
	  		}
	  	|
	  	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	  		{
	  			jjtThis.addIfFeature(iff);
	  		}
	  	|
         s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setStatus(s);
		}	
	|
         d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setDescription(d);
		}
	|
         r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}	
	|
         (
		(da = datadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*) 
			{
			jjtThis.addDataDef(da);
			}	
		|
                (c = casestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*)
			{
			jjtThis.addCase(c);
			}			
	 )
	 )*
	"}"
		{
		return jjtThis;
		}
}

String augmentargstr()	:
{
	String a = null;
}
{
	(LOOKAHEAD(2)
	  a = string()
	 |
	  a = schemanodeid()
	
	)
	{
		return a;
	}
}



YANG_Unknown unknownstatement()     #Unknown : 
{
String kw = null;
String str = null;
Token i,j;
YANG_Unknown unknown = null;
}
{
	 		(
				i = <ID_SEMI_COL_ID>
				{
					jjtThis.setExtension(i.image);
					jjtThis.setLine(i.beginLine);
					jjtThis.setCol(i.beginColumn);
				}  
		
				[ 
				str = string()
					{
						jjtThis.setArgument(str);
					}
				]
         		  (
	   					";" 
	  				|
	 					"{" (unknown = unknownstatement() {jjtThis.addUnknown(unknown);})* 
						"}"
			   	   )
			)
			
				{
					
					return jjtThis;
				}
}

YANG_When whenstmt()     #When         : 
{
Token when;
String w = null;
YANG_Unknown un = null;
}
{
	when = <whenkeyword>  w = string() 
	(";" | "{" (un = unknownstatement() {jjtThis.addUnknown(un);})* "}")
		{
		jjtThis.setLine(when.beginLine);
		jjtThis.setCol(when.beginColumn);
		jjtThis.setWhen(w);
		return jjtThis;
		}
}

YANG_Rpc rpcstmt()         #Rpc      : 
{
Token to;
String i = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_Input in = null;
YANG_Output o = null;
YANG_Unknown un = null;
}
{
	to = <rpckeyword>  i = identifierstr()
		{
		jjtThis.setLine(to.beginLine);
		jjtThis.setCol(to.beginColumn);
		jjtThis.setRpc(i);
		} 
        (
	 ";" 
	|
         "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(rpcAnyOrder())*
	 (
	 	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
	 		{
	 			jjtThis.addIfFeature(iff);
	 		}
	 	|
           s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setStatus(s);
		}
	  |
           d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setDescription(d);
		}
	  |
           r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setReference(r);
		}
	  |
           (
		t = typedefstmt() 
			{
			jjtThis.addTypeDef(t);
			}
		|
                g = groupingstmt()
			{
			jjtThis.addGrouping((YANG_Grouping)g);
			}
	   ) (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	  |
           in = inputstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*		
		{
		jjtThis.setInput(in);
		}
	  |
           o = outputstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
		{
		jjtThis.setOutput(o);
		}
	 )*
	 "}"
	)
		{
		return jjtThis;
		}
}

YANG_Input inputstmt()       #Input      : 
{
Token to;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef d = null;
YANG_Unknown un = null;
}
{
	to = <inputkeyword> 
		{
		jjtThis.setLine(to.beginLine);
		jjtThis.setCol(to.beginColumn);
		}
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	(
          (
	   t = typedefstmt() 
		{
		jjtThis.addTypeDef(t);
		}
	   |
           g = groupingstmt()
		{
		jjtThis.addGrouping((YANG_Grouping)g);
		}
	  ) (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	 |
          (
	  LOOKAHEAD(2) d = datadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.addDataDef(d);
		}
	  )+
	
	)*
	"}"
		{
		return jjtThis;
		}
}

YANG_Output outputstmt()      #Output      : 
{
Token to;
String i = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef d = null;
YANG_Unknown un = null;
}
{
	to = <outputkeyword> 
		{
		jjtThis.setLine(to.beginLine);
		jjtThis.setCol(to.beginColumn);
		}
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	(
         (
	  t = typedefstmt()
		{
		jjtThis.addTypeDef(t);
		} 
	 |
          g = groupingstmt()
		{
		jjtThis.addGrouping((YANG_Grouping)g);
		}
	 ) (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})* 
	|
         (LOOKAHEAD(2) d = datadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*)+
		{
		jjtThis.addDataDef(d);
		}
	)*
	"}"
		{
		return jjtThis;
		}
}

YANG_Notification notificationstmt()   #Notification   : 
{
Token to;
String i = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef da = null;
YANG_Unknown un = null;
}
{
	to = <notificationkeyword>  i = identifierstr() 
		{
		jjtThis.setLine(to.beginLine);
		jjtThis.setCol(to.beginColumn);
		jjtThis.setNotification(i);
		}
	
        (
	";" 
	|
        "{" (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	//(notificationAnyOrder())*
	(
	 	iff = iffeaturestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*	
	 		{
	 			jjtThis.addIfFeature(iff);
	 		}
	 	|
         s = statusstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setStatus(s);
		}	
	|
         d = descriptionstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setDescription(d);
		}	
	|
         r = referencestmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
		{
		jjtThis.setReference(r);
		}	
	|
         (
	   t = typedefstmt() 
		{
		jjtThis.addTypeDef(t);
		}
	  |
          g = groupingstmt()
		{
		jjtThis.addGrouping((YANG_Grouping)g);
		}
	  ) (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
	|
         (LOOKAHEAD(2) da = datadefstmt() (LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*)+
		{
		jjtThis.addDataDef(da);
		}
	)*
	 "}"
	)
		{
		return jjtThis;
		}
}


YANG_Deviation deviationstmt()  #Deviation :
{
	Token t;
	String dev = null;
	YANG_Description d = null;
	YANG_Reference r = null;
	YANG_DeviateNotSupported dns = null;
	YANG_DeviateAdd da = null;
	YANG_DeviateReplace dr = null;
	YANG_DeviateDelete dd = null;
	YANG_Unknown un = null;
}
{
	t = <deviationkeyword> dev = absoluteschemanodeid()
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
			jjtThis.setDeviation(dev);
		}
	"{"
		(
			d = descriptionstmt()
				{
					jjtThis.setDescription(d);
				}
			|
			r = referencestmt()
				{
					jjtThis.setReference(r);
				}
			|
			LOOKAHEAD (2) dns = deviatenotsupportedstmt()
				{
					jjtThis.setDeviateNotSupported(dns);
				}
			|
			LOOKAHEAD (2)da = deviateaddstmt()
				{
					jjtThis.addDeviateAdd(da);
				}
			|
			LOOKAHEAD (2)dr = deviatereplacestmt()
				{
					jjtThis.addDeviateReplace(dr);
				}
			|
			LOOKAHEAD (2)dd = deviatedeletestmt()
				{
					jjtThis.addDeviateDelete(dd);
				}
		)*
	"}"
		{
			return jjtThis;
		}
}

YANG_DeviateNotSupported deviatenotsupportedstmt() #DeviateNotSupported :
{
	Token t,u;
	YANG_Unknown un = null;
}
{
	t = <deviatekeyword> u = <notsupportedkeyword>
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
		}
	(
			";"
		|
			"{"
			(LOOKAHEAD(2) un = unknownstatement() {jjtThis.addUnknown(un);})*
			"}"
	)
		{
			return jjtThis;
		}
}

YANG_DeviateAdd deviateaddstmt() #DeviateAdd :
{
	Token t;
	YANG_Units u = null;
	YANG_Must m = null;
	YANG_Unique uq = null;
	YANG_Default d = null;
	YANG_Config c = null;
	YANG_Mandatory ma = null;
	YANG_MinElement min = null;
	YANG_MaxElement max = null;
	YANG_Unknown un = null;
}
{
	t = <deviatekeyword> <addkeyword> 
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
		}
		(
			";"
		  |
			"{"
				(
					u = unitsstmt()
						{
							jjtThis.setUnits(u);
						}
					|
					m = muststmt()
						{
							jjtThis.addMust(m);
						}
					|
					uq = uniquestmt()
						{
							jjtThis.addUnique(uq);
						}
					|
					d = defaultstmt()
						{
							jjtThis.setDefault(d);
						}
					|
					c = configstmt()
						{
							jjtThis.setConfig(c);
						}
					|
					ma = mandatorystmt()
						{
							jjtThis.setMandatory(ma);
						}
					|
					min = minelementsstmt()
						{
							jjtThis.setMinElement(min);
						}
					|
					max = maxelementsstmt()
						{
							jjtThis.setMaxElement(max);
						}
				)*
			"}"
		)
		{
			return jjtThis;
		}
}
			
	
YANG_DeviateDelete deviatedeletestmt() #DeviateDelete :
{
	Token t;
	YANG_Units u = null;
	YANG_Must m = null;
	YANG_Unique uq = null;
	YANG_Default d = null;
	YANG_Unknown un = null;
}
{
	t = <deviatekeyword> <deletekeyword> 
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
		}
		(
			";"
		  |
			"{"
				(
					u = unitsstmt()
						{
							jjtThis.setUnits(u);
						}
					|
					m = muststmt()
						{
							jjtThis.addMust(m);
						}
					|
					uq = uniquestmt()
						{
							jjtThis.addUnique(uq);
						}
					|
					d = defaultstmt()
						{
							jjtThis.setDefault(d);
						}
				)*
			"}"
		)
		{
			return jjtThis;
		}
}
		
		
YANG_DeviateReplace deviatereplacestmt() #DeviateReplace :
{
	Token t;
	YANG_Units u = null;
	YANG_Type tp = null;
	YANG_Default d = null;
	YANG_Config c = null;
	YANG_Mandatory ma = null;
	YANG_MinElement min = null;
	YANG_MaxElement max = null;
	YANG_Unknown un = null;
}
{
	t = <deviatekeyword> <replacekeyword> 
		{
			jjtThis.setLine(t.beginLine);
			jjtThis.setCol(t.beginColumn);
		}
		(
			";"
		  |
			"{"
				(
					tp = typestmt()
						{
							jjtThis.setType(tp);
						}
					|
					u = unitsstmt()
						{
							jjtThis.setUnits(u);
						}
					|
					d = defaultstmt()
						{
							jjtThis.setDefault(d);
						}
					|
					c = configstmt()
						{
							jjtThis.setConfig(c);
						}
					|
					ma = mandatorystmt()
						{
							jjtThis.setMandatory(ma);
						}
					|
					min = minelementsstmt()
						{
							jjtThis.setMinElement(min);
						}
					|
					max = maxelementsstmt()
						{
							jjtThis.setMaxElement(max);
						}
				)*
			"}"
		)
		{
			return jjtThis;
		}
}
							
					
		

// Ranges

String rangeexprstr()         : 
{
String r = null;
Token t;
}
{
	//	< a string which matches the rule
        //         rangeexpr >
	(
	 r = string() 
	 |
	 t = <ONEWORD>
	 {
	 	r = t.image;
	 }
	)
		{
		return r;
		}
}

// Lengths

String lengthexprstr()        : 
{
String l = null;Token t;
}
{
	//	< a string which matches the rule
        //         lengthexpr >
	( 
	l = string()| t = <ONEWORD> {l = t.image;}
	)
		{
		return l;
		}
}

// Date

String dateexprstr()          : 
{String d = null;}
{
	//< a string which matches the rule
        //   dateexpr >
	d = dateexpr()
		{
		return d;
		}
}

String dateexpr()              : 
{String d = null;
Token a, b,c;}
{
	a = <DATE> 
		{
		return a.image;
		}
	|
	d = string()
		{
		return d;
		}
}

// Schema Node Identifiers

String schemanodeid()          : 
{
String s = null;
}
{
	
	 s = absoluteschemanodeid() 
		{
		return s;
		}
	|
         s = descendantschemanodeid()
		{
		return s;
		}
	
}

String absoluteschemanodeid()    : 
{
String n = null,a = new String();
Token t;
}
{
	
		(
	        "/" n = nodeidentifier()
		      {
				a += "/" + n;
			  }
		)+
		{
		return a;
		}
}



String descendantschemanodeid()    :
{
String d = null,a = null;
}
{
          d = nodeidentifier()
          a = absoluteschemanodeid()
		{
		return d + a;
		}
}

String nodeidentifier()        : 
{
Token t = null;
String p = null,n = new String(), m = null;
}
{
	[LOOKAHEAD(2) p = prefix() ":"]( t = <IDENTIFIER> | m = anykeyword())
		{
			
		if(p != null)
			n += p + ":";
		if(m == null)
		   return n + t.image;
		else
		   return n + m;
		}
}

// Instance Identifiers

void instanceidentifier()         : 
{

}
{
			("/" (nodeidentifier() (predicate())*))+
}
	


void predicate()              : 
{}
{
		"[" 
			(
				LOOKAHEAD(2) predicateexpr() 
				|
				LOOKAHEAD(2) pos()
			)
		"]"
}


String predicateexpr()         :
{
String l = null,s = null;
}
{
			 (
			 	l = nodeidentifier() 
			 		
			 	| 
			 	"."
			 	{
			 		l = ".";
			 	}
			 ) "=" (
			 		(<DQUOTE> s = string() <DQUOTE>) 
			 			{
			 				l += "=\"" + s + "\"";
			 			}
			 		|
                    (<SQUOTE> string() <SQUOTE>)
			 			{
			 				l += "=\'" + s + "\'";
			 			}
                   )
                  {
                  	return l;
                  }
}
String pos() :
{
String p = null;
}
{
	p = nonnegativeintegervalue()
		{
			return p;
		}
}

// keyref path

String pathargstr()           :
{
String p = null;
}
{ 
	//	< a string which matches the rule
        //          patharg >
	(
	LOOKAHEAD(2) p = patharg() 
	| 
	p = string()
	)
		{
		return p;
		}
}

String patharg()               :
{
String p = null;
}
{
	(
		p = absolutepatharg() 
		|
    	p = relativepatharg()
	)
		{
			return p;
		}
}

String absolutepatharg()      :
{
String p = null, n = null, ap = new String();
}
{ 
	(
	"/"
		{
		ap += "/";
		} 
	   (
	     n = nodeidentifier()   
			{
			ap += n;
			}
		(
		p = pathpredicate()
			{
			ap += p;
			}
		)*
	   )
	)+
		{
		return ap;
		}
}

String relativepatharg()      :
{
String rp = new String(), d = null, r = null;}
{ 
	d = descendantpatharg()
		{
		return d;
		} 
	|
        (
	".." "/"
		{
		rp += "../";
		}
          (
	   LOOKAHEAD(2) r = relativepatharg()
		{
		rp += r;
		}
	  )*
		{
		return rp;
		}
	)
}

String descendantpatharg()    :
{
String n  = null, p = null,a = null,dp = new String();;
}
{ 
	n = nodeidentifier() 
		{
		dp += n;
		}
	(
	p = pathpredicate()
		{
		dp += p;
		}
		
	)*
        a = absolutepatharg()
		{
		dp += a;
		return dp;
		}
}

String pathpredicate()         :
{
String p = null;
}
{
	"["  p = pathequalityexpr() "]"
		{
		return "[" + p + "]";
		}
}

String pathequalityexpr()     :
{
String n = null, p = null;
}
{ 
	n = nodeidentifier() "="  p = pathkeyexpr()
		{
		return n + "=" + p;
		}
}

String pathkeyexpr()      :    
{
String p = null;
}
{
	currentfunctioninvocation() "/" p = relpathkeyexpr()
		{
		return "this/" + p;
		}
}

String relpathkeyexpr()   :      
{
String n = null, rp = new String();
}
{
	(
	".." "/"
		{
		rp += "../";
		}
	)+ 
	(
	LOOKAHEAD(2) n = nodeidentifier() "/"
		{
		rp += n + "/";
		}
	)*
       n = nodeidentifier()
		{
		rp += n;
		return rp;
		}
}

void currentfunctioninvocation() :
{
}
{
	<currentkeyword> "(" ")"
}

// Basic Rules


String prefixstr()             :
{String s;}
{
	// < a string which matches the rule
        //   prefix >
	(
	//s = prefix()
	//|
	s = string()
	)

	{return s;}
}

String prefix()                :
{Token t; String s = null;}
{
	 t = <IDENTIFIER> 
		{
		return t.image;
		}
	|
	s = anykeyword()
		{
		return s;
		}
}

String identifierstr()         :
{Token t;
String s;}
{
		// < a string which matches the rule;
                //   identifier >

	(LOOKAHEAD(2)
		s = string()
	|
		
		s = anykeyword()
	|
		t =  <ONEWORD>
			{
				s = t.image;
			}
	|
		t = <DDOT>
			{
				s = t.image;
			}
	|
		t = "."
			{
				s = t.image;
			}
	|
		t = "+"
			{
				s = t.image;
			}
	)
			{
			return s;
			}
}

String anykeyword():
{Token t;}
{
(
t = <anyxmlkeyword>
|
t = <argumentkeyword>
|
t = <augmentkeyword>
|
t = <basekeyword>
|
t = <belongstokeyword>
|
t = <bitkeyword>
|
t = <casekeyword>
|
t = <choicekeyword>
|
t = <configkeyword>
|
t = <contactkeyword>
|
t = <containerkeyword>
|
t = <defaultkeyword>
|
t = <descriptionkeyword>
|
t = <enumkeyword>
|
t = <errorapptagkeyword>
|
t = <errormessagekeyword>
|
t = <extensionkeyword>
|
t = <deviationkeyword>
|
t = <deviatekeyword>
|
t = <featurekeyword>
|
t = <fractiondigitskeyword>
|
t = <groupingkeyword>
|
t = <identitykeyword>
|
t = <iffeaturekeyword>
|
t = <importkeyword>
|
t = <includekeyword>
|
t = <inputkeyword>
|
t = <keykeyword>
|
t = <leafkeyword>
|
t = <leaflistkeyword>
|
t = <lengthkeyword>
|
t = <listkeyword>
|
t = <mandatorykeyword>
|
t = <maxelementskeyword>
|
t = <minelementskeyword>
|
t = <modulekeyword>
|
t = <mustkeyword>
|
t = <namespacekeyword>
|
t = <notificationkeyword>
|
t = <orderedbykeyword>
|
t = <organizationkeyword>
|
t = <outputkeyword>
|
t = <pathkeyword>
|
t = <patternkeyword>
|
t = <positionkeyword>
|
t = <prefixkeyword>
|
t = <presencekeyword>
|
t = <rangekeyword>
|
t = <referencekeyword>
|
t = <refinekeyword>
|
t = <requireinstancekeyword>
|
t = <revisionkeyword>
|
t = <rpckeyword>
|
t = <statuskeyword>
|
t = <submodulekeyword>
|
t = <typekeyword>
|
t = <typedefkeyword>
|
t = <uniquekeyword>
|
t = <unitskeyword>
|
t = <useskeyword>
|
t = <valuekeyword>
|
t = <whenkeyword>
|
t = <yangversionkeyword>
|
t = <yinelementkeyword>
|
t = <addkeyword>
|
t = <currentkeyword>
|
t = <deprecatedkeyword>
|
t = <falsekeyword>
|
t = <deletekeyword>
|
t = <maxkeyword>
|
t = <minkeyword>
|
t = <nankeyword>
|
t = <neginfkeyword>
|
t = <notsupportedkeyword>
|
t = <obsoletekeyword>
|
t = <posinfkeyword>
|
t = <replacekeyword>
|
t = <systemkeyword>
|
t = <truekeyword>
|
t = <unboundedkeyword>
|
t = <userkeyword>
)
{return t.image;}
}

String identifierrefstr()     :
{
String i = null;
}
{
	// < a string which matches the rule
        //   identifier-ref
	(
	LOOKAHEAD(2) i = identifierref() 
	| 
	i = string()
	)
		{
		return i;
		}
}

String identifierref()         :
{
Token t,s;
String p = null;
String i = null;}
{
	// [
	 // LOOKAHEAD(2)p = prefix() ":"
	 //] 
	 (
	 s = <ID_SEMI_COL_ID>
	 {
	 	i = s.image;
	 	return i;
	 }
	 |
	 t = <IDENTIFIER>
		{
		i = t.image;
		return i;
		}
		)
}

String string()                 :
{Token t, u;
String k = "",s = null,a = null;}
{
	(
	t = <STRING> 
		{
			s = t.image;
		}
	( 
	 "+" u = <STRING>
		{
			s = s + " + " + u.image;
		}
	)*
 
		{
			 return s;
		}
	)
	
	|
	s = anykeyword()
		{
			 return s;
		}
	|
	t = <IDENTIFIER>
		{
			return t.image;
		}
	|
	t = <DECVALUE>
		{
			return t.image;
		}
	|
	t = <NEGDECVALUE>
		{
			return t.image;
		}
	|
	t = <FLOAT>
		{
			return t.image;
		}
	

}

String integervalue()          :
{String n = null;
Token t;}
{
	//("-" n = nonnegativedecimalvalue())  
	LOOKAHEAD(2) t = <NEGDECVALUE>
		{
		return  t.image;
		}
	|
      LOOKAHEAD(2) n = nonnegativeintegervalue()
		{
		return n;
		}
}

String nonnegativeintegervalue() : 
{String p = null;}
{              // "0" or positive
	p = positiveintegervalue()
		{
		return p;
		}
}

String positiveintegervalue() : 
{
Token t;
String v = null;
}
{
	 LOOKAHEAD(2) t = <DECVALUE>
		{
		return t.image;
		}
	|
	LOOKAHEAD(2) v = string()
		{ return v;}
		
		
}

String zerointegervalue() : 
{
Token t;
String v = null;
}	
{
	LOOKAHEAD(2) t = <DECVALUE>
		{
		return t.image;
		}
	|
	LOOKAHEAD(2) v = string()
		{ return v;}
}

String floatvalue()            :
{
Token t;
}
{
	t = <neginfkeyword>
		{
		return t.image;
		} 
	|
        t = <posinfkeyword> 
		{
		return t.image;
		}
	|
        t = <nankeyword>
		{
		return t.image;
		} 
	|
	t = <FLOAT>
		{
		return t.image;
		}
}






