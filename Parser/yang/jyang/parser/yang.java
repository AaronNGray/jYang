/* Generated By:JJTree&JavaCC: Do not edit this line. yang.java */
package jyang.parser;
import java.util.Enumeration;
import java.util.Vector;
public class yang/*@bgen(jjtree)*/implements yangTreeConstants, yangConstants {/*@bgen(jjtree)*/
  protected static JJTyangState jjtree = new JJTyangState();

  static final public YANG_Specification Start() throws ParseException {
YANG_Specification n = null;
    if (jj_2_1(2)) {
      n = module();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case submodulekeyword:
        n = submodule();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Specification module() throws ParseException {
 /*@bgen(jjtree) Module */
 YANG_Module jjtn000 = new YANG_Module(JJTMODULE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
Node n=null;
YANG_Header h = null;
YANG_Linkage l = null;
YANG_Meta m = null;
YANG_Revision r = null;
YANG_Body b = null;
YANG_Unknown un = null;
    try {
      jj_consume_token(modulekeyword);
      t = jj_consume_token(IDENTIFIER);
                jjtn000.setName(t.image);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
      jj_consume_token(104);
      label_1:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_1;
        }
        un = unknownstatement();
                                                             jjtn000.addUnknown(un);
      }
      label_2:
      while (true) {
        h = moduleheaderstmts();
                          jjtn000.addHeader(h);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case namespacekeyword:
        case prefixkeyword:
        case yangversionkeyword:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case importkeyword:
        case includekeyword:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        l = linkagestmts();
                        jjtn000.addLinkage(l);
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case contactkeyword:
        case descriptionkeyword:
        case organizationkeyword:
        case referencekeyword:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        m = metastmts();
                           jjtn000.addMeta(m);
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case revisionkeyword:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        r = revisionstmt();
                        jjtn000.addRevision(r);
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case anyxmlkeyword:
        case augmentkeyword:
        case choicekeyword:
        case containerkeyword:
        case extensionkeyword:
        case deviationkeyword:
        case featurekeyword:
        case groupingkeyword:
        case identitykeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case notificationkeyword:
        case rpckeyword:
        case typedefkeyword:
        case useskeyword:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        b = bodystmts();
                        jjtn000.addBody(b);
      }
      jj_consume_token(105);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Specification submodule() throws ParseException {
 /*@bgen(jjtree) SubModule */
YANG_SubModule jjtn000 = new YANG_SubModule(JJTSUBMODULE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Header sh = null;
YANG_Linkage l = null;
YANG_Meta s = null;
YANG_Revision r = null;
YANG_Body b = null;
YANG_Unknown un = null;
Token t;
    try {
      jj_consume_token(submodulekeyword);
      t = jj_consume_token(IDENTIFIER);
                jjtn000.setSubModule(t.image);
      jj_consume_token(104);
      label_7:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_7;
        }
        un = unknownstatement();
                                                  jjtn000.addUnknown(un);
      }
      label_8:
      while (true) {
        sh = submoduleheaderstmts();
                jjtn000.addHeader(sh);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case belongstokeyword:
        case yangversionkeyword:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_8;
        }
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case importkeyword:
        case includekeyword:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_9;
        }
        l = linkagestmts();
                jjtn000.addLinkage(l);
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case contactkeyword:
        case descriptionkeyword:
        case organizationkeyword:
        case referencekeyword:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_10;
        }
        s = metastmts();
                jjtn000.addMeta(s);
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case revisionkeyword:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_11;
        }
        r = revisionstmt();
                jjtn000.addRevision(r);
      }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case anyxmlkeyword:
        case augmentkeyword:
        case choicekeyword:
        case containerkeyword:
        case extensionkeyword:
        case deviationkeyword:
        case featurekeyword:
        case groupingkeyword:
        case identitykeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case notificationkeyword:
        case rpckeyword:
        case typedefkeyword:
        case useskeyword:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_12;
        }
        b = bodystmts();
                jjtn000.addBody(b);
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Header moduleheaderstmts() throws ParseException {
YANG_Header h = null;
YANG_Unknown un = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case yangversionkeyword:
      h = yangversionstmt();
      label_13:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_13;
        }
        un = unknownstatement();
                                                                             h.addUnknown(un);
      }
      break;
    case namespacekeyword:
      h = namespacestmt();
      label_14:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_14;
        }
        un = unknownstatement();
                                                                   h.addUnknown(un);
      }
      break;
    case prefixkeyword:
      h = prefixstmt();
      label_15:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_15;
        }
        un = unknownstatement();
                                                                h.addUnknown(un);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return h;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Header submoduleheaderstmts() throws ParseException {
YANG_Header h = null;
YANG_Unknown un = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case belongstokeyword:
      h = belongstostmt();
      label_16:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_16;
        }
        un = unknownstatement();
                                                                           h.addUnknown(un);
      }
      break;
    case yangversionkeyword:
      h = yangversionstmt();
      label_17:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_17;
        }
        un = unknownstatement();
                                                                             h.addUnknown(un);
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return h;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Meta metastmts() throws ParseException {
YANG_Meta n = null;
YANG_Unknown un = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case organizationkeyword:
      n = organizationstmt();
      label_18:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_18;
        }
        un = unknownstatement();
                                                                      n.addUnknown(un);
      }
      break;
    case contactkeyword:
      n = contactstmt();
      label_19:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_19;
        }
        un = unknownstatement();
                                                                 n.addUnknown(un);
      }
      break;
    case descriptionkeyword:
      n = descriptionstmt();
      label_20:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_20;
        }
        un = unknownstatement();
                                                                     n.addUnknown(un);
      }
      break;
    case referencekeyword:
      n = referencestmt();
      label_21:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_21;
        }
        un = unknownstatement();
                                                                   n.addUnknown(un);
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return (YANG_Meta) n;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Linkage linkagestmts() throws ParseException {
Node n = null;
YANG_Unknown un = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case importkeyword:
      n = importstmt();
      label_22:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_22;
        }
        un = unknownstatement();
                                                                        n.addUnknown(un);
      }
      break;
    case includekeyword:
      n = includestmt();
      label_23:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_23;
        }
        un = unknownstatement();
                                                                         n.addUnknown(un);
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return (YANG_Linkage) n;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Body bodystmts() throws ParseException {
YANG_Body b = null;
YANG_Unknown un = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case extensionkeyword:
      b = extensionstmt();
      break;
    case featurekeyword:
      b = featurestmt();
      break;
    case identitykeyword:
      b = identitystmt();
      break;
    case typedefkeyword:
      b = typedefstmt();
      break;
    case groupingkeyword:
      b = groupingstmt();
      break;
    case anyxmlkeyword:
    case choicekeyword:
    case containerkeyword:
    case leafkeyword:
    case leaflistkeyword:
    case listkeyword:
    case useskeyword:
      b = datadefstmt();
      break;
    case augmentkeyword:
      b = augmentstmt();
      break;
    case rpckeyword:
      b = rpcstmt();
      break;
    case notificationkeyword:
      b = notificationstmt();
      break;
    case deviationkeyword:
      b = deviationstmt();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_24:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_24;
      }
      un = unknownstatement();
                                                   b.addUnknown(un);
    }
                {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_DataDef datadefstmt() throws ParseException {
YANG_DataDef d = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case containerkeyword:
      d = containerstmt();
      break;
    case leafkeyword:
      d = leafstmt();
      break;
    case leaflistkeyword:
      d = leafliststmt();
      break;
    case listkeyword:
      d = liststmt();
      break;
    case choicekeyword:
      d = choicestmt();
      break;
    case anyxmlkeyword:
      d = anyxmlstmt();
      break;
    case useskeyword:
      d = usesstmt();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_CaseDef casedatadefstmt() throws ParseException {
YANG_CaseDef d = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case containerkeyword:
      d = containerstmt();
      break;
    case leafkeyword:
      d = leafstmt();
      break;
    case leaflistkeyword:
      d = leafliststmt();
      break;
    case listkeyword:
      d = liststmt();
      break;
    case anyxmlkeyword:
      d = anyxmlstmt();
      break;
    case useskeyword:
      d = usesstmt();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_YangVersion yangversionstmt() throws ParseException {
 /*@bgen(jjtree) YangVersion */
YANG_YangVersion jjtn000 = new YANG_YangVersion(JJTYANGVERSION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
YANG_Unknown un = null;
    try {
      jj_consume_token(yangversionkeyword);
      t = jj_consume_token(DECVALUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_25;
          }
          un = unknownstatement();
                                                                                 jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setVersion(t.image);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Import importstmt() throws ParseException {
 /*@bgen(jjtree) Import */
YANG_Import jjtn000 = new YANG_Import(JJTIMPORT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
YANG_Prefix n = null;
String i;
YANG_Revision r = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(importkeyword);
      i = identifierstr();
                jjtn000.setIdentifier(i);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
      jj_consume_token(104);
      label_26:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_26;
        }
        un = unknownstatement();
                                                jjtn000.addUnknown(un);
      }
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case prefixkeyword:
        case revisiondatekeyword:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_27;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case prefixkeyword:
          n = prefixstmt();
          label_28:
          while (true) {
            if (jj_2_17(2)) {
              ;
            } else {
              break label_28;
            }
            un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
          }
                                        jjtn000.setPrefix(n);
          break;
        case revisiondatekeyword:
          r = revisiondatestmt();
          label_29:
          while (true) {
            if (jj_2_18(2)) {
              ;
            } else {
              break label_29;
            }
            un = unknownstatement();
                                                                         jjtn000.addUnknown(un);
          }
                                        jjtn000.setRevision(r);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Include includestmt() throws ParseException {
 /*@bgen(jjtree) Include */
YANG_Include jjtn000 = new YANG_Include(JJTINCLUDE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String i;
YANG_Revision r = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(includekeyword);
      i = identifierstr();
                jjtn000.setIdentifier(i);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_30:
        while (true) {
          if (jj_2_19(2)) {
            ;
          } else {
            break label_30;
          }
          un = unknownstatement();
                                                                           jjtn000.addUnknown(un);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case revisiondatekeyword:
          r = revisiondatestmt();
          label_31:
          while (true) {
            if (jj_2_20(2)) {
              ;
            } else {
              break label_31;
            }
            un = unknownstatement();
                                                                                                        jjtn000.addUnknown(un);
          }
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
                                                        jjtn000.setRevision(r);
        jj_consume_token(105);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_NameSpace namespacestmt() throws ParseException {
 /*@bgen(jjtree) NameSpace */
YANG_NameSpace jjtn000 = new YANG_NameSpace(JJTNAMESPACE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String uri;
Token t;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(namespacekeyword);
      uri = uristr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_32:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_32;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setNameSpace(uri);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String uristr() throws ParseException {
String s;
    //< a sring which matches the rule
                            //   URI in RFC 3986 >
            s = string();
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Prefix prefixstmt() throws ParseException {
 /*@bgen(jjtree) Prefix */
YANG_Prefix jjtn000 = new YANG_Prefix(JJTPREFIX);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String s;
Token t;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(prefixkeyword);
      s = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_33:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[26] = jj_gen;
            break label_33;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setPrefix(s);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Belong belongstostmt() throws ParseException {
 /*@bgen(jjtree) Belong */
YANG_Belong jjtn000 = new YANG_Belong(JJTBELONG);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String b = null;
YANG_Prefix p = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(belongstokeyword);
      b = identifierstr();
      jj_consume_token(104);
      p = prefixstmt();
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setBelong(b);
                jjtn000.setPrefix(p);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Organization organizationstmt() throws ParseException {
 /*@bgen(jjtree) Organization */
YANG_Organization jjtn000 = new YANG_Organization(JJTORGANIZATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String s;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(organizationkeyword);
      s = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_34;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setOrganization(s);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Contact contactstmt() throws ParseException {
 /*@bgen(jjtree) Contact */
YANG_Contact jjtn000 = new YANG_Contact(JJTCONTACT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String c;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(contactkeyword);
      c = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_35;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setContact(c);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Description descriptionstmt() throws ParseException {
 /*@bgen(jjtree) Description */
YANG_Description jjtn000 = new YANG_Description(JJTDESCRIPTION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String d;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(descriptionkeyword);
      d = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_36:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_36;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setDescription(d);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Reference referencestmt() throws ParseException {
 /*@bgen(jjtree) Reference */
YANG_Reference jjtn000 = new YANG_Reference(JJTREFERENCE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String r;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(referencekeyword);
      r = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_37:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_37;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setReference(r);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Units unitsstmt() throws ParseException {
 /*@bgen(jjtree) Units */
YANG_Units jjtn000 = new YANG_Units(JJTUNITS);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String u = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(unitskeyword);
      u = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_38:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[36] = jj_gen;
            break label_38;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setUnits(u);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);

                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Revision revisionstmt() throws ParseException {
 /*@bgen(jjtree) Revision */
YANG_Revision jjtn000 = new YANG_Revision(JJTREVISION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
YANG_Description d = null;
String da = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(revisionkeyword);
      da = dateexprstr();
                jjtn000.setDate(da);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_39:
        while (true) {
          if (jj_2_21(2)) {
            ;
          } else {
            break label_39;
          }
          un = unknownstatement();
                                                   jjtn000.addUnknown(un);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case descriptionkeyword:
          d = descriptionstmt();
          label_40:
          while (true) {
            if (jj_2_22(2)) {
              ;
            } else {
              break label_40;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        jj_consume_token(105);
                if(d != null)
                        jjtn000.setDescription(d);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Revision revisiondatestmt() throws ParseException {
 /*@bgen(jjtree) Revision */
YANG_Revision jjtn000 = new YANG_Revision(JJTREVISION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
YANG_Description d = null;
String da = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(revisiondatekeyword);
      da = dateexprstr();
                jjtn000.setDate(da);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_41:
        while (true) {
          if (jj_2_23(2)) {
            ;
          } else {
            break label_41;
          }
          un = unknownstatement();
                                                   jjtn000.addUnknown(un);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case descriptionkeyword:
          d = descriptionstmt();
          label_42:
          while (true) {
            if (jj_2_24(2)) {
              ;
            } else {
              break label_42;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        jj_consume_token(105);
                if(d != null)
                        jjtn000.setDescription(d);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Extension extensionstmt() throws ParseException {
 /*@bgen(jjtree) Extension */
YANG_Extension jjtn000 = new YANG_Extension(JJTEXTENSION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String s = null;
YANG_Argument a = null;
YANG_Status st = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(extensionkeyword);
      s = identifierstr();
                jjtn000.setExtension(s);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_43:
        while (true) {
          if (jj_2_25(2)) {
            ;
          } else {
            break label_43;
          }
          un = unknownstatement();
                                                     jjtn000.addUnknown(un);
        }
        label_44:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case argumentkeyword:
          case descriptionkeyword:
          case referencekeyword:
          case statuskeyword:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_44;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case argumentkeyword:
            //extensionAnyOrder()
                        a = argumentstmt();
            label_45:
            while (true) {
              if (jj_2_26(2)) {
                ;
              } else {
                break label_45;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                jjtn000.setArgument(a);
            break;
          case statuskeyword:
            st = statusstmt();
            label_46:
            while (true) {
              if (jj_2_27(2)) {
                ;
              } else {
                break label_46;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(st);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_47:
            while (true) {
              if (jj_2_28(2)) {
                ;
              } else {
                break label_47;
              }
              un = unknownstatement();
                                                                         jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_48:
            while (true) {
              if (jj_2_29(2)) {
                ;
              } else {
                break label_48;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return  jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Argument argumentstmt() throws ParseException {
 /*@bgen(jjtree) Argument */
YANG_Argument jjtn000 = new YANG_Argument(JJTARGUMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Yin y = null;
String i = null;
YANG_Unknown un = null;
    try {
      jj_consume_token(argumentkeyword);
      i = identifierstr();
                jjtn000.setArgument(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_49:
        while (true) {
          if (jj_2_30(2)) {
            ;
          } else {
            break label_49;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case yinelementkeyword:
          y = yinelementstmt();
          label_50:
          while (true) {
            if (jj_2_31(2)) {
              ;
            } else {
              break label_50;
            }
            un = unknownstatement();
                                                                            jjtn000.addUnknown(un);
          }
                        jjtn000.setYin(y);
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Yin yinelementstmt() throws ParseException {
 /*@bgen(jjtree) Yin */
YANG_Yin jjtn000 = new YANG_Yin(JJTYIN);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String y = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(yinelementkeyword);
      y = yinelementargstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_51:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[47] = jj_gen;
            break label_51;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setYin(y);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String yinelementargstr() throws ParseException {
String y = null;
    if (jj_2_32(2)) {
      y = yinelementarg();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        y = string();
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return y;}
    throw new Error("Missing return statement in function");
  }

  static final public String yinelementarg() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case truekeyword:
      t = jj_consume_token(truekeyword);
      break;
    case falsekeyword:
      t = jj_consume_token(falsekeyword);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Identity identitystmt() throws ParseException {
 /*@bgen(jjtree) Identity */
YANG_Identity jjtn000 = new YANG_Identity(JJTIDENTITY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String i = null;
YANG_Base b = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(identitykeyword);
      i = identifierstr();
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
                        jjtn000.setIdentity(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_52:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case basekeyword:
          case descriptionkeyword:
          case referencekeyword:
          case statuskeyword:
            ;
            break;
          default:
            jj_la1[51] = jj_gen;
            break label_52;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case basekeyword:
            b = basestmt();
            label_53:
            while (true) {
              if (jj_2_33(2)) {
                ;
              } else {
                break label_53;
              }
              un = unknownstatement();
                                                                                      jjtn000.addUnknown(un);
            }
                                                jjtn000.setBase(b);
            break;
          case statuskeyword:
            s = statusstmt();
            label_54:
            while (true) {
              if (jj_2_34(2)) {
                ;
              } else {
                break label_54;
              }
              un = unknownstatement();
                                                                                        jjtn000.addUnknown(un);
            }
                                                jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_55:
            while (true) {
              if (jj_2_35(2)) {
                ;
              } else {
                break label_55;
              }
              un = unknownstatement();
                                                                                             jjtn000.addUnknown(un);
            }
                                                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_56:
            while (true) {
              if (jj_2_36(2)) {
                ;
              } else {
                break label_56;
              }
              un = unknownstatement();
                                                                                           jjtn000.addUnknown(un);
            }
                                                jjtn000.setReference(r);
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Base basestmt() throws ParseException {
 /*@bgen(jjtree) Base */
        YANG_Base jjtn000 = new YANG_Base(JJTBASE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String i = null;
        YANG_Unknown un = null;
    try {
      t = jj_consume_token(basekeyword);
      i = identifierrefstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_57:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            break label_57;
          }
          un = unknownstatement();
                                                                                      jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setBase(i);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Feature featurestmt() throws ParseException {
 /*@bgen(jjtree) Feature */
        YANG_Feature jjtn000 = new YANG_Feature(JJTFEATURE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String f = null;
        YANG_IfFeature i = null;
        YANG_Status s = null;
        YANG_Description d = null;
        YANG_Reference r = null;
        YANG_Unknown un = null;
    try {
      t = jj_consume_token(featurekeyword);
      f = identifierstr();
                        jjtn000.setFeature(f);
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_58:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case descriptionkeyword:
          case iffeaturekeyword:
          case referencekeyword:
          case statuskeyword:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_58;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case iffeaturekeyword:
            i = iffeaturestmt();
            label_59:
            while (true) {
              if (jj_2_37(2)) {
                ;
              } else {
                break label_59;
              }
              un = unknownstatement();
                                                                                   jjtn000.addUnknown(un);
            }
                                        jjtn000.addIfFeature(i);
            break;
          case statuskeyword:
            s = statusstmt();
            label_60:
            while (true) {
              if (jj_2_38(2)) {
                ;
              } else {
                break label_60;
              }
              un = unknownstatement();
                                                                                jjtn000.addUnknown(un);
            }
                                        jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_61:
            while (true) {
              if (jj_2_39(2)) {
                ;
              } else {
                break label_61;
              }
              un = unknownstatement();
                                                                                     jjtn000.addUnknown(un);
            }
                                        jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_62:
            while (true) {
              if (jj_2_40(2)) {
                ;
              } else {
                break label_62;
              }
              un = unknownstatement();
                                                                                   jjtn000.addUnknown(un);
            }
                                        jjtn000.setReference(r);
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_IfFeature iffeaturestmt() throws ParseException {
 /*@bgen(jjtree) IfFeature */
        YANG_IfFeature jjtn000 = new YANG_IfFeature(JJTIFFEATURE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String i = null;
        YANG_Unknown un = null;
    try {
      t = jj_consume_token(iffeaturekeyword);
      i = identifierrefstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_63:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[59] = jj_gen;
            break label_63;
          }
          un = unknownstatement();
                                                                                           jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setIfFeature(i);
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_TypeDef typedefstmt() throws ParseException {
 /*@bgen(jjtree) TypeDef */
YANG_TypeDef jjtn000 = new YANG_TypeDef(JJTTYPEDEF);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String i = null;
YANG_Type ty = null;
YANG_Units u = null;
YANG_Default df = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(typedefkeyword);
      i = identifierstr();
                        jjtn000.setTypedef(i);
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
      jj_consume_token(104);
      label_64:
      while (true) {
        if (jj_2_41(2)) {
          ;
        } else {
          break label_64;
        }
        un = unknownstatement();
                                                   jjtn000.addUnknown(un);
      }
      label_65:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case defaultkeyword:
        case descriptionkeyword:
        case referencekeyword:
        case statuskeyword:
        case typekeyword:
        case unitskeyword:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_65;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case typekeyword:
          ty = typestmt();
          label_66:
          while (true) {
            if (jj_2_42(2)) {
              ;
            } else {
              break label_66;
            }
            un = unknownstatement();
                                                                               jjtn000.addUnknown(un);
          }
                                 jjtn000.setType(ty);
          break;
        case unitskeyword:
          u = unitsstmt();
          label_67:
          while (true) {
            if (jj_2_43(2)) {
              ;
            } else {
              break label_67;
            }
            un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
          }
                                jjtn000.setUnits(u);
          break;
        case defaultkeyword:
          df = defaultstmt();
          label_68:
          while (true) {
            if (jj_2_44(2)) {
              ;
            } else {
              break label_68;
            }
            un = unknownstatement();
                                                                           jjtn000.addUnknown(un);
          }
                                jjtn000.setDefault(df);
          break;
        case statuskeyword:
          s = statusstmt();
          label_69:
          while (true) {
            if (jj_2_45(2)) {
              ;
            } else {
              break label_69;
            }
            un = unknownstatement();
                                                                                jjtn000.addUnknown(un);
          }
                                jjtn000.setStatus(s);
          break;
        case descriptionkeyword:
          d = descriptionstmt();
          label_70:
          while (true) {
            if (jj_2_46(2)) {
              ;
            } else {
              break label_70;
            }
            un = unknownstatement();
                                                                                     jjtn000.addUnknown(un);
          }
                                jjtn000.setDescription(d);
          break;
        case referencekeyword:
          r = referencestmt();
          label_71:
          while (true) {
            if (jj_2_47(2)) {
              ;
            } else {
              break label_71;
            }
            un = unknownstatement();
                                                                                   jjtn000.addUnknown(un);
          }
                                jjtn000.setReference(r);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Type typestmt() throws ParseException {
 /*@bgen(jjtree) Type */
YANG_Type jjtn000 = new YANG_Type(JJTTYPE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String it = null;
YANG_Base i = null;
String ii = null;
YANG_Enum e = null;
YANG_Decimal64Spec d = null;
YANG_LeafRefSpecification k = null;
YANG_BitSpecification b = null;
YANG_UnionSpecification u = null;
YANG_NumericalRestriction n = null;
YANG_StringRestriction s = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(typekeyword);
      it = identifierrefstr();
                jjtn000.setType(it);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_72:
        while (true) {
          if (jj_2_48(2)) {
            ;
          } else {
            break label_72;
          }
          un = unknownstatement();
                                                     jjtn000.addUnknown(un);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case rangekeyword:
          n = numericalrestrictions();
                                jjtn000.setNumRest(n);
          break;
        default:
          jj_la1[63] = jj_gen;
          if (jj_2_50(2)) {
            d = decimal64specification();
                        jjtn000.setDec64Spec(d);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case enumkeyword:
              label_73:
              while (true) {
                e = enumspecification();
                                        jjtn000.addEnum(e);
                if (jj_2_49(2)) {
                  ;
                } else {
                  break label_73;
                }
              }
              break;
            default:
              jj_la1[64] = jj_gen;
              if (jj_2_51(2)) {
                k = leafrefspecification();
                                        jjtn000.setLeafRef(k);
              } else if (jj_2_52(2)) {
                u = unionspecification();
                                jjtn000.setUnionSpec(u);
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case falsekeyword:
                case truekeyword:
                  ii = instanceidentifierspecification();
                        jjtn000.setInstanceIdentifierSpec(ii);
                  break;
                case basekeyword:
                  i = identityrefspecification();
                        jjtn000.setIdentityRefSpec(i);
                  break;
                case bitkeyword:
                  b = bitsspecification();
                                jjtn000.setBitSpec(b);
                  break;
                default:
                  jj_la1[65] = jj_gen;
                  s = stringrestrictions();
                                jjtn000.setStringRest(s);
                }
              }
            }
          }
        }
        label_74:
        while (true) {
          if (jj_2_53(2)) {
            ;
          } else {
            break label_74;
          }
          un = unknownstatement();
                                                 jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.checkTypeSyntax();
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_NumericalRestriction numericalrestrictions() throws ParseException {
YANG_Range r = null;
YANG_Unknown un = null;
    r = rangestmt();
    label_75:
    while (true) {
      if (jj_2_54(2)) {
        ;
      } else {
        break label_75;
      }
      un = unknownstatement();
                                                               r.addUnknown(un);
    }
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Range rangestmt() throws ParseException {
 /*@bgen(jjtree) Range */
YANG_Range jjtn000 = new YANG_Range(JJTRANGE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String r = null;
YANG_ErrorMessage errmess = null;
YANG_ErrorAppt eat = null;
YANG_Description d = null;
YANG_Reference re = null;
YANG_Unknown un = null;
Token rt;
    try {
      rt = jj_consume_token(rangekeyword);
      r = rangeexprstr();
                jjtn000.setLine(rt.beginLine);
                jjtn000.setCol(rt.beginColumn);
                jjtn000.setRange(r);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_76:
        while (true) {
          if (jj_2_55(2)) {
            ;
          } else {
            break label_76;
          }
          un = unknownstatement();
                                               jjtn000.addUnknown(un);
        }
        label_77:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case descriptionkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case referencekeyword:
            ;
            break;
          default:
            jj_la1[67] = jj_gen;
            break label_77;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case errormessagekeyword:
            errmess = errormessagestmt();
            label_78:
            while (true) {
              if (jj_2_56(2)) {
                ;
              } else {
                break label_78;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                jjtn000.setErrMess(errmess);
            break;
          case errorapptagkeyword:
            eat = errorapptagstmt();
            label_79:
            while (true) {
              if (jj_2_57(2)) {
                ;
              } else {
                break label_79;
              }
              un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
            }
                jjtn000.setErrAppTag(eat);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_80:
            while (true) {
              if (jj_2_58(2)) {
                ;
              } else {
                break label_80;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            re = referencestmt();
            label_81:
            while (true) {
              if (jj_2_59(2)) {
                ;
              } else {
                break label_81;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                jjtn000.setReference(re);
            break;
          default:
            jj_la1[68] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Decimal64Spec decimal64specification() throws ParseException {
 /*@bgen(jjtree) Decimal64Spec */
        YANG_Decimal64Spec jjtn000 = new YANG_Decimal64Spec(JJTDECIMAL64SPEC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token f;
        String s =  null;
    try {
      f = jj_consume_token(fractiondigitkeyword);
      s = fractiondigitstmt();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setFractionDigit(s);
                jjtn000.setLine(f.beginLine);
                jjtn000.setCol(f.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String fractiondigitstmt() throws ParseException {
Token t;
    t = jj_consume_token(DECVALUE);
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_StringRestriction stringrestrictions() throws ParseException {
 /*@bgen(jjtree) StringRestriction */
YANG_StringRestriction jjtn000 = new YANG_StringRestriction(JJTSTRINGRESTRICTION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Length l = null;
YANG_Pattern p = null;
YANG_Unknown un = null;
    try {
      if (jj_2_67(3)) {
        l = lengthstmt();
        label_82:
        while (true) {
          if (jj_2_60(2)) {
            ;
          } else {
            break label_82;
          }
          un = unknownstatement();
                                                              jjtn000.addUnknown(un);
        }
                jjtn000.setLine(l.getLine());
                jjtn000.setCol(l.getCol());
                jjtn000.setLength(l);
        label_83:
        while (true) {
          if (jj_2_61(3)) {
            ;
          } else {
            break label_83;
          }
          p = patternstmt();
          label_84:
          while (true) {
            if (jj_2_62(2)) {
              ;
            } else {
              break label_84;
            }
            un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
          }
                jjtn000.setLine(p.getLine());
                jjtn000.setCol(p.getCol());
                jjtn000.addPattern(p);
        }
      } else {
        label_85:
        while (true) {
          if (jj_2_63(3)) {
            ;
          } else {
            break label_85;
          }
          p = patternstmt();
          label_86:
          while (true) {
            if (jj_2_64(2)) {
              ;
            } else {
              break label_86;
            }
            un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
          }
                jjtn000.setLine(p.getLine());
                jjtn000.setCol(p.getCol());
                jjtn000.addPattern(p);
        }
        if (jj_2_66(3)) {
          l = lengthstmt();
          label_87:
          while (true) {
            if (jj_2_65(2)) {
              ;
            } else {
              break label_87;
            }
            un = unknownstatement();
                                                              jjtn000.addUnknown(un);
          }
                jjtn000.setLine(l.getLine());
                jjtn000.setCol(l.getCol());
                jjtn000.setLength(l);
        } else {
          ;
        }
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Length lengthstmt() throws ParseException {
 /*@bgen(jjtree) Length */
YANG_Length jjtn000 = new YANG_Length(JJTLENGTH);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String l = null;
YANG_ErrorMessage em = null;
YANG_ErrorAppt eat = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token lk;
    try {
      lk = jj_consume_token(lengthkeyword);
      l = lengthexprstr();
                jjtn000.setLine(lk.beginLine);
                jjtn000.setCol(lk.beginColumn);
                jjtn000.setLength(l);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_88:
        while (true) {
          if (jj_2_68(2)) {
            ;
          } else {
            break label_88;
          }
          un = unknownstatement();
                                                  jjtn000.addUnknown(un);
        }
        label_89:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case descriptionkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case referencekeyword:
            ;
            break;
          default:
            jj_la1[70] = jj_gen;
            break label_89;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case errormessagekeyword:
            em = errormessagestmt();
            label_90:
            while (true) {
              if (jj_2_69(2)) {
                ;
              } else {
                break label_90;
              }
              un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
            }
                jjtn000.setErrMess(em);
            break;
          case errorapptagkeyword:
            eat = errorapptagstmt();
            label_91:
            while (true) {
              if (jj_2_70(2)) {
                ;
              } else {
                break label_91;
              }
              un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
            }
                jjtn000.setErrAppTag(eat);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_92:
            while (true) {
              if (jj_2_71(2)) {
                ;
              } else {
                break label_92;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_93:
            while (true) {
              if (jj_2_72(2)) {
                ;
              } else {
                break label_93;
              }
              un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          default:
            jj_la1[71] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Pattern patternstmt() throws ParseException {
 /*@bgen(jjtree) Pattern */
YANG_Pattern jjtn000 = new YANG_Pattern(JJTPATTERN);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String p = null;
YANG_ErrorMessage em = null;
YANG_ErrorAppt eat = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token pt;
    try {
      pt = jj_consume_token(patternkeyword);
      p = string();
                jjtn000.setLine(pt.beginLine);
                jjtn000.setCol(pt.beginColumn);
                jjtn000.setPattern(p);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_94:
        while (true) {
          if (jj_2_73(2)) {
            ;
          } else {
            break label_94;
          }
          un = unknownstatement();
                                                   jjtn000.addUnknown(un);
        }
        label_95:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case descriptionkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case referencekeyword:
            ;
            break;
          default:
            jj_la1[73] = jj_gen;
            break label_95;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case errormessagekeyword:
            em = errormessagestmt();
            label_96:
            while (true) {
              if (jj_2_74(2)) {
                ;
              } else {
                break label_96;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                jjtn000.setErrMess(em);
            break;
          case errorapptagkeyword:
            eat = errorapptagstmt();
            label_97:
            while (true) {
              if (jj_2_75(2)) {
                ;
              } else {
                break label_97;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                jjtn000.setErrAppTag(eat);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_98:
            while (true) {
              if (jj_2_76(2)) {
                ;
              } else {
                break label_98;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_99:
            while (true) {
              if (jj_2_77(2)) {
                ;
              } else {
                break label_99;
              }
              un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          default:
            jj_la1[74] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Default defaultstmt() throws ParseException {
 /*@bgen(jjtree) Default */
YANG_Default jjtn000 = new YANG_Default(JJTDEFAULT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String d = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(defaultkeyword);
      d = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_100:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[76] = jj_gen;
            break label_100;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setDefault(d);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Enum enumspecification() throws ParseException {
YANG_Enum e = null;
YANG_Unknown un = null;
    e = enumstmt();
    label_101:
    while (true) {
      if (jj_2_78(2)) {
        ;
      } else {
        break label_101;
      }
      un = unknownstatement();
                                                             e.addUnknown(un);
    }
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Enum enumstmt() throws ParseException {
 /*@bgen(jjtree) Enum */
YANG_Enum jjtn000 = new YANG_Enum(JJTENUM);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String e = null;
YANG_Value v = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      jj_consume_token(enumkeyword);
      e = identifierstr();
                jjtn000.setEnum(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_102:
        while (true) {
          if (jj_2_79(2)) {
            ;
          } else {
            break label_102;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        label_103:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case descriptionkeyword:
          case referencekeyword:
          case statuskeyword:
          case valuekeyword:
            ;
            break;
          default:
            jj_la1[78] = jj_gen;
            break label_103;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case valuekeyword:
            v = valuestmt();
            label_104:
            while (true) {
              if (jj_2_80(2)) {
                ;
              } else {
                break label_104;
              }
              un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
            }
                jjtn000.setValue(v);
            break;
          case statuskeyword:
            s = statusstmt();
            label_105:
            while (true) {
              if (jj_2_81(2)) {
                ;
              } else {
                break label_105;
              }
              un = unknownstatement();
                                                                  jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_106:
            while (true) {
              if (jj_2_82(2)) {
                ;
              } else {
                break label_106;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_107:
            while (true) {
              if (jj_2_83(2)) {
                ;
              } else {
                break label_107;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          default:
            jj_la1[79] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_LeafRefSpecification leafrefspecification() throws ParseException {
 /*@bgen(jjtree) LeafRefSpecification */
YANG_LeafRefSpecification jjtn000 = new YANG_LeafRefSpecification(JJTLEAFREFSPECIFICATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Path p = null;
YANG_Unknown un = null;
String r = null;
    try {
      p = pathstmt();
      label_108:
      while (true) {
        if (jj_2_84(2)) {
          ;
        } else {
          break label_108;
        }
        un = unknownstatement();
                                                               p.addUnknown(un);
      }
                        jjtn000.setPath(p);
      if (jj_2_86(2)) {
        r = requireinstancestmt();
        label_109:
        while (true) {
          if (jj_2_85(2)) {
            ;
          } else {
            break label_109;
          }
          un = unknownstatement();
                                                                          p.addUnknown(un);
        }
      } else {
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (r != null)
                        jjtn000.setRequireInstance(r);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Path pathstmt() throws ParseException {
 /*@bgen(jjtree) Path */
YANG_Path jjtn000 = new YANG_Path(JJTPATH);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String p = null;
YANG_Unknown un = null;
    try {
      jj_consume_token(pathkeyword);
      p = pathargstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_110:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[81] = jj_gen;
            break label_110;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setPath(p);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String requireinstancestmt() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case truekeyword:
      t = jj_consume_token(truekeyword);
      break;
    case falsekeyword:
      t = jj_consume_token(falsekeyword);
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String instanceidentifierspecification() throws ParseException {
String s = null;
    //LOOKAHEAD(2) 
                    s = requireinstancestmt();
                        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Base identityrefspecification() throws ParseException {
        YANG_Base b = null;
    b = basestmt();
                {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_UnionSpecification unionspecification() throws ParseException {
 /*@bgen(jjtree) UnionSpecification */
YANG_UnionSpecification jjtn000 = new YANG_UnionSpecification(JJTUNIONSPECIFICATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Type t = null;
YANG_Unknown un = null;
    try {
      label_111:
      while (true) {
        t = typestmt();
        label_112:
        while (true) {
          if (jj_2_87(2)) {
            ;
          } else {
            break label_112;
          }
          un = unknownstatement();
                                                      jjtn000.addUnknown(un);
        }
                        jjtn000.addType(t);
        if (jj_2_88(2)) {
          ;
        } else {
          break label_111;
        }
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_BitSpecification bitsspecification() throws ParseException {
 /*@bgen(jjtree) BitSpecification */
YANG_BitSpecification jjtn000 = new YANG_BitSpecification(JJTBITSPECIFICATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Bit b = null;
YANG_Unknown un = null;
    try {
      label_113:
      while (true) {
        b = bitstmt();
                jjtn000.addBit(b);
        label_114:
        while (true) {
          if (jj_2_89(2)) {
            ;
          } else {
            break label_114;
          }
          un = unknownstatement();
                                              jjtn000.addUnknown(un);
        }
        if (jj_2_90(2)) {
          ;
        } else {
          break label_113;
        }
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Bit bitstmt() throws ParseException {
 /*@bgen(jjtree) Bit */
YANG_Bit jjtn000 = new YANG_Bit(JJTBIT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String i = null;
YANG_Position p = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      jj_consume_token(bitkeyword);
      i = identifierstr();
                jjtn000.setBit(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_115:
        while (true) {
          if (jj_2_91(2)) {
            ;
          } else {
            break label_115;
          }
          un = unknownstatement();
                                                   jjtn000.addUnknown(un);
        }
        label_116:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case descriptionkeyword:
          case positionkeyword:
          case referencekeyword:
          case statuskeyword:
            ;
            break;
          default:
            jj_la1[84] = jj_gen;
            break label_116;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case positionkeyword:
            p = positionstmt();
            label_117:
            while (true) {
              if (jj_2_92(2)) {
                ;
              } else {
                break label_117;
              }
              un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
            }
                jjtn000.setPosition(p);
            break;
          case statuskeyword:
            s = statusstmt();
            label_118:
            while (true) {
              if (jj_2_93(2)) {
                ;
              } else {
                break label_118;
              }
              un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_119:
            while (true) {
              if (jj_2_94(2)) {
                ;
              } else {
                break label_119;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_120:
            while (true) {
              if (jj_2_95(2)) {
                ;
              } else {
                break label_120;
              }
              un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          default:
            jj_la1[85] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Position positionstmt() throws ParseException {
 /*@bgen(jjtree) Position */
YANG_Position jjtn000 = new YANG_Position(JJTPOSITION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String p = null;
YANG_Unknown un = null;
    try {
      jj_consume_token(positionkeyword);
      p = positionvaluestr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_121:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[87] = jj_gen;
            break label_121;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setPosition(p);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String positionvaluestr() throws ParseException {
String p = null;
    if (jj_2_96(2)) {
      p = positionvalue();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        p = string();
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public String positionvalue() throws ParseException {
String p = null;
    p = nonnegativeintegervalue();
                {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Status statusstmt() throws ParseException {
 /*@bgen(jjtree) Status */
YANG_Status jjtn000 = new YANG_Status(JJTSTATUS);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String s = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(statuskeyword);
      s = statusargstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_122:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[90] = jj_gen;
            break label_122;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setStatus(s);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String statusargstr() throws ParseException {
String s = null;
    if (jj_2_97(2)) {
      s = statusarg();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        s = string();
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String statusarg() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case currentkeyword:
      t = jj_consume_token(currentkeyword);
      break;
    case obsoletekeyword:
      t = jj_consume_token(obsoletekeyword);
      break;
    case deprecatedkeyword:
      t = jj_consume_token(deprecatedkeyword);
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Config configstmt() throws ParseException {
 /*@bgen(jjtree) Config */
YANG_Config jjtn000 = new YANG_Config(JJTCONFIG);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String c = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(configkeyword);
      c = configargstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_123:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[94] = jj_gen;
            break label_123;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setConfig(c);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String configargstr() throws ParseException {
String c = null;
    if (jj_2_98(2)) {
      c = configarg();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        c = string();
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public String configarg() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case truekeyword:
      t = jj_consume_token(truekeyword);
      break;
    case falsekeyword:
      t = jj_consume_token(falsekeyword);
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Mandatory mandatorystmt() throws ParseException {
 /*@bgen(jjtree) Mandatory */
YANG_Mandatory jjtn000 = new YANG_Mandatory(JJTMANDATORY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String m = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(mandatorykeyword);
      m = mandatoryargstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_124:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[98] = jj_gen;
            break label_124;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setMandatory(m);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String mandatoryargstr() throws ParseException {
 String m = null;
    //< a string which matches the rule
            //   mandatoryarg >
            m = mandatoryarg();
                {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public String mandatoryarg() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case truekeyword:
      t = jj_consume_token(truekeyword);
      break;
    case falsekeyword:
      t = jj_consume_token(falsekeyword);
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Presence presencestmt() throws ParseException {
 /*@bgen(jjtree) Presence */
YANG_Presence jjtn000 = new YANG_Presence(JJTPRESENCE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String p = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(presencekeyword);
      p = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_125:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[101] = jj_gen;
            break label_125;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setPresence(p);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_OrderedBy orderedbystmt() throws ParseException {
 /*@bgen(jjtree) OrderedBy */
YANG_OrderedBy jjtn000 = new YANG_OrderedBy(JJTORDEREDBY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String o = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(orderedbykeyword);
      o = orderedbyargstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_126:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[103] = jj_gen;
            break label_126;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setOrderedBy(o);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String orderedbyargstr() throws ParseException {
String o = null;
    //	< a string which matches the rule
                    //           orderedbyarg >
            o = orderedbyarg();
                {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  static final public String orderedbyarg() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case userkeyword:
      t = jj_consume_token(userkeyword);
      break;
    case systemkeyword:
      t = jj_consume_token(systemkeyword);
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Must muststmt() throws ParseException {
 /*@bgen(jjtree) Must */
YANG_Must jjtn000 = new YANG_Must(JJTMUST);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token must;
String m = null;
YANG_ErrorMessage em = null;
YANG_ErrorAppt ea = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      must = jj_consume_token(mustkeyword);
      m = string();
                        jjtn000.setLine(must.beginLine);
                        jjtn000.setCol(must.beginColumn);
                        jjtn000.setMust(m);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_127:
        while (true) {
          if (jj_2_99(2)) {
            ;
          } else {
            break label_127;
          }
          un = unknownstatement();
                                                       jjtn000.addUnknown(un);
        }
        label_128:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case descriptionkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case referencekeyword:
            ;
            break;
          default:
            jj_la1[106] = jj_gen;
            break label_128;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case errormessagekeyword:
            em = errormessagestmt();
            label_129:
            while (true) {
              if (jj_2_100(2)) {
                ;
              } else {
                break label_129;
              }
              un = unknownstatement();
                                                                                jjtn000.addUnknown(un);
            }
                        jjtn000.setErrMess(em);
            break;
          case errorapptagkeyword:
            ea = errorapptagstmt();
            label_130:
            while (true) {
              if (jj_2_101(2)) {
                ;
              } else {
                break label_130;
              }
              un = unknownstatement();
                                                                               jjtn000.addUnknown(un);
            }
                        jjtn000.setErrAppTag(ea);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_131:
            while (true) {
              if (jj_2_102(2)) {
                ;
              } else {
                break label_131;
              }
              un = unknownstatement();
                                                                              jjtn000.addUnknown(un);
            }
                        jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_132:
            while (true) {
              if (jj_2_103(2)) {
                ;
              } else {
                break label_132;
              }
              un = unknownstatement();
                                                                            jjtn000.addUnknown(un);
            }
                        jjtn000.setReference(r);
            break;
          default:
            jj_la1[107] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_ErrorMessage errormessagestmt() throws ParseException {
 /*@bgen(jjtree) ErrorMessage */
YANG_ErrorMessage jjtn000 = new YANG_ErrorMessage(JJTERRORMESSAGE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String e = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(errormessagekeyword);
      e = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_133:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[109] = jj_gen;
            break label_133;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setErrorMessage(e);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_ErrorAppt errorapptagstmt() throws ParseException {
 /*@bgen(jjtree) ErrorAppt */
YANG_ErrorAppt jjtn000 = new YANG_ErrorAppt(JJTERRORAPPT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String e = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(errorapptagkeyword);
      e = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_134:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[111] = jj_gen;
            break label_134;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                jjtn000.setErrorAppt(e);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_MinElement minelementsstmt() throws ParseException {
 /*@bgen(jjtree) MinElement */
YANG_MinElement jjtn000 = new YANG_MinElement(JJTMINELEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String m = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(minelementskeyword);
      m = minvaluestr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_135:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[113] = jj_gen;
            break label_135;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setMinElement(m);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String minvaluestr() throws ParseException {
String m = null;
    //	< a string which matches the rule
                      //         minvalue >
            m = minvalue();
                {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public String minvalue() throws ParseException {
String m = null;
    m = nonnegativeintegervalue();
                {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_MaxElement maxelementsstmt() throws ParseException {
 /*@bgen(jjtree) MaxElement */
YANG_MaxElement jjtn000 = new YANG_MaxElement(JJTMAXELEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String m= null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(maxelementskeyword);
      m = maxvaluestr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_136:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[115] = jj_gen;
            break label_136;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setMaxElement(m);
                jjtn000.setLine(t.beginLine);
                jjtn000.setCol(t.beginColumn);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String maxvaluestr() throws ParseException {
String m = null;
    //	< a string which matches the rule
                    //           maxvalue >
            m = maxvalue();
                {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public String maxvalue() throws ParseException {
Token t;
String p = null;
    if (jj_2_104(2)) {
      t = jj_consume_token(unboundedkeyword);
                {if (true) return t.image;}
    } else if (jj_2_105(2)) {
      p = positiveintegervalue();
                {if (true) return p;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Value valuestmt() throws ParseException {
 /*@bgen(jjtree) Value */
YANG_Value jjtn000 = new YANG_Value(JJTVALUE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String d = null;
YANG_Unknown un = null;
    try {
      jj_consume_token(valuekeyword);
      d = integervalue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_137:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[117] = jj_gen;
            break label_137;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setValue(d);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Body groupingstmt() throws ParseException {
 /*@bgen(jjtree) Grouping */
YANG_Grouping jjtn000 = new YANG_Grouping(JJTGROUPING);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token to;
String i = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef dd = null;
YANG_Unknown un = null;
    try {
      to = jj_consume_token(groupingkeyword);
      i = identifierstr();
                         jjtn000.setLine(to.beginLine);
                         jjtn000.setCol(to.beginColumn);
                         jjtn000.setGrouping(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_138:
        while (true) {
          if (jj_2_106(2)) {
            ;
          } else {
            break label_138;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        label_139:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case choicekeyword:
          case containerkeyword:
          case descriptionkeyword:
          case groupingkeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case referencekeyword:
          case statuskeyword:
          case typedefkeyword:
          case useskeyword:
            ;
            break;
          default:
            jj_la1[119] = jj_gen;
            break label_139;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case statuskeyword:
            s = statusstmt();
            label_140:
            while (true) {
              if (jj_2_107(2)) {
                ;
              } else {
                break label_140;
              }
              un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
            }
                        jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_141:
            while (true) {
              if (jj_2_108(2)) {
                ;
              } else {
                break label_141;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                        jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_142:
            while (true) {
              if (jj_2_109(2)) {
                ;
              } else {
                break label_142;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                        jjtn000.setReference(r);
            break;
          case groupingkeyword:
          case typedefkeyword:
            label_143:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case typedefkeyword:
                t = typedefstmt();
                        jjtn000.addTypeDef(t);
                break;
              case groupingkeyword:
                g = groupingstmt();
                        if(g instanceof YANG_Grouping)
                                jjtn000.addGrouping((YANG_Grouping)g );
                break;
              default:
                jj_la1[120] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              label_144:
              while (true) {
                if (jj_2_110(2)) {
                  ;
                } else {
                  break label_144;
                }
                un = unknownstatement();
                                                         jjtn000.addUnknown(un);
              }
              if (jj_2_111(2)) {
                ;
              } else {
                break label_143;
              }
            }
            break;
          case anyxmlkeyword:
          case choicekeyword:
          case containerkeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case useskeyword:
            dd = datadefstmt();
            label_145:
            while (true) {
              if (jj_2_112(2)) {
                ;
              } else {
                break label_145;
              }
              un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
            }
                        jjtn000.addDataDef(dd);
            break;
          default:
            jj_la1[121] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Container containerstmt() throws ParseException {
 /*@bgen(jjtree) Container */
YANG_Container jjtn000 = new YANG_Container(JJTCONTAINER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token to;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Must m = null;
YANG_Presence p = null;
YANG_Config c = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef da = null;
YANG_Unknown un = null;
    try {
      to = jj_consume_token(containerkeyword);
      i = identifierstr();
                        jjtn000.setLine(to.beginLine);
                        jjtn000.setCol(to.beginColumn);
                        jjtn000.setContainer(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_146:
        while (true) {
          if (jj_2_113(2)) {
            ;
          } else {
            break label_146;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        label_147:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case choicekeyword:
          case configkeyword:
          case containerkeyword:
          case descriptionkeyword:
          case groupingkeyword:
          case iffeaturekeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case mustkeyword:
          case presencekeyword:
          case referencekeyword:
          case statuskeyword:
          case typedefkeyword:
          case useskeyword:
          case whenkeyword:
            ;
            break;
          default:
            jj_la1[123] = jj_gen;
            break label_147;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case whenkeyword:
            w = whenstmt();
            label_148:
            while (true) {
              if (jj_2_114(2)) {
                ;
              } else {
                break label_148;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                                jjtn000.setWhen(w);
            break;
          case iffeaturekeyword:
            iff = iffeaturestmt();
            label_149:
            while (true) {
              if (jj_2_115(2)) {
                ;
              } else {
                break label_149;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                                jjtn000.addIfFeature(iff);
            break;
          case mustkeyword:
            m = muststmt();
            label_150:
            while (true) {
              if (jj_2_116(2)) {
                ;
              } else {
                break label_150;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                        jjtn000.addMust(m);
            break;
          case presencekeyword:
            p = presencestmt();
            label_151:
            while (true) {
              if (jj_2_117(2)) {
                ;
              } else {
                break label_151;
              }
              un = unknownstatement();
                                                                          jjtn000.addUnknown(un);
            }
                        jjtn000.setPresence(p);
            break;
          case configkeyword:
            c = configstmt();
            label_152:
            while (true) {
              if (jj_2_118(2)) {
                ;
              } else {
                break label_152;
              }
              un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
            }
                        jjtn000.setConfig(c);
            break;
          case statuskeyword:
            s = statusstmt();
            label_153:
            while (true) {
              if (jj_2_119(2)) {
                ;
              } else {
                break label_153;
              }
              un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
            }
                        jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_154:
            while (true) {
              if (jj_2_120(2)) {
                ;
              } else {
                break label_154;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                        jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_155:
            while (true) {
              if (jj_2_121(2)) {
                ;
              } else {
                break label_155;
              }
              un = unknownstatement();
                                                                           jjtn000.addUnknown(un);
            }
                        jjtn000.setReference(r);
            break;
          case groupingkeyword:
          case typedefkeyword:
            label_156:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case typedefkeyword:
                t = typedefstmt();
                                jjtn000.addTypeDef(t);
                break;
              case groupingkeyword:
                g = groupingstmt();
                                jjtn000.addGrouping((YANG_Grouping)g);
                break;
              default:
                jj_la1[124] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              label_157:
              while (true) {
                if (jj_2_122(2)) {
                  ;
                } else {
                  break label_157;
                }
                un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
              }
              if (jj_2_123(2)) {
                ;
              } else {
                break label_156;
              }
            }
            break;
          case anyxmlkeyword:
          case choicekeyword:
          case containerkeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case useskeyword:
            da = datadefstmt();
            label_158:
            while (true) {
              if (jj_2_124(2)) {
                ;
              } else {
                break label_158;
              }
              un = unknownstatement();
                                                                          jjtn000.addUnknown(un);
            }
                        jjtn000.addDataDef(da);
            break;
          default:
            jj_la1[125] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Leaf leafstmt() throws ParseException {
 /*@bgen(jjtree) Leaf */
YANG_Leaf jjtn000 = new YANG_Leaf(JJTLEAF);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token leaf;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Type t = null;
YANG_Units u = null;
YANG_Must m = null;
YANG_Default d = null;
YANG_Config c = null;
YANG_Mandatory ma = null;
YANG_Status s = null;
YANG_Description de = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      leaf = jj_consume_token(leafkeyword);
      i = identifierstr();
                        jjtn000.setLine(leaf.beginLine);
                        jjtn000.setCol(leaf.beginColumn);
                        jjtn000.setLeaf(i);
      jj_consume_token(104);
      label_159:
      while (true) {
        if (jj_2_125(2)) {
          ;
        } else {
          break label_159;
        }
        un = unknownstatement();
                                                       jjtn000.addUnknown(un);
      }
      label_160:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case configkeyword:
        case defaultkeyword:
        case descriptionkeyword:
        case iffeaturekeyword:
        case mandatorykeyword:
        case mustkeyword:
        case referencekeyword:
        case statuskeyword:
        case typekeyword:
        case unitskeyword:
        case whenkeyword:
          ;
          break;
        default:
          jj_la1[127] = jj_gen;
          break label_160;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case whenkeyword:
          w = whenstmt();
          label_161:
          while (true) {
            if (jj_2_126(2)) {
              ;
            } else {
              break label_161;
            }
            un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
          }
                                jjtn000.setWhen(w);
          break;
        case iffeaturekeyword:
          iff = iffeaturestmt();
          label_162:
          while (true) {
            if (jj_2_127(2)) {
              ;
            } else {
              break label_162;
            }
            un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
          }
                                jjtn000.addIfFeature(iff);
          break;
        case typekeyword:
          t = typestmt();
          label_163:
          while (true) {
            if (jj_2_128(2)) {
              ;
            } else {
              break label_163;
            }
            un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
          }
                        jjtn000.setType(t);
          break;
        case unitskeyword:
          u = unitsstmt();
          label_164:
          while (true) {
            if (jj_2_129(2)) {
              ;
            } else {
              break label_164;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
                        jjtn000.setUnits(u);
          break;
        case mustkeyword:
          m = muststmt();
          label_165:
          while (true) {
            if (jj_2_130(2)) {
              ;
            } else {
              break label_165;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
                        jjtn000.addMust(m);
          break;
        case defaultkeyword:
          d = defaultstmt();
          label_166:
          while (true) {
            if (jj_2_131(2)) {
              ;
            } else {
              break label_166;
            }
            un = unknownstatement();
                                                                         jjtn000.addUnknown(un);
          }
                        jjtn000.setDefault(d);
          break;
        case configkeyword:
          c = configstmt();
          label_167:
          while (true) {
            if (jj_2_132(2)) {
              ;
            } else {
              break label_167;
            }
            un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
          }
                        jjtn000.setConfig(c);
          break;
        case mandatorykeyword:
          ma = mandatorystmt();
          label_168:
          while (true) {
            if (jj_2_133(2)) {
              ;
            } else {
              break label_168;
            }
            un = unknownstatement();
                                                                            jjtn000.addUnknown(un);
          }
                        jjtn000.setMandatory(ma);
          break;
        case statuskeyword:
          s = statusstmt();
          label_169:
          while (true) {
            if (jj_2_134(2)) {
              ;
            } else {
              break label_169;
            }
            un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
          }
                        jjtn000.setStatus(s);
          break;
        case descriptionkeyword:
          de = descriptionstmt();
          label_170:
          while (true) {
            if (jj_2_135(2)) {
              ;
            } else {
              break label_170;
            }
            un = unknownstatement();
                                                                              jjtn000.addUnknown(un);
          }
                        jjtn000.setDescription(de);
          break;
        case referencekeyword:
          r = referencestmt();
          label_171:
          while (true) {
            if (jj_2_136(2)) {
              ;
            } else {
              break label_171;
            }
            un = unknownstatement();
                                                                           jjtn000.addUnknown(un);
          }
                        jjtn000.setReference(r);
          break;
        default:
          jj_la1[128] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(105);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_LeafList leafliststmt() throws ParseException {
 /*@bgen(jjtree) LeafList */
YANG_LeafList jjtn000 = new YANG_LeafList(JJTLEAFLIST);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token leaflist;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Type t = null;
YANG_Units u = null;
YANG_Must mu = null;
YANG_Config c = null;
YANG_MinElement mi = null;
YANG_MaxElement ma = null;
YANG_OrderedBy o = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      leaflist = jj_consume_token(leaflistkeyword);
      i = identifierstr();
                jjtn000.setLine(leaflist.beginLine);
                jjtn000.setCol(leaflist.beginColumn);
                jjtn000.setLeafList(i);
      jj_consume_token(104);
      label_172:
      while (true) {
        if (jj_2_137(2)) {
          ;
        } else {
          break label_172;
        }
        un = unknownstatement();
                                                   jjtn000.addUnknown(un);
      }
      label_173:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case configkeyword:
        case descriptionkeyword:
        case iffeaturekeyword:
        case maxelementskeyword:
        case minelementskeyword:
        case mustkeyword:
        case orderedbykeyword:
        case referencekeyword:
        case statuskeyword:
        case typekeyword:
        case unitskeyword:
        case whenkeyword:
          ;
          break;
        default:
          jj_la1[129] = jj_gen;
          break label_173;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case whenkeyword:
          w = whenstmt();
          label_174:
          while (true) {
            if (jj_2_138(2)) {
              ;
            } else {
              break label_174;
            }
            un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
          }
                                jjtn000.setWhen(w);
          break;
        case iffeaturekeyword:
          iff = iffeaturestmt();
          label_175:
          while (true) {
            if (jj_2_139(2)) {
              ;
            } else {
              break label_175;
            }
            un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
          }
                                jjtn000.addIfFeature(iff);
          break;
        case typekeyword:
          t = typestmt();
          label_176:
          while (true) {
            if (jj_2_140(2)) {
              ;
            } else {
              break label_176;
            }
            un = unknownstatement();
                                                               jjtn000.addUnknown(un);
          }
                jjtn000.setType(t);
          break;
        case unitskeyword:
          u = unitsstmt();
          label_177:
          while (true) {
            if (jj_2_141(2)) {
              ;
            } else {
              break label_177;
            }
            un = unknownstatement();
                                                                jjtn000.addUnknown(un);
          }
                jjtn000.setUnits(u);
          break;
        case mustkeyword:
          mu = muststmt();
          label_178:
          while (true) {
            if (jj_2_142(2)) {
              ;
            } else {
              break label_178;
            }
            un = unknownstatement();
                                                                jjtn000.addUnknown(un);
          }
                jjtn000.addMust(mu);
          break;
        case configkeyword:
          c = configstmt();
          label_179:
          while (true) {
            if (jj_2_143(2)) {
              ;
            } else {
              break label_179;
            }
            un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
          }
                jjtn000.setConfig(c);
          break;
        case minelementskeyword:
          mi = minelementsstmt();
          label_180:
          while (true) {
            if (jj_2_144(2)) {
              ;
            } else {
              break label_180;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
                jjtn000.setMinElement(mi);
          break;
        case maxelementskeyword:
          ma = maxelementsstmt();
          label_181:
          while (true) {
            if (jj_2_145(2)) {
              ;
            } else {
              break label_181;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
                jjtn000.setMaxElement(ma);
          break;
        case orderedbykeyword:
          o = orderedbystmt();
          label_182:
          while (true) {
            if (jj_2_146(2)) {
              ;
            } else {
              break label_182;
            }
            un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
          }
                jjtn000.setOrderedBy(o);
          break;
        case statuskeyword:
          s = statusstmt();
          label_183:
          while (true) {
            if (jj_2_147(2)) {
              ;
            } else {
              break label_183;
            }
            un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
          }
                jjtn000.setStatus(s);
          break;
        case descriptionkeyword:
          d = descriptionstmt();
          label_184:
          while (true) {
            if (jj_2_148(2)) {
              ;
            } else {
              break label_184;
            }
            un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
          }
                jjtn000.setDescription(d);
          break;
        case referencekeyword:
          r = referencestmt();
          label_185:
          while (true) {
            if (jj_2_149(2)) {
              ;
            } else {
              break label_185;
            }
            un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
          }
                jjtn000.setReference(r);
          break;
        default:
          jj_la1[130] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_List liststmt() throws ParseException {
 /*@bgen(jjtree) List */
YANG_List jjtn000 = new YANG_List(JJTLIST);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token list;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Must m = null;
YANG_Key k = null;
YANG_Unique u = null;
YANG_Config c = null;
YANG_MinElement mi = null;
YANG_MaxElement ma = null;
YANG_OrderedBy o = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef dd = null;
YANG_Unknown un = null;
    try {
      list = jj_consume_token(listkeyword);
      i = identifierstr();
                jjtn000.setLine(list.beginLine);
                jjtn000.setCol(list.beginColumn);
                jjtn000.setList(i);
      jj_consume_token(104);
      label_186:
      while (true) {
        if (jj_2_150(2)) {
          ;
        } else {
          break label_186;
        }
        un = unknownstatement();
                                                   jjtn000.addUnknown(un);
      }
      label_187:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case anyxmlkeyword:
        case choicekeyword:
        case configkeyword:
        case containerkeyword:
        case descriptionkeyword:
        case groupingkeyword:
        case iffeaturekeyword:
        case keykeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case maxelementskeyword:
        case minelementskeyword:
        case mustkeyword:
        case orderedbykeyword:
        case referencekeyword:
        case statuskeyword:
        case typedefkeyword:
        case uniquekeyword:
        case useskeyword:
        case whenkeyword:
          ;
          break;
        default:
          jj_la1[131] = jj_gen;
          break label_187;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case whenkeyword:
          w = whenstmt();
          label_188:
          while (true) {
            if (jj_2_151(2)) {
              ;
            } else {
              break label_188;
            }
            un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
          }
                                jjtn000.setWhen(w);
          break;
        case iffeaturekeyword:
          iff = iffeaturestmt();
          label_189:
          while (true) {
            if (jj_2_152(2)) {
              ;
            } else {
              break label_189;
            }
            un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
          }
                                jjtn000.addIfFeature(iff);
          break;
        case mustkeyword:
          m = muststmt();
          label_190:
          while (true) {
            if (jj_2_153(2)) {
              ;
            } else {
              break label_190;
            }
            un = unknownstatement();
                                                               jjtn000.addUnknown(un);
          }
                jjtn000.addMust(m);
          break;
        case keykeyword:
          k = keystmt();
          label_191:
          while (true) {
            if (jj_2_154(2)) {
              ;
            } else {
              break label_191;
            }
            un = unknownstatement();
                                                              jjtn000.addUnknown(un);
          }
                jjtn000.setKey(k);
          break;
        case uniquekeyword:
          u = uniquestmt();
          label_192:
          while (true) {
            if (jj_2_155(2)) {
              ;
            } else {
              break label_192;
            }
            un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
          }
                jjtn000.addUnique(u);
          break;
        case configkeyword:
          c = configstmt();
          label_193:
          while (true) {
            if (jj_2_156(2)) {
              ;
            } else {
              break label_193;
            }
            un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
          }
                jjtn000.setConfig(c);
          break;
        case minelementskeyword:
          mi = minelementsstmt();
          label_194:
          while (true) {
            if (jj_2_157(2)) {
              ;
            } else {
              break label_194;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
                jjtn000.setMinElement(mi);
          break;
        case maxelementskeyword:
          ma = maxelementsstmt();
          label_195:
          while (true) {
            if (jj_2_158(2)) {
              ;
            } else {
              break label_195;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
                jjtn000.setMaxElement(ma);
          break;
        case orderedbykeyword:
          o = orderedbystmt();
          label_196:
          while (true) {
            if (jj_2_159(2)) {
              ;
            } else {
              break label_196;
            }
            un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
          }
                jjtn000.setOrderedBy(o);
          break;
        case statuskeyword:
          s = statusstmt();
          label_197:
          while (true) {
            if (jj_2_160(2)) {
              ;
            } else {
              break label_197;
            }
            un = unknownstatement();
                                                                jjtn000.addUnknown(un);
          }
                jjtn000.setStatus(s);
          break;
        case descriptionkeyword:
          d = descriptionstmt();
          label_198:
          while (true) {
            if (jj_2_161(2)) {
              ;
            } else {
              break label_198;
            }
            un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
          }
                jjtn000.setDescription(d);
          break;
        case referencekeyword:
          r = referencestmt();
          label_199:
          while (true) {
            if (jj_2_162(2)) {
              ;
            } else {
              break label_199;
            }
            un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
          }
                jjtn000.setReference(r);
          break;
        case typedefkeyword:
          t = typedefstmt();
          label_200:
          while (true) {
            if (jj_2_163(2)) {
              ;
            } else {
              break label_200;
            }
            un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
          }
                jjtn000.addTypeDef(t);
          break;
        case groupingkeyword:
          g = groupingstmt();
          label_201:
          while (true) {
            if (jj_2_164(2)) {
              ;
            } else {
              break label_201;
            }
            un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
          }
                jjtn000.addGrouping((YANG_Grouping)g);
          break;
        case anyxmlkeyword:
        case choicekeyword:
        case containerkeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case useskeyword:
          dd = datadefstmt();
          label_202:
          while (true) {
            if (jj_2_165(2)) {
              ;
            } else {
              break label_202;
            }
            un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
          }
                jjtn000.addDataDef(dd);
          break;
        default:
          jj_la1[132] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Key keystmt() throws ParseException {
 /*@bgen(jjtree) Key */
YANG_Key jjtn000 = new YANG_Key(JJTKEY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token key;
String k = null;
YANG_Unknown un = null;
    try {
      key = jj_consume_token(keykeyword);
      k = keyargstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_203:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[133] = jj_gen;
            break label_203;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(key.beginLine);
                jjtn000.setCol(key.beginColumn);
                jjtn000.setKey(k);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String keyargstr() throws ParseException {
String k = null;
    if (jj_2_166(2)) {
      k = keyarg();
                {if (true) return k;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        k = string();
                {if (true) return k;}
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String keyarg() throws ParseException {
Token t;
String k = new String();
    label_204:
    while (true) {
      t = jj_consume_token(IDENTIFIER);
                k += t.image + " ";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_204;
      }
    }
                {if (true) return k;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Unique uniquestmt() throws ParseException {
 /*@bgen(jjtree) Unique */
YANG_Unique jjtn000 = new YANG_Unique(JJTUNIQUE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token unique;
String u = null;
YANG_Unknown un = null;
    try {
      unique = jj_consume_token(uniquekeyword);
      u = uniqueargstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_205:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[137] = jj_gen;
            break label_205;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(unique.beginLine);
                jjtn000.setCol(unique.beginColumn);
                jjtn000.setUnique(u);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String uniqueargstr() throws ParseException {
String u = null;
    if (jj_2_167(2)) {
      u = uniquearg();
                {if (true) return u;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        u = string();
                {if (true) return u;}
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String uniquearg() throws ParseException {
String d = null,u = new String();
    d = descendantschemanodeid();
                u = d;
                {if (true) return u;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Choice choicestmt() throws ParseException {
 /*@bgen(jjtree) Choice */
YANG_Choice jjtn000 = new YANG_Choice(JJTCHOICE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token choice;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Default d = null;
YANG_Config cf = null;
YANG_Mandatory m = null;
YANG_Status s = null;
YANG_Description de = null;
YANG_Reference r = null;
YANG_ShortCase sc = null;
YANG_Case c = null;
YANG_Unknown un = null;
    try {
      choice = jj_consume_token(choicekeyword);
      i = identifierstr();
                jjtn000.setLine(choice.beginLine);
                jjtn000.setCol(choice.beginColumn);
                jjtn000.setChoice(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_206:
        while (true) {
          if (jj_2_168(2)) {
            ;
          } else {
            break label_206;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        label_207:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case casekeyword:
          case configkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case iffeaturekeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case mandatorykeyword:
          case referencekeyword:
          case statuskeyword:
          case whenkeyword:
            ;
            break;
          default:
            jj_la1[140] = jj_gen;
            break label_207;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case whenkeyword:
            w = whenstmt();
            label_208:
            while (true) {
              if (jj_2_169(2)) {
                ;
              } else {
                break label_208;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                                jjtn000.setWhen(w);
            break;
          case iffeaturekeyword:
            iff = iffeaturestmt();
            label_209:
            while (true) {
              if (jj_2_170(2)) {
                ;
              } else {
                break label_209;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                                jjtn000.addIfFeature(iff);
            break;
          case defaultkeyword:
            d = defaultstmt();
            label_210:
            while (true) {
              if (jj_2_171(2)) {
                ;
              } else {
                break label_210;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                jjtn000.setDefault(d);
            break;
          case configkeyword:
            cf = configstmt();
            label_211:
            while (true) {
              if (jj_2_172(2)) {
                ;
              } else {
                break label_211;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                        jjtn000.setConfig(cf);
            break;
          case mandatorykeyword:
            m = mandatorystmt();
            label_212:
            while (true) {
              if (jj_2_173(2)) {
                ;
              } else {
                break label_212;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                jjtn000.setMandatory(m);
            break;
          case statuskeyword:
            s = statusstmt();
            label_213:
            while (true) {
              if (jj_2_174(2)) {
                ;
              } else {
                break label_213;
              }
              un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            de = descriptionstmt();
            label_214:
            while (true) {
              if (jj_2_175(2)) {
                ;
              } else {
                break label_214;
              }
              un = unknownstatement();
                                                                          jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(de);
            break;
          case referencekeyword:
            r = referencestmt();
            label_215:
            while (true) {
              if (jj_2_176(2)) {
                ;
              } else {
                break label_215;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          case anyxmlkeyword:
          case containerkeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
            sc = shortcasestmt();
            label_216:
            while (true) {
              if (jj_2_177(2)) {
                ;
              } else {
                break label_216;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                                        jjtn000.addShortCase(sc);
            break;
          case casekeyword:
            c = casestmt();
            label_217:
            while (true) {
              if (jj_2_178(2)) {
                ;
              } else {
                break label_217;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                                        jjtn000.addCase(c);
            break;
          default:
            jj_la1[141] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_ShortCase shortcasestmt() throws ParseException {
YANG_ShortCase d = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case containerkeyword:
      d = containerstmt();
      break;
    case leafkeyword:
      d = leafstmt();
      break;
    case leaflistkeyword:
      d = leafliststmt();
      break;
    case listkeyword:
      d = liststmt();
      break;
    case anyxmlkeyword:
      d = anyxmlstmt();
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Case casestmt() throws ParseException {
 /*@bgen(jjtree) Case */
YANG_Case jjtn000 = new YANG_Case(JJTCASE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token tcase;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_CaseDef c = null;
YANG_Unknown un = null;
    try {
      tcase = jj_consume_token(casekeyword);
      i = identifierstr();
                jjtn000.setLine(tcase.beginLine);
                jjtn000.setCol(tcase.beginColumn);
                jjtn000.setCase(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_218:
        while (true) {
          if (jj_2_179(2)) {
            ;
          } else {
            break label_218;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        label_219:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case containerkeyword:
          case descriptionkeyword:
          case iffeaturekeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case referencekeyword:
          case statuskeyword:
          case useskeyword:
          case whenkeyword:
            ;
            break;
          default:
            jj_la1[144] = jj_gen;
            break label_219;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case whenkeyword:
            w = whenstmt();
            label_220:
            while (true) {
              if (jj_2_180(2)) {
                ;
              } else {
                break label_220;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                                jjtn000.setWhen(w);
            break;
          case iffeaturekeyword:
            iff = iffeaturestmt();
            label_221:
            while (true) {
              if (jj_2_181(2)) {
                ;
              } else {
                break label_221;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                                jjtn000.addIfFeature(iff);
            break;
          case statuskeyword:
            s = statusstmt();
            label_222:
            while (true) {
              if (jj_2_182(2)) {
                ;
              } else {
                break label_222;
              }
              un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_223:
            while (true) {
              if (jj_2_183(2)) {
                ;
              } else {
                break label_223;
              }
              un = unknownstatement();
                                                                         jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_224:
            while (true) {
              if (jj_2_184(2)) {
                ;
              } else {
                break label_224;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          case anyxmlkeyword:
          case containerkeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case useskeyword:
            c = casedatadefstmt();
            label_225:
            while (true) {
              if (jj_2_185(2)) {
                ;
              } else {
                break label_225;
              }
              un = unknownstatement();
                                                                         jjtn000.addUnknown(un);
            }
                jjtn000.addCaseDef(c);
            break;
          default:
            jj_la1[145] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_AnyXml anyxmlstmt() throws ParseException {
 /*@bgen(jjtree) AnyXml */
YANG_AnyXml jjtn000 = new YANG_AnyXml(JJTANYXML);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token any;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Must mu = null;
YANG_Config c = null;
YANG_Mandatory m = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      any = jj_consume_token(anyxmlkeyword);
      i = identifierstr();
                jjtn000.setLine(any.beginLine);
                jjtn000.setCol(any.beginColumn);
                jjtn000.setAnyXml(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_226:
        while (true) {
          if (jj_2_186(2)) {
            ;
          } else {
            break label_226;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        label_227:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case configkeyword:
          case descriptionkeyword:
          case iffeaturekeyword:
          case mandatorykeyword:
          case mustkeyword:
          case referencekeyword:
          case statuskeyword:
          case whenkeyword:
            ;
            break;
          default:
            jj_la1[147] = jj_gen;
            break label_227;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case whenkeyword:
            w = whenstmt();
            label_228:
            while (true) {
              if (jj_2_187(2)) {
                ;
              } else {
                break label_228;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                                jjtn000.setWhen(w);
            break;
          case iffeaturekeyword:
            iff = iffeaturestmt();
            label_229:
            while (true) {
              if (jj_2_188(2)) {
                ;
              } else {
                break label_229;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                                jjtn000.addIfFeature(iff);
            break;
          case mustkeyword:
            mu = muststmt();
            label_230:
            while (true) {
              if (jj_2_189(2)) {
                ;
              } else {
                break label_230;
              }
              un = unknownstatement();
                                                                jjtn000.addUnknown(un);
            }
                                jjtn000.addMust(mu);
            break;
          case configkeyword:
            c = configstmt();
            label_231:
            while (true) {
              if (jj_2_190(2)) {
                ;
              } else {
                break label_231;
              }
              un = unknownstatement();
                                                                  jjtn000.addUnknown(un);
            }
                jjtn000.setConfig(c);
            break;
          case mandatorykeyword:
            m = mandatorystmt();
            label_232:
            while (true) {
              if (jj_2_191(2)) {
                ;
              } else {
                break label_232;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                jjtn000.setMandatory(m);
            break;
          case statuskeyword:
            s = statusstmt();
            label_233:
            while (true) {
              if (jj_2_192(2)) {
                ;
              } else {
                break label_233;
              }
              un = unknownstatement();
                                                                  jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_234:
            while (true) {
              if (jj_2_193(2)) {
                ;
              } else {
                break label_234;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_235:
            while (true) {
              if (jj_2_194(2)) {
                ;
              } else {
                break label_235;
              }
              un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          default:
            jj_la1[148] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Uses usesstmt() throws ParseException {
 /*@bgen(jjtree) Uses */
YANG_Uses jjtn000 = new YANG_Uses(JJTUSES);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token uses;
String i = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Refinement re = null;
YANG_UsesAugment u = null;
YANG_Unknown un = null;
    try {
      uses = jj_consume_token(useskeyword);
      i = identifierrefstr();
                jjtn000.setLine(uses.beginLine);
                jjtn000.setCol(uses.beginColumn);
                jjtn000.setUses(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_236:
        while (true) {
          if (jj_2_195(2)) {
            ;
          } else {
            break label_236;
          }
          un = unknownstatement();
                                                   jjtn000.addUnknown(un);
        }
        label_237:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case augmentkeyword:
          case descriptionkeyword:
          case iffeaturekeyword:
          case referencekeyword:
          case refinekeyword:
          case statuskeyword:
          case whenkeyword:
            ;
            break;
          default:
            jj_la1[150] = jj_gen;
            break label_237;
          }
          if (jj_2_203(3)) {
            w = whenstmt();
            label_238:
            while (true) {
              if (jj_2_196(2)) {
                ;
              } else {
                break label_238;
              }
              un = unknownstatement();
                                                                                           jjtn000.addUnknown(un);
            }
                                jjtn000.setWhen(w);
          } else if (jj_2_204(3)) {
            iff = iffeaturestmt();
            label_239:
            while (true) {
              if (jj_2_197(2)) {
                ;
              } else {
                break label_239;
              }
              un = unknownstatement();
                                                                                                  jjtn000.addUnknown(un);
            }
                                jjtn000.addIfFeature(iff);
          } else if (jj_2_205(3)) {
            s = statusstmt();
            label_240:
            while (true) {
              if (jj_2_198(2)) {
                ;
              } else {
                break label_240;
              }
              un = unknownstatement();
                                                                               jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(s);
          } else if (jj_2_206(3)) {
            d = descriptionstmt();
            label_241:
            while (true) {
              if (jj_2_199(2)) {
                ;
              } else {
                break label_241;
              }
              un = unknownstatement();
                                                                                    jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
          } else if (jj_2_207(3)) {
            r = referencestmt();
            label_242:
            while (true) {
              if (jj_2_200(2)) {
                ;
              } else {
                break label_242;
              }
              un = unknownstatement();
                                                                                  jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case refinekeyword:
              re = refinementstmt();
              label_243:
              while (true) {
                if (jj_2_201(2)) {
                  ;
                } else {
                  break label_243;
                }
                un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
              }
                jjtn000.addRefinement(re);
              break;
            case augmentkeyword:
              u = usesaugmentstmt();
              label_244:
              while (true) {
                if (jj_2_202(2)) {
                  ;
                } else {
                  break label_244;
                }
                un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
              }
                                jjtn000.addUsesAugment(u);
              break;
            default:
              jj_la1[151] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[152] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Refinement refinementstmt() throws ParseException {
 /*@bgen(jjtree) Refinement */
YANG_Refinement jjtn000 = new YANG_Refinement(JJTREFINEMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Refinement r = null;
Token t;
String i = null;
YANG_Unknown un = null;
    try {
      t = jj_consume_token(refinekeyword);
      i = identifierstr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_245:
        while (true) {
          if (jj_2_208(2)) {
            ;
          } else {
            break label_245;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        if (jj_2_209(3)) {
          r = refinecontainerstmt();
        } else if (jj_2_210(3)) {
          r = refineleafstmt();
        } else if (jj_2_211(3)) {
          r = refineleafliststmt();
        } else if (jj_2_212(3)) {
          r = refineliststmt();
        } else if (jj_2_213(3)) {
          r = refinechoicestmt();
        } else if (jj_2_214(3)) {
          r = refinecasestmt();
        } else if (jj_2_215(3)) {
          r = refineanyxmlstmt();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
                        jjtn000.setRefineNodeId(i);
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_RefineContainer refinecontainerstmt() throws ParseException {
 /*@bgen(jjtree) RefineContainer */
YANG_RefineContainer jjtn000 = new YANG_RefineContainer(JJTREFINECONTAINER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Must m = null;
YANG_Presence p = null;
YANG_Config c = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mustkeyword:
        m = muststmt();
        label_246:
        while (true) {
          if (jj_2_216(2)) {
            ;
          } else {
            break label_246;
          }
          un = unknownstatement();
                                                                jjtn000.addUnknown(un);
        }
                jjtn000.addMust(m);
        break;
      case presencekeyword:
        p = presencestmt();
        label_247:
        while (true) {
          if (jj_2_217(2)) {
            ;
          } else {
            break label_247;
          }
          un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
        }
                jjtn000.setPresence(p);
        break;
      case configkeyword:
        c = configstmt();
        label_248:
        while (true) {
          if (jj_2_218(2)) {
            ;
          } else {
            break label_248;
          }
          un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
        }
                jjtn000.setConfig(c);
        break;
      case descriptionkeyword:
        d = descriptionstmt();
        label_249:
        while (true) {
          if (jj_2_219(2)) {
            ;
          } else {
            break label_249;
          }
          un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
        }
                jjtn000.setDescription(d);
        break;
      case referencekeyword:
        r = referencestmt();
        label_250:
        while (true) {
          if (jj_2_220(2)) {
            ;
          } else {
            break label_250;
          }
          un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
        }
                jjtn000.setReference(r);
        break;
      default:
        jj_la1[154] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_RefineLeaf refineleafstmt() throws ParseException {
 /*@bgen(jjtree) RefineLeaf */
YANG_RefineLeaf jjtn000 = new YANG_RefineLeaf(JJTREFINELEAF);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);YANG_Must m = null;
YANG_Default d = null;
YANG_Config c = null;
YANG_Mandatory ma = null;
YANG_Description de = null;
YANG_Reference r = null;
YANG_Unknown un = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mustkeyword:
        m = muststmt();
        label_251:
        while (true) {
          if (jj_2_221(2)) {
            ;
          } else {
            break label_251;
          }
          un = unknownstatement();
                                                               jjtn000.addUnknown(un);
        }
                        jjtn000.addMust(m);
        break;
      case defaultkeyword:
        d = defaultstmt();
        label_252:
        while (true) {
          if (jj_2_222(2)) {
            ;
          } else {
            break label_252;
          }
          un = unknownstatement();
                                                                  jjtn000.addUnknown(un);
        }
                        jjtn000.setDefault(d);
        break;
      case configkeyword:
        c = configstmt();
        label_253:
        while (true) {
          if (jj_2_223(2)) {
            ;
          } else {
            break label_253;
          }
          un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
        }
                        jjtn000.setConfig(c);
        break;
      case mandatorykeyword:
        ma = mandatorystmt();
        label_254:
        while (true) {
          if (jj_2_224(2)) {
            ;
          } else {
            break label_254;
          }
          un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
        }
                        jjtn000.setMandatory(ma);
        break;
      case descriptionkeyword:
        de = descriptionstmt();
        label_255:
        while (true) {
          if (jj_2_225(2)) {
            ;
          } else {
            break label_255;
          }
          un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
        }
                        jjtn000.setDescription(de);
        break;
      case referencekeyword:
        r = referencestmt();
        label_256:
        while (true) {
          if (jj_2_226(2)) {
            ;
          } else {
            break label_256;
          }
          un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
        }
                        jjtn000.setReference(r);
        break;
      default:
        jj_la1[155] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_RefineLeafList refineleafliststmt() throws ParseException {
 /*@bgen(jjtree) RefineLeafList */
YANG_RefineLeafList jjtn000 = new YANG_RefineLeafList(JJTREFINELEAFLIST);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String i = null;
YANG_Must m = null;
YANG_Config c = null;
YANG_MinElement mi = null;
YANG_MaxElement ma = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mustkeyword:
        m = muststmt();
        label_257:
        while (true) {
          if (jj_2_227(2)) {
            ;
          } else {
            break label_257;
          }
          un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
        }
                jjtn000.addMust(m);
        break;
      case configkeyword:
        c = configstmt();
        label_258:
        while (true) {
          if (jj_2_228(2)) {
            ;
          } else {
            break label_258;
          }
          un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
        }
                jjtn000.setConfig(c);
        break;
      case minelementskeyword:
        mi = minelementsstmt();
        label_259:
        while (true) {
          if (jj_2_229(2)) {
            ;
          } else {
            break label_259;
          }
          un = unknownstatement();
                                                                         jjtn000.addUnknown(un);
        }
                jjtn000.setMinElement(mi);
        break;
      case maxelementskeyword:
        ma = maxelementsstmt();
        label_260:
        while (true) {
          if (jj_2_230(2)) {
            ;
          } else {
            break label_260;
          }
          un = unknownstatement();
                                                                         jjtn000.addUnknown(un);
        }
                jjtn000.setMaxElement(ma);
        break;
      case descriptionkeyword:
        d = descriptionstmt();
        label_261:
        while (true) {
          if (jj_2_231(2)) {
            ;
          } else {
            break label_261;
          }
          un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
        }
                jjtn000.setDescription(d);
        break;
      case referencekeyword:
        r = referencestmt();
        label_262:
        while (true) {
          if (jj_2_232(2)) {
            ;
          } else {
            break label_262;
          }
          un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
        }
                jjtn000.setReference(r);
        break;
      default:
        jj_la1[156] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_RefineList refineliststmt() throws ParseException {
 /*@bgen(jjtree) RefineList */
YANG_RefineList jjtn000 = new YANG_RefineList(JJTREFINELIST);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String i = null;
YANG_Must m = null;
YANG_Config c = null;
YANG_MinElement mi = null;
YANG_MaxElement ma = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mustkeyword:
        m = muststmt();
        label_263:
        while (true) {
          if (jj_2_233(2)) {
            ;
          } else {
            break label_263;
          }
          un = unknownstatement();
                                                                jjtn000.addUnknown(un);
        }
                jjtn000.addMust(m);
        break;
      case configkeyword:
        c = configstmt();
        label_264:
        while (true) {
          if (jj_2_234(2)) {
            ;
          } else {
            break label_264;
          }
          un = unknownstatement();
                                                                  jjtn000.addUnknown(un);
        }
                jjtn000.setConfig(c);
        break;
      case minelementskeyword:
        mi = minelementsstmt();
        label_265:
        while (true) {
          if (jj_2_235(2)) {
            ;
          } else {
            break label_265;
          }
          un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
        }
                jjtn000.setMinElement(mi);
        break;
      case maxelementskeyword:
        ma = maxelementsstmt();
        label_266:
        while (true) {
          if (jj_2_236(2)) {
            ;
          } else {
            break label_266;
          }
          un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
        }
                jjtn000.setMaxElement(ma);
        break;
      case descriptionkeyword:
        d = descriptionstmt();
        label_267:
        while (true) {
          if (jj_2_237(2)) {
            ;
          } else {
            break label_267;
          }
          un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
        }
                jjtn000.setDescription(d);
        break;
      case referencekeyword:
        r = referencestmt();
        label_268:
        while (true) {
          if (jj_2_238(2)) {
            ;
          } else {
            break label_268;
          }
          un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
        }
                jjtn000.setReference(r);
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_RefineChoice refinechoicestmt() throws ParseException {
 /*@bgen(jjtree) RefineChoice */
YANG_RefineChoice jjtn000 = new YANG_RefineChoice(JJTREFINECHOICE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String i = null;
YANG_Default d = null;
YANG_Config c = null;
YANG_Mandatory m = null;
YANG_Description de = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case defaultkeyword:
        d = defaultstmt();
        label_269:
        while (true) {
          if (jj_2_239(2)) {
            ;
          } else {
            break label_269;
          }
          un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
        }
                jjtn000.setDefault(d);
        break;
      case configkeyword:
        c = configstmt();
        label_270:
        while (true) {
          if (jj_2_240(2)) {
            ;
          } else {
            break label_270;
          }
          un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
        }
                jjtn000.setConfig(c);
        break;
      case mandatorykeyword:
        m = mandatorystmt();
        label_271:
        while (true) {
          if (jj_2_241(2)) {
            ;
          } else {
            break label_271;
          }
          un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
        }
                jjtn000.setMandatory(m);
        break;
      case descriptionkeyword:
        de = descriptionstmt();
        label_272:
        while (true) {
          if (jj_2_242(2)) {
            ;
          } else {
            break label_272;
          }
          un = unknownstatement();
                                                                         jjtn000.addUnknown(un);
        }
                jjtn000.setDescription(de);
        break;
      case referencekeyword:
        r = referencestmt();
        label_273:
        while (true) {
          if (jj_2_243(2)) {
            ;
          } else {
            break label_273;
          }
          un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
        }
                jjtn000.setReference(r);
        break;
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_RefineCase refinecasestmt() throws ParseException {
 /*@bgen(jjtree) RefineCase */
YANG_RefineCase jjtn000 = new YANG_RefineCase(JJTREFINECASE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String i = null;
YANG_Description d = null;
YANG_Reference r = null;YANG_Unknown un = null;
Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case descriptionkeyword:
        d = descriptionstmt();
        label_274:
        while (true) {
          if (jj_2_244(2)) {
            ;
          } else {
            break label_274;
          }
          un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
        }
                jjtn000.setDescription(d);
        break;
      case referencekeyword:
        r = referencestmt();
        label_275:
        while (true) {
          if (jj_2_245(2)) {
            ;
          } else {
            break label_275;
          }
          un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
        }
                jjtn000.setReference(r);
        break;
      default:
        jj_la1[159] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_RefineAnyXml refineanyxmlstmt() throws ParseException {
 /*@bgen(jjtree) RefineAnyXml */
YANG_RefineAnyXml jjtn000 = new YANG_RefineAnyXml(JJTREFINEANYXML);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String i = null;
YANG_Config c = null;
YANG_Mandatory m = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_Unknown un = null;
Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case configkeyword:
        c = configstmt();
        label_276:
        while (true) {
          if (jj_2_246(2)) {
            ;
          } else {
            break label_276;
          }
          un = unknownstatement();
                                                                  jjtn000.addUnknown(un);
        }
                jjtn000.setConfig(c);
        break;
      case mandatorykeyword:
        m = mandatorystmt();
        label_277:
        while (true) {
          if (jj_2_247(2)) {
            ;
          } else {
            break label_277;
          }
          un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
        }
                jjtn000.setMandatory(m);
        break;
      case descriptionkeyword:
        d = descriptionstmt();
        label_278:
        while (true) {
          if (jj_2_248(2)) {
            ;
          } else {
            break label_278;
          }
          un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
        }
                jjtn000.setDescription(d);
        break;
      case referencekeyword:
        r = referencestmt();
        label_279:
        while (true) {
          if (jj_2_249(2)) {
            ;
          } else {
            break label_279;
          }
          un = unknownstatement();
                                                                     jjtn000.addUnknown(un);
        }
                jjtn000.setReference(r);
        break;
      default:
        jj_la1[160] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_UsesAugment usesaugmentstmt() throws ParseException {
 /*@bgen(jjtree) UsesAugment */
YANG_UsesAugment jjtn000 = new YANG_UsesAugment(JJTUSESAUGMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token aug;
String ds = null;
String a = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_DataDef da = null;
YANG_Case c = null;
YANG_Unknown un = null;
    try {
      aug = jj_consume_token(augmentkeyword);
      a = usesaugmentargstr();
                jjtn000.setLine(aug.beginLine);
                jjtn000.setCol(aug.beginColumn);
                jjtn000.setUsesAugment(a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case whenkeyword:
        w = whenstmt();
        label_280:
        while (true) {
          if (jj_2_250(2)) {
            ;
          } else {
            break label_280;
          }
          un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
        }
                                jjtn000.setWhen(w);
        break;
      case iffeaturekeyword:
        iff = iffeaturestmt();
        label_281:
        while (true) {
          if (jj_2_251(2)) {
            ;
          } else {
            break label_281;
          }
          un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
        }
                                jjtn000.addIfFeature(iff);
        break;
      case statuskeyword:
        s = statusstmt();
        label_282:
        while (true) {
          if (jj_2_252(2)) {
            ;
          } else {
            break label_282;
          }
          un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
        }
                jjtn000.setStatus(s);
        break;
      case descriptionkeyword:
        d = descriptionstmt();
        label_283:
        while (true) {
          if (jj_2_253(2)) {
            ;
          } else {
            break label_283;
          }
          un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
        }
                jjtn000.setDescription(d);
        break;
      case referencekeyword:
        r = referencestmt();
        label_284:
        while (true) {
          if (jj_2_254(2)) {
            ;
          } else {
            break label_284;
          }
          un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
        }
                jjtn000.setReference(r);
        break;
      case anyxmlkeyword:
      case casekeyword:
      case choicekeyword:
      case containerkeyword:
      case leafkeyword:
      case leaflistkeyword:
      case listkeyword:
      case useskeyword:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case anyxmlkeyword:
        case choicekeyword:
        case containerkeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case useskeyword:
          da = datadefstmt();
          label_285:
          while (true) {
            if (jj_2_255(2)) {
              ;
            } else {
              break label_285;
            }
            un = unknownstatement();
                                                                           jjtn000.addUnknown(un);
          }
                        jjtn000.addDataDef(da);
          break;
        case casekeyword:
          c = casestmt();
          label_286:
          while (true) {
            if (jj_2_256(2)) {
              ;
            } else {
              break label_286;
            }
            un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
          }
                        jjtn000.addCase(c);
          break;
        default:
          jj_la1[161] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[162] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String usesaugmentargstr() throws ParseException {
String s = null;
    s = descendantschemanodeid();
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Augment augmentstmt() throws ParseException {
 /*@bgen(jjtree) Augment */
YANG_Augment jjtn000 = new YANG_Augment(JJTAUGMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token aug;
String a = null;
YANG_When w = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_DataDef da = null;
YANG_Case c = null;
YANG_Input i = null;
YANG_Output o = null;
YANG_Unknown un = null;
    try {
      aug = jj_consume_token(augmentkeyword);
      a = augmentargstr();
                jjtn000.setLine(aug.beginLine);
                jjtn000.setCol(aug.beginColumn);
                jjtn000.setAugment(a);
      jj_consume_token(104);
      label_287:
      while (true) {
        if (jj_2_257(2)) {
          ;
        } else {
          break label_287;
        }
        un = unknownstatement();
                                                   jjtn000.addUnknown(un);
      }
      label_288:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case anyxmlkeyword:
        case casekeyword:
        case choicekeyword:
        case containerkeyword:
        case descriptionkeyword:
        case iffeaturekeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case referencekeyword:
        case statuskeyword:
        case useskeyword:
        case whenkeyword:
          ;
          break;
        default:
          jj_la1[163] = jj_gen;
          break label_288;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case whenkeyword:
          w = whenstmt();
          label_289:
          while (true) {
            if (jj_2_258(2)) {
              ;
            } else {
              break label_289;
            }
            un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
          }
                                jjtn000.setWhen(w);
          break;
        case iffeaturekeyword:
          iff = iffeaturestmt();
          label_290:
          while (true) {
            if (jj_2_259(2)) {
              ;
            } else {
              break label_290;
            }
            un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
          }
                                jjtn000.addIfFeature(iff);
          break;
        case statuskeyword:
          s = statusstmt();
          label_291:
          while (true) {
            if (jj_2_260(2)) {
              ;
            } else {
              break label_291;
            }
            un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
          }
                jjtn000.setStatus(s);
          break;
        case descriptionkeyword:
          d = descriptionstmt();
          label_292:
          while (true) {
            if (jj_2_261(2)) {
              ;
            } else {
              break label_292;
            }
            un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
          }
                jjtn000.setDescription(d);
          break;
        case referencekeyword:
          r = referencestmt();
          label_293:
          while (true) {
            if (jj_2_262(2)) {
              ;
            } else {
              break label_293;
            }
            un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
          }
                jjtn000.setReference(r);
          break;
        case anyxmlkeyword:
        case casekeyword:
        case choicekeyword:
        case containerkeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case useskeyword:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case choicekeyword:
          case containerkeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case useskeyword:
            da = datadefstmt();
            label_294:
            while (true) {
              if (jj_2_263(2)) {
                ;
              } else {
                break label_294;
              }
              un = unknownstatement();
                                                                           jjtn000.addUnknown(un);
            }
                        jjtn000.addDataDef(da);
            break;
          case casekeyword:
            c = casestmt();
            label_295:
            while (true) {
              if (jj_2_264(2)) {
                ;
              } else {
                break label_295;
              }
              un = unknownstatement();
                                                                       jjtn000.addUnknown(un);
            }
                        jjtn000.addCase(c);
            break;
          default:
            jj_la1[164] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[165] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String augmentargstr() throws ParseException {
        String a = null;
    a = schemanodeid();
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Unknown unknownstatement() throws ParseException {
 /*@bgen(jjtree) Unknown */
YANG_Unknown jjtn000 = new YANG_Unknown(JJTUNKNOWN);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String p = null;
String kw = null;
String str = null;
Token i,j,l;
YANG_Unknown unknown = null;
    try {
      p = prefix();
      l = jj_consume_token(107);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        i = jj_consume_token(IDENTIFIER);
                                        jjtn000.setExtension(i.image);
                                        jjtn000.setLine(i.beginLine);
                                        jjtn000.setCol(i.beginColumn);
        break;
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
        kw = anykeyword();
                                        jjtn000.setExtension(kw);
                                        jjtn000.setLine(l.beginLine);
                                        jjtn000.setCol(l.beginColumn);
        break;
      default:
        jj_la1[166] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        str = string();
                                        jjtn000.setArgument(str);
        break;
      default:
        jj_la1[167] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_296:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[168] = jj_gen;
            break label_296;
          }
          unknown = unknownstatement();
                                                        jjtn000.addUnknown(unknown);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[169] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                        jjtn000.setPrefix(p);
                                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_When whenstmt() throws ParseException {
 /*@bgen(jjtree) When */
YANG_When jjtn000 = new YANG_When(JJTWHEN);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token when;
String w = null;
YANG_Unknown un = null;
    try {
      when = jj_consume_token(whenkeyword);
      w = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_297:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case argumentkeyword:
          case augmentkeyword:
          case basekeyword:
          case belongstokeyword:
          case bitkeyword:
          case casekeyword:
          case choicekeyword:
          case configkeyword:
          case contactkeyword:
          case containerkeyword:
          case defaultkeyword:
          case descriptionkeyword:
          case enumkeyword:
          case errorapptagkeyword:
          case errormessagekeyword:
          case extensionkeyword:
          case deviationkeyword:
          case deviatekeyword:
          case featurekeyword:
          case fractiondigitkeyword:
          case groupingkeyword:
          case identitykeyword:
          case iffeaturekeyword:
          case importkeyword:
          case includekeyword:
          case inputkeyword:
          case keykeyword:
          case leafkeyword:
          case leaflistkeyword:
          case lengthkeyword:
          case listkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case modulekeyword:
          case mustkeyword:
          case namespacekeyword:
          case notificationkeyword:
          case orderedbykeyword:
          case organizationkeyword:
          case outputkeyword:
          case pathkeyword:
          case patternkeyword:
          case positionkeyword:
          case prefixkeyword:
          case presencekeyword:
          case rangekeyword:
          case referencekeyword:
          case refinekeyword:
          case requireinstancekeyword:
          case revisionkeyword:
          case rpckeyword:
          case statuskeyword:
          case submodulekeyword:
          case typekeyword:
          case typedefkeyword:
          case uniquekeyword:
          case unitskeyword:
          case useskeyword:
          case valuekeyword:
          case whenkeyword:
          case yangversionkeyword:
          case yinelementkeyword:
          case addkeyword:
          case currentkeyword:
          case deprecatedkeyword:
          case falsekeyword:
          case minkeyword:
          case maxkeyword:
          case nankeyword:
          case neginfkeyword:
          case notsupportedkeyword:
          case obsoletekeyword:
          case posinfkeyword:
          case replacekeyword:
          case systemkeyword:
          case truekeyword:
          case unboundedkeyword:
          case userkeyword:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[170] = jj_gen;
            break label_297;
          }
          un = unknownstatement();
                                             jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                jjtn000.setLine(when.beginLine);
                jjtn000.setCol(when.beginColumn);
                jjtn000.setWhen(w);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Rpc rpcstmt() throws ParseException {
 /*@bgen(jjtree) Rpc */
YANG_Rpc jjtn000 = new YANG_Rpc(JJTRPC);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token to;
String i = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_Input in = null;
YANG_Output o = null;
YANG_Unknown un = null;
    try {
      to = jj_consume_token(rpckeyword);
      i = identifierstr();
                jjtn000.setLine(to.beginLine);
                jjtn000.setCol(to.beginColumn);
                jjtn000.setRpc(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_298:
        while (true) {
          if (jj_2_265(2)) {
            ;
          } else {
            break label_298;
          }
          un = unknownstatement();
                                                    jjtn000.addUnknown(un);
        }
        label_299:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case descriptionkeyword:
          case groupingkeyword:
          case iffeaturekeyword:
          case inputkeyword:
          case outputkeyword:
          case referencekeyword:
          case statuskeyword:
          case typedefkeyword:
            ;
            break;
          default:
            jj_la1[172] = jj_gen;
            break label_299;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case iffeaturekeyword:
            iff = iffeaturestmt();
            label_300:
            while (true) {
              if (jj_2_266(2)) {
                ;
              } else {
                break label_300;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                                jjtn000.addIfFeature(iff);
            break;
          case statuskeyword:
            s = statusstmt();
            label_301:
            while (true) {
              if (jj_2_267(2)) {
                ;
              } else {
                break label_301;
              }
              un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_302:
            while (true) {
              if (jj_2_268(2)) {
                ;
              } else {
                break label_302;
              }
              un = unknownstatement();
                                                                        jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_303:
            while (true) {
              if (jj_2_269(2)) {
                ;
              } else {
                break label_303;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          case groupingkeyword:
          case typedefkeyword:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case typedefkeyword:
              t = typedefstmt();
                        jjtn000.addTypeDef(t);
              break;
            case groupingkeyword:
              g = groupingstmt();
                        jjtn000.addGrouping((YANG_Grouping)g);
              break;
            default:
              jj_la1[173] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_304:
            while (true) {
              if (jj_2_270(2)) {
                ;
              } else {
                break label_304;
              }
              un = unknownstatement();
                                                    jjtn000.addUnknown(un);
            }
            break;
          case inputkeyword:
            in = inputstmt();
            label_305:
            while (true) {
              if (jj_2_271(2)) {
                ;
              } else {
                break label_305;
              }
              un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
            }
                jjtn000.setInput(in);
            break;
          case outputkeyword:
            o = outputstmt();
            label_306:
            while (true) {
              if (jj_2_272(2)) {
                ;
              } else {
                break label_306;
              }
              un = unknownstatement();
                                                                   jjtn000.addUnknown(un);
            }
                jjtn000.setOutput(o);
            break;
          default:
            jj_la1[174] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[175] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Input inputstmt() throws ParseException {
 /*@bgen(jjtree) Input */
YANG_Input jjtn000 = new YANG_Input(JJTINPUT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token to;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef d = null;
YANG_Unknown un = null;
    try {
      to = jj_consume_token(inputkeyword);
                jjtn000.setLine(to.beginLine);
                jjtn000.setCol(to.beginColumn);
      jj_consume_token(104);
      label_307:
      while (true) {
        if (jj_2_273(2)) {
          ;
        } else {
          break label_307;
        }
        un = unknownstatement();
                                                   jjtn000.addUnknown(un);
      }
      label_308:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case anyxmlkeyword:
        case choicekeyword:
        case containerkeyword:
        case groupingkeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case typedefkeyword:
        case useskeyword:
          ;
          break;
        default:
          jj_la1[176] = jj_gen;
          break label_308;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case groupingkeyword:
        case typedefkeyword:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case typedefkeyword:
            t = typedefstmt();
                jjtn000.addTypeDef(t);
            break;
          case groupingkeyword:
            g = groupingstmt();
                jjtn000.addGrouping((YANG_Grouping)g);
            break;
          default:
            jj_la1[177] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_309:
          while (true) {
            if (jj_2_274(2)) {
              ;
            } else {
              break label_309;
            }
            un = unknownstatement();
                                                   jjtn000.addUnknown(un);
          }
          break;
        case anyxmlkeyword:
        case choicekeyword:
        case containerkeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case useskeyword:
          label_310:
          while (true) {
            d = datadefstmt();
            label_311:
            while (true) {
              if (jj_2_275(2)) {
                ;
              } else {
                break label_311;
              }
              un = unknownstatement();
                                                                                jjtn000.addUnknown(un);
            }
                jjtn000.addDataDef(d);
            if (jj_2_276(2)) {
              ;
            } else {
              break label_310;
            }
          }
          break;
        default:
          jj_la1[178] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Output outputstmt() throws ParseException {
 /*@bgen(jjtree) Output */
YANG_Output jjtn000 = new YANG_Output(JJTOUTPUT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token to;
String i = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef d = null;
YANG_Unknown un = null;
    try {
      to = jj_consume_token(outputkeyword);
                jjtn000.setLine(to.beginLine);
                jjtn000.setCol(to.beginColumn);
      jj_consume_token(104);
      label_312:
      while (true) {
        if (jj_2_277(2)) {
          ;
        } else {
          break label_312;
        }
        un = unknownstatement();
                                                   jjtn000.addUnknown(un);
      }
      label_313:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case anyxmlkeyword:
        case choicekeyword:
        case containerkeyword:
        case groupingkeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case typedefkeyword:
        case useskeyword:
          ;
          break;
        default:
          jj_la1[179] = jj_gen;
          break label_313;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case groupingkeyword:
        case typedefkeyword:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case typedefkeyword:
            t = typedefstmt();
                jjtn000.addTypeDef(t);
            break;
          case groupingkeyword:
            g = groupingstmt();
                jjtn000.addGrouping((YANG_Grouping)g);
            break;
          default:
            jj_la1[180] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_314:
          while (true) {
            if (jj_2_278(2)) {
              ;
            } else {
              break label_314;
            }
            un = unknownstatement();
                                                  jjtn000.addUnknown(un);
          }
          break;
        case anyxmlkeyword:
        case choicekeyword:
        case containerkeyword:
        case leafkeyword:
        case leaflistkeyword:
        case listkeyword:
        case useskeyword:
          label_315:
          while (true) {
            d = datadefstmt();
            label_316:
            while (true) {
              if (jj_2_279(2)) {
                ;
              } else {
                break label_316;
              }
              un = unknownstatement();
                                                                                jjtn000.addUnknown(un);
            }
            if (jj_2_280(2)) {
              ;
            } else {
              break label_315;
            }
          }
                jjtn000.addDataDef(d);
          break;
        default:
          jj_la1[181] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Notification notificationstmt() throws ParseException {
 /*@bgen(jjtree) Notification */
YANG_Notification jjtn000 = new YANG_Notification(JJTNOTIFICATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token to;
String i = null;
YANG_IfFeature iff = null;
YANG_Status s = null;
YANG_Description d = null;
YANG_Reference r = null;
YANG_TypeDef t = null;
YANG_Body g = null;
YANG_DataDef da = null;
YANG_Unknown un = null;
    try {
      to = jj_consume_token(notificationkeyword);
      i = identifierstr();
                jjtn000.setLine(to.beginLine);
                jjtn000.setCol(to.beginColumn);
                jjtn000.setNotification(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_317:
        while (true) {
          if (jj_2_281(2)) {
            ;
          } else {
            break label_317;
          }
          un = unknownstatement();
                                                   jjtn000.addUnknown(un);
        }
        label_318:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case anyxmlkeyword:
          case choicekeyword:
          case containerkeyword:
          case descriptionkeyword:
          case groupingkeyword:
          case iffeaturekeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case referencekeyword:
          case statuskeyword:
          case typedefkeyword:
          case useskeyword:
            ;
            break;
          default:
            jj_la1[182] = jj_gen;
            break label_318;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case iffeaturekeyword:
            iff = iffeaturestmt();
            label_319:
            while (true) {
              if (jj_2_282(2)) {
                ;
              } else {
                break label_319;
              }
              un = unknownstatement();
                                                                             jjtn000.addUnknown(un);
            }
                                jjtn000.addIfFeature(iff);
            break;
          case statuskeyword:
            s = statusstmt();
            label_320:
            while (true) {
              if (jj_2_283(2)) {
                ;
              } else {
                break label_320;
              }
              un = unknownstatement();
                                                                 jjtn000.addUnknown(un);
            }
                jjtn000.setStatus(s);
            break;
          case descriptionkeyword:
            d = descriptionstmt();
            label_321:
            while (true) {
              if (jj_2_284(2)) {
                ;
              } else {
                break label_321;
              }
              un = unknownstatement();
                                                                      jjtn000.addUnknown(un);
            }
                jjtn000.setDescription(d);
            break;
          case referencekeyword:
            r = referencestmt();
            label_322:
            while (true) {
              if (jj_2_285(2)) {
                ;
              } else {
                break label_322;
              }
              un = unknownstatement();
                                                                    jjtn000.addUnknown(un);
            }
                jjtn000.setReference(r);
            break;
          case groupingkeyword:
          case typedefkeyword:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case typedefkeyword:
              t = typedefstmt();
                jjtn000.addTypeDef(t);
              break;
            case groupingkeyword:
              g = groupingstmt();
                jjtn000.addGrouping((YANG_Grouping)g);
              break;
            default:
              jj_la1[183] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            label_323:
            while (true) {
              if (jj_2_286(2)) {
                ;
              } else {
                break label_323;
              }
              un = unknownstatement();
                                                   jjtn000.addUnknown(un);
            }
            break;
          case anyxmlkeyword:
          case choicekeyword:
          case containerkeyword:
          case leafkeyword:
          case leaflistkeyword:
          case listkeyword:
          case useskeyword:
            label_324:
            while (true) {
              da = datadefstmt();
              label_325:
              while (true) {
                if (jj_2_287(2)) {
                  ;
                } else {
                  break label_325;
                }
                un = unknownstatement();
                                                                                 jjtn000.addUnknown(un);
              }
              if (jj_2_288(2)) {
                ;
              } else {
                break label_324;
              }
            }
                jjtn000.addDataDef(da);
            break;
          default:
            jj_la1[184] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[185] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_Deviation deviationstmt() throws ParseException {
 /*@bgen(jjtree) Deviation */
        YANG_Deviation jjtn000 = new YANG_Deviation(JJTDEVIATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String dev = null;
        YANG_Description d = null;
        YANG_Reference r = null;
        YANG_DeviateNotSupported dns = null;
        YANG_DeviateAdd da = null;
        YANG_DeviateReplace dr = null;
        YANG_DeviateDelete dd = null;
        YANG_Unknown un = null;
    try {
      t = jj_consume_token(deviationkeyword);
      dev = absoluteschemanodeid();
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
                        jjtn000.setDeviation(dev);
      jj_consume_token(104);
      label_326:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case descriptionkeyword:
        case deviatekeyword:
        case referencekeyword:
          ;
          break;
        default:
          jj_la1[186] = jj_gen;
          break label_326;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case descriptionkeyword:
          d = descriptionstmt();
                                        jjtn000.setDescription(d);
          break;
        case referencekeyword:
          r = referencestmt();
                                        jjtn000.setReference(r);
          break;
        default:
          jj_la1[187] = jj_gen;
          if (jj_2_289(2)) {
            dns = deviatenotsupportedstmt();
                                        jjtn000.setDeviateNotSupported(dns);
          } else if (jj_2_290(2)) {
            da = deviateaddstmt();
                                        jjtn000.addDeviateAdd(da);
          } else if (jj_2_291(2)) {
            dr = deviatereplacestmt();
                                        jjtn000.addDeviateReplace(dr);
          } else if (jj_2_292(2)) {
            dd = deviatedeletestmt();
                                        jjtn000.addDeviateDelete(dd);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(105);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_DeviateNotSupported deviatenotsupportedstmt() throws ParseException {
 /*@bgen(jjtree) DeviateNotSupported */
        YANG_DeviateNotSupported jjtn000 = new YANG_DeviateNotSupported(JJTDEVIATENOTSUPPORTED);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t,u;
        YANG_Unknown un = null;
    try {
      t = jj_consume_token(deviatekeyword);
      u = jj_consume_token(notsupportedkeyword);
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_327:
        while (true) {
          if (jj_2_293(2)) {
            ;
          } else {
            break label_327;
          }
          un = unknownstatement();
                                                               jjtn000.addUnknown(un);
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[188] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_DeviateAdd deviateaddstmt() throws ParseException {
 /*@bgen(jjtree) DeviateAdd */
        YANG_DeviateAdd jjtn000 = new YANG_DeviateAdd(JJTDEVIATEADD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        YANG_Units u = null;
        YANG_Must m = null;
        YANG_Unique uq = null;
        YANG_Default d = null;
        YANG_Config c = null;
        YANG_Mandatory ma = null;
        YANG_MinElement min = null;
        YANG_MaxElement max = null;
        YANG_Unknown un = null;
    try {
      t = jj_consume_token(deviatekeyword);
      jj_consume_token(addkeyword);
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_328:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case configkeyword:
          case defaultkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case mustkeyword:
          case uniquekeyword:
          case unitskeyword:
            ;
            break;
          default:
            jj_la1[189] = jj_gen;
            break label_328;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case unitskeyword:
            u = unitsstmt();
                                                        jjtn000.setUnits(u);
            break;
          case mustkeyword:
            m = muststmt();
                                                        jjtn000.addMust(m);
            break;
          case uniquekeyword:
            uq = uniquestmt();
                                                        jjtn000.addUnique(uq);
            break;
          case defaultkeyword:
            d = defaultstmt();
                                                        jjtn000.setDefault(d);
            break;
          case configkeyword:
            c = configstmt();
                                                        jjtn000.setConfig(c);
            break;
          case mandatorykeyword:
            ma = mandatorystmt();
                                                        jjtn000.setMandatory(ma);
            break;
          case minelementskeyword:
            min = minelementsstmt();
                                                        jjtn000.setMinElement(min);
            break;
          case maxelementskeyword:
            max = maxelementsstmt();
                                                        jjtn000.setMaxElement(max);
            break;
          default:
            jj_la1[190] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[191] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_DeviateDelete deviatedeletestmt() throws ParseException {
 /*@bgen(jjtree) DeviateDelete */
        YANG_DeviateDelete jjtn000 = new YANG_DeviateDelete(JJTDEVIATEDELETE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        YANG_Units u = null;
        YANG_Must m = null;
        YANG_Unique uq = null;
        YANG_Default d = null;
        YANG_Unknown un = null;
    try {
      t = jj_consume_token(deviatekeyword);
      jj_consume_token(deletekeyword);
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_329:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case defaultkeyword:
          case mustkeyword:
          case uniquekeyword:
          case unitskeyword:
            ;
            break;
          default:
            jj_la1[192] = jj_gen;
            break label_329;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case unitskeyword:
            u = unitsstmt();
                                                        jjtn000.setUnits(u);
            break;
          case mustkeyword:
            m = muststmt();
                                                        jjtn000.addMust(m);
            break;
          case uniquekeyword:
            uq = uniquestmt();
                                                        jjtn000.addUnique(uq);
            break;
          case defaultkeyword:
            d = defaultstmt();
                                                        jjtn000.setDefault(d);
            break;
          default:
            jj_la1[193] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[194] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public YANG_DeviateReplace deviatereplacestmt() throws ParseException {
 /*@bgen(jjtree) DeviateReplace */
        YANG_DeviateReplace jjtn000 = new YANG_DeviateReplace(JJTDEVIATEREPLACE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        YANG_Units u = null;
        YANG_Type tp = null;
        YANG_Default d = null;
        YANG_Config c = null;
        YANG_Mandatory ma = null;
        YANG_MinElement min = null;
        YANG_MaxElement max = null;
        YANG_Unknown un = null;
    try {
      t = jj_consume_token(deviatekeyword);
      jj_consume_token(replacekeyword);
                        jjtn000.setLine(t.beginLine);
                        jjtn000.setCol(t.beginColumn);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        break;
      case 104:
        jj_consume_token(104);
        label_330:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case configkeyword:
          case defaultkeyword:
          case mandatorykeyword:
          case maxelementskeyword:
          case minelementskeyword:
          case typekeyword:
          case unitskeyword:
            ;
            break;
          default:
            jj_la1[195] = jj_gen;
            break label_330;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case typekeyword:
            tp = typestmt();
                                                        jjtn000.setType(tp);
            break;
          case unitskeyword:
            u = unitsstmt();
                                                        jjtn000.setUnits(u);
            break;
          case defaultkeyword:
            d = defaultstmt();
                                                        jjtn000.setDefault(d);
            break;
          case configkeyword:
            c = configstmt();
                                                        jjtn000.setConfig(c);
            break;
          case mandatorykeyword:
            ma = mandatorystmt();
                                                        jjtn000.setMandatory(ma);
            break;
          case minelementskeyword:
            min = minelementsstmt();
                                                        jjtn000.setMinElement(min);
            break;
          case maxelementskeyword:
            max = maxelementsstmt();
                                                        jjtn000.setMaxElement(max);
            break;
          default:
            jj_la1[196] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(105);
        break;
      default:
        jj_la1[197] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

// Ranges
  static final public String rangeexprstr() throws ParseException {
String r = null;
    r = string();
                {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

// Lengths
  static final public String lengthexprstr() throws ParseException {
String l = null;
    l = string();
                {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

// Date
  static final public String dateexprstr() throws ParseException {
 String d = null;
    //< a string which matches the rule
            //   dateexpr >
            d = dateexpr();
                {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public String dateexpr() throws ParseException {
 String d = null;
Token a, b,c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
      a = jj_consume_token(DATE);
                {if (true) return a.image;}
      break;
    case DECVALUE:
    case NEGDECVALUE:
    case STRING:
    case FLOAT:
    case anyxmlkeyword:
    case argumentkeyword:
    case augmentkeyword:
    case basekeyword:
    case belongstokeyword:
    case bitkeyword:
    case casekeyword:
    case choicekeyword:
    case configkeyword:
    case contactkeyword:
    case containerkeyword:
    case defaultkeyword:
    case descriptionkeyword:
    case enumkeyword:
    case errorapptagkeyword:
    case errormessagekeyword:
    case extensionkeyword:
    case deviationkeyword:
    case deviatekeyword:
    case featurekeyword:
    case fractiondigitkeyword:
    case groupingkeyword:
    case identitykeyword:
    case iffeaturekeyword:
    case importkeyword:
    case includekeyword:
    case inputkeyword:
    case keykeyword:
    case leafkeyword:
    case leaflistkeyword:
    case lengthkeyword:
    case listkeyword:
    case mandatorykeyword:
    case maxelementskeyword:
    case minelementskeyword:
    case modulekeyword:
    case mustkeyword:
    case namespacekeyword:
    case notificationkeyword:
    case orderedbykeyword:
    case organizationkeyword:
    case outputkeyword:
    case pathkeyword:
    case patternkeyword:
    case positionkeyword:
    case prefixkeyword:
    case presencekeyword:
    case rangekeyword:
    case referencekeyword:
    case refinekeyword:
    case requireinstancekeyword:
    case revisionkeyword:
    case rpckeyword:
    case statuskeyword:
    case submodulekeyword:
    case typekeyword:
    case typedefkeyword:
    case uniquekeyword:
    case unitskeyword:
    case useskeyword:
    case valuekeyword:
    case whenkeyword:
    case yangversionkeyword:
    case yinelementkeyword:
    case addkeyword:
    case currentkeyword:
    case deprecatedkeyword:
    case falsekeyword:
    case minkeyword:
    case maxkeyword:
    case nankeyword:
    case neginfkeyword:
    case notsupportedkeyword:
    case obsoletekeyword:
    case posinfkeyword:
    case replacekeyword:
    case systemkeyword:
    case truekeyword:
    case unboundedkeyword:
    case userkeyword:
    case IDENTIFIER:
      d = string();
                {if (true) return d;}
      break;
    default:
      jj_la1[198] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Schema Node Identifiers
  static final public String schemanodeid() throws ParseException {
String s = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 108:
      s = absoluteschemanodeid();
                {if (true) return s;}
      break;
    case anyxmlkeyword:
    case argumentkeyword:
    case augmentkeyword:
    case basekeyword:
    case belongstokeyword:
    case bitkeyword:
    case casekeyword:
    case choicekeyword:
    case configkeyword:
    case contactkeyword:
    case containerkeyword:
    case defaultkeyword:
    case descriptionkeyword:
    case enumkeyword:
    case errorapptagkeyword:
    case errormessagekeyword:
    case extensionkeyword:
    case deviationkeyword:
    case deviatekeyword:
    case featurekeyword:
    case fractiondigitkeyword:
    case groupingkeyword:
    case identitykeyword:
    case iffeaturekeyword:
    case importkeyword:
    case includekeyword:
    case inputkeyword:
    case keykeyword:
    case leafkeyword:
    case leaflistkeyword:
    case lengthkeyword:
    case listkeyword:
    case mandatorykeyword:
    case maxelementskeyword:
    case minelementskeyword:
    case modulekeyword:
    case mustkeyword:
    case namespacekeyword:
    case notificationkeyword:
    case orderedbykeyword:
    case organizationkeyword:
    case outputkeyword:
    case pathkeyword:
    case patternkeyword:
    case positionkeyword:
    case prefixkeyword:
    case presencekeyword:
    case rangekeyword:
    case referencekeyword:
    case refinekeyword:
    case requireinstancekeyword:
    case revisionkeyword:
    case rpckeyword:
    case statuskeyword:
    case submodulekeyword:
    case typekeyword:
    case typedefkeyword:
    case uniquekeyword:
    case unitskeyword:
    case useskeyword:
    case valuekeyword:
    case whenkeyword:
    case yangversionkeyword:
    case yinelementkeyword:
    case addkeyword:
    case currentkeyword:
    case deprecatedkeyword:
    case falsekeyword:
    case minkeyword:
    case maxkeyword:
    case nankeyword:
    case neginfkeyword:
    case notsupportedkeyword:
    case obsoletekeyword:
    case posinfkeyword:
    case replacekeyword:
    case systemkeyword:
    case truekeyword:
    case unboundedkeyword:
    case userkeyword:
    case IDENTIFIER:
      s = descendantschemanodeid();
                {if (true) return s;}
      break;
    default:
      jj_la1[199] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String absoluteschemanodeid() throws ParseException {
String n = null,a = new String();
    label_331:
    while (true) {
      jj_consume_token(108);
      n = nodeidentifier();
                a += "/" + n;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 108:
        ;
        break;
      default:
        jj_la1[200] = jj_gen;
        break label_331;
      }
    }
                {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public String descendantschemanodeid() throws ParseException {
String d = null,a = null;
    d = nodeidentifier();
    a = absoluteschemanodeid();
                {if (true) return d + a;}
    throw new Error("Missing return statement in function");
  }

  static final public String nodeidentifier() throws ParseException {
Token t = null;
String p = null,n = new String(), m = null;
    if (jj_2_294(2)) {
      p = prefix();
      jj_consume_token(107);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case anyxmlkeyword:
    case argumentkeyword:
    case augmentkeyword:
    case basekeyword:
    case belongstokeyword:
    case bitkeyword:
    case casekeyword:
    case choicekeyword:
    case configkeyword:
    case contactkeyword:
    case containerkeyword:
    case defaultkeyword:
    case descriptionkeyword:
    case enumkeyword:
    case errorapptagkeyword:
    case errormessagekeyword:
    case extensionkeyword:
    case deviationkeyword:
    case deviatekeyword:
    case featurekeyword:
    case fractiondigitkeyword:
    case groupingkeyword:
    case identitykeyword:
    case iffeaturekeyword:
    case importkeyword:
    case includekeyword:
    case inputkeyword:
    case keykeyword:
    case leafkeyword:
    case leaflistkeyword:
    case lengthkeyword:
    case listkeyword:
    case mandatorykeyword:
    case maxelementskeyword:
    case minelementskeyword:
    case modulekeyword:
    case mustkeyword:
    case namespacekeyword:
    case notificationkeyword:
    case orderedbykeyword:
    case organizationkeyword:
    case outputkeyword:
    case pathkeyword:
    case patternkeyword:
    case positionkeyword:
    case prefixkeyword:
    case presencekeyword:
    case rangekeyword:
    case referencekeyword:
    case refinekeyword:
    case requireinstancekeyword:
    case revisionkeyword:
    case rpckeyword:
    case statuskeyword:
    case submodulekeyword:
    case typekeyword:
    case typedefkeyword:
    case uniquekeyword:
    case unitskeyword:
    case useskeyword:
    case valuekeyword:
    case whenkeyword:
    case yangversionkeyword:
    case yinelementkeyword:
    case addkeyword:
    case currentkeyword:
    case deprecatedkeyword:
    case falsekeyword:
    case minkeyword:
    case maxkeyword:
    case nankeyword:
    case neginfkeyword:
    case notsupportedkeyword:
    case obsoletekeyword:
    case posinfkeyword:
    case replacekeyword:
    case systemkeyword:
    case truekeyword:
    case unboundedkeyword:
    case userkeyword:
      m = anykeyword();
      break;
    default:
      jj_la1[201] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(p != null)
                        n += p + ":";
                if(m == null)
                   {if (true) return n + t.image;}
                else
                   {if (true) return n + m;}
    throw new Error("Missing return statement in function");
  }

// Instance Identifiers
  static final public void instanceidentifier() throws ParseException {
    label_332:
    while (true) {
      jj_consume_token(108);
      nodeidentifier();
      label_333:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 109:
          ;
          break;
        default:
          jj_la1[202] = jj_gen;
          break label_333;
        }
        predicate();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 108:
        ;
        break;
      default:
        jj_la1[203] = jj_gen;
        break label_332;
      }
    }
  }

  static final public void predicate() throws ParseException {
    jj_consume_token(109);
    if (jj_2_295(2)) {
      predicateexpr();
    } else if (jj_2_296(2)) {
      pos();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(110);
  }

  static final public String predicateexpr() throws ParseException {
String l = null,s = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case anyxmlkeyword:
    case argumentkeyword:
    case augmentkeyword:
    case basekeyword:
    case belongstokeyword:
    case bitkeyword:
    case casekeyword:
    case choicekeyword:
    case configkeyword:
    case contactkeyword:
    case containerkeyword:
    case defaultkeyword:
    case descriptionkeyword:
    case enumkeyword:
    case errorapptagkeyword:
    case errormessagekeyword:
    case extensionkeyword:
    case deviationkeyword:
    case deviatekeyword:
    case featurekeyword:
    case fractiondigitkeyword:
    case groupingkeyword:
    case identitykeyword:
    case iffeaturekeyword:
    case importkeyword:
    case includekeyword:
    case inputkeyword:
    case keykeyword:
    case leafkeyword:
    case leaflistkeyword:
    case lengthkeyword:
    case listkeyword:
    case mandatorykeyword:
    case maxelementskeyword:
    case minelementskeyword:
    case modulekeyword:
    case mustkeyword:
    case namespacekeyword:
    case notificationkeyword:
    case orderedbykeyword:
    case organizationkeyword:
    case outputkeyword:
    case pathkeyword:
    case patternkeyword:
    case positionkeyword:
    case prefixkeyword:
    case presencekeyword:
    case rangekeyword:
    case referencekeyword:
    case refinekeyword:
    case requireinstancekeyword:
    case revisionkeyword:
    case rpckeyword:
    case statuskeyword:
    case submodulekeyword:
    case typekeyword:
    case typedefkeyword:
    case uniquekeyword:
    case unitskeyword:
    case useskeyword:
    case valuekeyword:
    case whenkeyword:
    case yangversionkeyword:
    case yinelementkeyword:
    case addkeyword:
    case currentkeyword:
    case deprecatedkeyword:
    case falsekeyword:
    case minkeyword:
    case maxkeyword:
    case nankeyword:
    case neginfkeyword:
    case notsupportedkeyword:
    case obsoletekeyword:
    case posinfkeyword:
    case replacekeyword:
    case systemkeyword:
    case truekeyword:
    case unboundedkeyword:
    case userkeyword:
    case IDENTIFIER:
      l = nodeidentifier();
      break;
    case 111:
      jj_consume_token(111);
                                        l = ".";
      break;
    default:
      jj_la1[204] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(112);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQUOTE:
      jj_consume_token(DQUOTE);
      s = string();
      jj_consume_token(DQUOTE);
                                                        l += "=\"" + s + "\"";
      break;
    case SQUOTE:
      jj_consume_token(SQUOTE);
      string();
      jj_consume_token(SQUOTE);
                                                        l += "=\'" + s + "\'";
      break;
    default:
      jj_la1[205] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public String pos() throws ParseException {
String p = null;
    p = nonnegativeintegervalue();
                        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

// keyref path
  static final public String pathargstr() throws ParseException {
String p = null;
    if (jj_2_297(2)) {
      p = patharg();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        p = string();
        break;
      default:
        jj_la1[206] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public String patharg() throws ParseException {
String p = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 108:
      p = absolutepatharg();
      break;
    case DDOT:
    case anyxmlkeyword:
    case argumentkeyword:
    case augmentkeyword:
    case basekeyword:
    case belongstokeyword:
    case bitkeyword:
    case casekeyword:
    case choicekeyword:
    case configkeyword:
    case contactkeyword:
    case containerkeyword:
    case defaultkeyword:
    case descriptionkeyword:
    case enumkeyword:
    case errorapptagkeyword:
    case errormessagekeyword:
    case extensionkeyword:
    case deviationkeyword:
    case deviatekeyword:
    case featurekeyword:
    case fractiondigitkeyword:
    case groupingkeyword:
    case identitykeyword:
    case iffeaturekeyword:
    case importkeyword:
    case includekeyword:
    case inputkeyword:
    case keykeyword:
    case leafkeyword:
    case leaflistkeyword:
    case lengthkeyword:
    case listkeyword:
    case mandatorykeyword:
    case maxelementskeyword:
    case minelementskeyword:
    case modulekeyword:
    case mustkeyword:
    case namespacekeyword:
    case notificationkeyword:
    case orderedbykeyword:
    case organizationkeyword:
    case outputkeyword:
    case pathkeyword:
    case patternkeyword:
    case positionkeyword:
    case prefixkeyword:
    case presencekeyword:
    case rangekeyword:
    case referencekeyword:
    case refinekeyword:
    case requireinstancekeyword:
    case revisionkeyword:
    case rpckeyword:
    case statuskeyword:
    case submodulekeyword:
    case typekeyword:
    case typedefkeyword:
    case uniquekeyword:
    case unitskeyword:
    case useskeyword:
    case valuekeyword:
    case whenkeyword:
    case yangversionkeyword:
    case yinelementkeyword:
    case addkeyword:
    case currentkeyword:
    case deprecatedkeyword:
    case falsekeyword:
    case minkeyword:
    case maxkeyword:
    case nankeyword:
    case neginfkeyword:
    case notsupportedkeyword:
    case obsoletekeyword:
    case posinfkeyword:
    case replacekeyword:
    case systemkeyword:
    case truekeyword:
    case unboundedkeyword:
    case userkeyword:
    case IDENTIFIER:
      p = relativepatharg();
      break;
    default:
      jj_la1[207] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public String absolutepatharg() throws ParseException {
String p = null, n = null, ap = new String();
    label_334:
    while (true) {
      jj_consume_token(108);
                ap += "/";
      n = nodeidentifier();
                        ap += n;
      label_335:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 109:
          ;
          break;
        default:
          jj_la1[208] = jj_gen;
          break label_335;
        }
        p = pathpredicate();
                        ap += p;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 108:
        ;
        break;
      default:
        jj_la1[209] = jj_gen;
        break label_334;
      }
    }
                {if (true) return ap;}
    throw new Error("Missing return statement in function");
  }

  static final public String relativepatharg() throws ParseException {
String rp = new String(), d = null, r = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case anyxmlkeyword:
    case argumentkeyword:
    case augmentkeyword:
    case basekeyword:
    case belongstokeyword:
    case bitkeyword:
    case casekeyword:
    case choicekeyword:
    case configkeyword:
    case contactkeyword:
    case containerkeyword:
    case defaultkeyword:
    case descriptionkeyword:
    case enumkeyword:
    case errorapptagkeyword:
    case errormessagekeyword:
    case extensionkeyword:
    case deviationkeyword:
    case deviatekeyword:
    case featurekeyword:
    case fractiondigitkeyword:
    case groupingkeyword:
    case identitykeyword:
    case iffeaturekeyword:
    case importkeyword:
    case includekeyword:
    case inputkeyword:
    case keykeyword:
    case leafkeyword:
    case leaflistkeyword:
    case lengthkeyword:
    case listkeyword:
    case mandatorykeyword:
    case maxelementskeyword:
    case minelementskeyword:
    case modulekeyword:
    case mustkeyword:
    case namespacekeyword:
    case notificationkeyword:
    case orderedbykeyword:
    case organizationkeyword:
    case outputkeyword:
    case pathkeyword:
    case patternkeyword:
    case positionkeyword:
    case prefixkeyword:
    case presencekeyword:
    case rangekeyword:
    case referencekeyword:
    case refinekeyword:
    case requireinstancekeyword:
    case revisionkeyword:
    case rpckeyword:
    case statuskeyword:
    case submodulekeyword:
    case typekeyword:
    case typedefkeyword:
    case uniquekeyword:
    case unitskeyword:
    case useskeyword:
    case valuekeyword:
    case whenkeyword:
    case yangversionkeyword:
    case yinelementkeyword:
    case addkeyword:
    case currentkeyword:
    case deprecatedkeyword:
    case falsekeyword:
    case minkeyword:
    case maxkeyword:
    case nankeyword:
    case neginfkeyword:
    case notsupportedkeyword:
    case obsoletekeyword:
    case posinfkeyword:
    case replacekeyword:
    case systemkeyword:
    case truekeyword:
    case unboundedkeyword:
    case userkeyword:
    case IDENTIFIER:
      d = descendantpatharg();
                {if (true) return d;}
      break;
    case DDOT:
      jj_consume_token(DDOT);
      jj_consume_token(108);
                rp += "../";
      label_336:
      while (true) {
        if (jj_2_298(2)) {
          ;
        } else {
          break label_336;
        }
        r = relativepatharg();
                rp += r;
      }
                {if (true) return rp;}
      break;
    default:
      jj_la1[210] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String descendantpatharg() throws ParseException {
String n  = null, p = null,a = null,dp = new String();;
    n = nodeidentifier();
                dp += n;
    label_337:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 109:
        ;
        break;
      default:
        jj_la1[211] = jj_gen;
        break label_337;
      }
      p = pathpredicate();
                dp += p;
    }
    a = absolutepatharg();
                dp += a;
                {if (true) return dp;}
    throw new Error("Missing return statement in function");
  }

  static final public String pathpredicate() throws ParseException {
String p = null;
    jj_consume_token(109);
    p = pathequalityexpr();
    jj_consume_token(110);
                {if (true) return "[" + p + "]";}
    throw new Error("Missing return statement in function");
  }

  static final public String pathequalityexpr() throws ParseException {
String n = null, p = null;
    n = nodeidentifier();
    jj_consume_token(112);
    p = pathkeyexpr();
                {if (true) return n + "=" + p;}
    throw new Error("Missing return statement in function");
  }

  static final public String pathkeyexpr() throws ParseException {
String p = null;
    currentfunctioninvocation();
    jj_consume_token(108);
    p = relpathkeyexpr();
                {if (true) return "this/" + p;}
    throw new Error("Missing return statement in function");
  }

  static final public String relpathkeyexpr() throws ParseException {
String n = null, rp = new String();
    label_338:
    while (true) {
      jj_consume_token(DDOT);
      jj_consume_token(108);
                rp += "../";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DDOT:
        ;
        break;
      default:
        jj_la1[212] = jj_gen;
        break label_338;
      }
    }
    label_339:
    while (true) {
      if (jj_2_299(2)) {
        ;
      } else {
        break label_339;
      }
      n = nodeidentifier();
      jj_consume_token(108);
                rp += n + "/";
    }
    n = nodeidentifier();
                rp += n;
                {if (true) return rp;}
    throw new Error("Missing return statement in function");
  }

  static final public void currentfunctioninvocation() throws ParseException {
    jj_consume_token(currentkeyword);
    jj_consume_token(113);
    jj_consume_token(114);
  }

// Basic Rules
  static final public String prefixstr() throws ParseException {
 String s;
    //s = prefix()
            //|
            s = string();
         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String prefix() throws ParseException {
 Token t; String s = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                {if (true) return t.image;}
      break;
    case anyxmlkeyword:
    case argumentkeyword:
    case augmentkeyword:
    case basekeyword:
    case belongstokeyword:
    case bitkeyword:
    case casekeyword:
    case choicekeyword:
    case configkeyword:
    case contactkeyword:
    case containerkeyword:
    case defaultkeyword:
    case descriptionkeyword:
    case enumkeyword:
    case errorapptagkeyword:
    case errormessagekeyword:
    case extensionkeyword:
    case deviationkeyword:
    case deviatekeyword:
    case featurekeyword:
    case fractiondigitkeyword:
    case groupingkeyword:
    case identitykeyword:
    case iffeaturekeyword:
    case importkeyword:
    case includekeyword:
    case inputkeyword:
    case keykeyword:
    case leafkeyword:
    case leaflistkeyword:
    case lengthkeyword:
    case listkeyword:
    case mandatorykeyword:
    case maxelementskeyword:
    case minelementskeyword:
    case modulekeyword:
    case mustkeyword:
    case namespacekeyword:
    case notificationkeyword:
    case orderedbykeyword:
    case organizationkeyword:
    case outputkeyword:
    case pathkeyword:
    case patternkeyword:
    case positionkeyword:
    case prefixkeyword:
    case presencekeyword:
    case rangekeyword:
    case referencekeyword:
    case refinekeyword:
    case requireinstancekeyword:
    case revisionkeyword:
    case rpckeyword:
    case statuskeyword:
    case submodulekeyword:
    case typekeyword:
    case typedefkeyword:
    case uniquekeyword:
    case unitskeyword:
    case useskeyword:
    case valuekeyword:
    case whenkeyword:
    case yangversionkeyword:
    case yinelementkeyword:
    case addkeyword:
    case currentkeyword:
    case deprecatedkeyword:
    case falsekeyword:
    case minkeyword:
    case maxkeyword:
    case nankeyword:
    case neginfkeyword:
    case notsupportedkeyword:
    case obsoletekeyword:
    case posinfkeyword:
    case replacekeyword:
    case systemkeyword:
    case truekeyword:
    case unboundedkeyword:
    case userkeyword:
      s = anykeyword();
                {if (true) return s;}
      break;
    default:
      jj_la1[213] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String identifierstr() throws ParseException {
 Token t;
String s;
    // < a string which matches the rule;
                    //   identifier >
    
                    s = string();
                        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String anykeyword() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case anyxmlkeyword:
      t = jj_consume_token(anyxmlkeyword);
      break;
    case argumentkeyword:
      t = jj_consume_token(argumentkeyword);
      break;
    case augmentkeyword:
      t = jj_consume_token(augmentkeyword);
      break;
    case basekeyword:
      t = jj_consume_token(basekeyword);
      break;
    case belongstokeyword:
      t = jj_consume_token(belongstokeyword);
      break;
    case bitkeyword:
      t = jj_consume_token(bitkeyword);
      break;
    case casekeyword:
      t = jj_consume_token(casekeyword);
      break;
    case choicekeyword:
      t = jj_consume_token(choicekeyword);
      break;
    case configkeyword:
      t = jj_consume_token(configkeyword);
      break;
    case contactkeyword:
      t = jj_consume_token(contactkeyword);
      break;
    case containerkeyword:
      t = jj_consume_token(containerkeyword);
      break;
    case defaultkeyword:
      t = jj_consume_token(defaultkeyword);
      break;
    case descriptionkeyword:
      t = jj_consume_token(descriptionkeyword);
      break;
    case enumkeyword:
      t = jj_consume_token(enumkeyword);
      break;
    case errorapptagkeyword:
      t = jj_consume_token(errorapptagkeyword);
      break;
    case errormessagekeyword:
      t = jj_consume_token(errormessagekeyword);
      break;
    case extensionkeyword:
      t = jj_consume_token(extensionkeyword);
      break;
    case deviationkeyword:
      t = jj_consume_token(deviationkeyword);
      break;
    case deviatekeyword:
      t = jj_consume_token(deviatekeyword);
      break;
    case featurekeyword:
      t = jj_consume_token(featurekeyword);
      break;
    case fractiondigitkeyword:
      t = jj_consume_token(fractiondigitkeyword);
      break;
    case groupingkeyword:
      t = jj_consume_token(groupingkeyword);
      break;
    case identitykeyword:
      t = jj_consume_token(identitykeyword);
      break;
    case iffeaturekeyword:
      t = jj_consume_token(iffeaturekeyword);
      break;
    case importkeyword:
      t = jj_consume_token(importkeyword);
      break;
    case includekeyword:
      t = jj_consume_token(includekeyword);
      break;
    case inputkeyword:
      t = jj_consume_token(inputkeyword);
      break;
    case keykeyword:
      t = jj_consume_token(keykeyword);
      break;
    case leafkeyword:
      t = jj_consume_token(leafkeyword);
      break;
    case leaflistkeyword:
      t = jj_consume_token(leaflistkeyword);
      break;
    case lengthkeyword:
      t = jj_consume_token(lengthkeyword);
      break;
    case listkeyword:
      t = jj_consume_token(listkeyword);
      break;
    case mandatorykeyword:
      t = jj_consume_token(mandatorykeyword);
      break;
    case maxelementskeyword:
      t = jj_consume_token(maxelementskeyword);
      break;
    case minelementskeyword:
      t = jj_consume_token(minelementskeyword);
      break;
    case modulekeyword:
      t = jj_consume_token(modulekeyword);
      break;
    case mustkeyword:
      t = jj_consume_token(mustkeyword);
      break;
    case namespacekeyword:
      t = jj_consume_token(namespacekeyword);
      break;
    case notificationkeyword:
      t = jj_consume_token(notificationkeyword);
      break;
    case orderedbykeyword:
      t = jj_consume_token(orderedbykeyword);
      break;
    case organizationkeyword:
      t = jj_consume_token(organizationkeyword);
      break;
    case outputkeyword:
      t = jj_consume_token(outputkeyword);
      break;
    case pathkeyword:
      t = jj_consume_token(pathkeyword);
      break;
    case patternkeyword:
      t = jj_consume_token(patternkeyword);
      break;
    case positionkeyword:
      t = jj_consume_token(positionkeyword);
      break;
    case prefixkeyword:
      t = jj_consume_token(prefixkeyword);
      break;
    case presencekeyword:
      t = jj_consume_token(presencekeyword);
      break;
    case rangekeyword:
      t = jj_consume_token(rangekeyword);
      break;
    case referencekeyword:
      t = jj_consume_token(referencekeyword);
      break;
    case refinekeyword:
      t = jj_consume_token(refinekeyword);
      break;
    case requireinstancekeyword:
      t = jj_consume_token(requireinstancekeyword);
      break;
    case revisionkeyword:
      t = jj_consume_token(revisionkeyword);
      break;
    case rpckeyword:
      t = jj_consume_token(rpckeyword);
      break;
    case statuskeyword:
      t = jj_consume_token(statuskeyword);
      break;
    case submodulekeyword:
      t = jj_consume_token(submodulekeyword);
      break;
    case typekeyword:
      t = jj_consume_token(typekeyword);
      break;
    case typedefkeyword:
      t = jj_consume_token(typedefkeyword);
      break;
    case uniquekeyword:
      t = jj_consume_token(uniquekeyword);
      break;
    case unitskeyword:
      t = jj_consume_token(unitskeyword);
      break;
    case useskeyword:
      t = jj_consume_token(useskeyword);
      break;
    case valuekeyword:
      t = jj_consume_token(valuekeyword);
      break;
    case whenkeyword:
      t = jj_consume_token(whenkeyword);
      break;
    case yangversionkeyword:
      t = jj_consume_token(yangversionkeyword);
      break;
    case yinelementkeyword:
      t = jj_consume_token(yinelementkeyword);
      break;
    case addkeyword:
      t = jj_consume_token(addkeyword);
      break;
    case currentkeyword:
      t = jj_consume_token(currentkeyword);
      break;
    case deprecatedkeyword:
      t = jj_consume_token(deprecatedkeyword);
      break;
    case falsekeyword:
      t = jj_consume_token(falsekeyword);
      break;
    case maxkeyword:
      t = jj_consume_token(maxkeyword);
      break;
    case minkeyword:
      t = jj_consume_token(minkeyword);
      break;
    case nankeyword:
      t = jj_consume_token(nankeyword);
      break;
    case neginfkeyword:
      t = jj_consume_token(neginfkeyword);
      break;
    case notsupportedkeyword:
      t = jj_consume_token(notsupportedkeyword);
      break;
    case obsoletekeyword:
      t = jj_consume_token(obsoletekeyword);
      break;
    case posinfkeyword:
      t = jj_consume_token(posinfkeyword);
      break;
    case replacekeyword:
      t = jj_consume_token(replacekeyword);
      break;
    case systemkeyword:
      t = jj_consume_token(systemkeyword);
      break;
    case truekeyword:
      t = jj_consume_token(truekeyword);
      break;
    case unboundedkeyword:
      t = jj_consume_token(unboundedkeyword);
      break;
    case userkeyword:
      t = jj_consume_token(userkeyword);
      break;
    default:
      jj_la1[214] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String identifierrefstr() throws ParseException {
String i = null;
    if (jj_2_300(2)) {
      i = identifierref();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECVALUE:
      case NEGDECVALUE:
      case STRING:
      case FLOAT:
      case anyxmlkeyword:
      case argumentkeyword:
      case augmentkeyword:
      case basekeyword:
      case belongstokeyword:
      case bitkeyword:
      case casekeyword:
      case choicekeyword:
      case configkeyword:
      case contactkeyword:
      case containerkeyword:
      case defaultkeyword:
      case descriptionkeyword:
      case enumkeyword:
      case errorapptagkeyword:
      case errormessagekeyword:
      case extensionkeyword:
      case deviationkeyword:
      case deviatekeyword:
      case featurekeyword:
      case fractiondigitkeyword:
      case groupingkeyword:
      case identitykeyword:
      case iffeaturekeyword:
      case importkeyword:
      case includekeyword:
      case inputkeyword:
      case keykeyword:
      case leafkeyword:
      case leaflistkeyword:
      case lengthkeyword:
      case listkeyword:
      case mandatorykeyword:
      case maxelementskeyword:
      case minelementskeyword:
      case modulekeyword:
      case mustkeyword:
      case namespacekeyword:
      case notificationkeyword:
      case orderedbykeyword:
      case organizationkeyword:
      case outputkeyword:
      case pathkeyword:
      case patternkeyword:
      case positionkeyword:
      case prefixkeyword:
      case presencekeyword:
      case rangekeyword:
      case referencekeyword:
      case refinekeyword:
      case requireinstancekeyword:
      case revisionkeyword:
      case rpckeyword:
      case statuskeyword:
      case submodulekeyword:
      case typekeyword:
      case typedefkeyword:
      case uniquekeyword:
      case unitskeyword:
      case useskeyword:
      case valuekeyword:
      case whenkeyword:
      case yangversionkeyword:
      case yinelementkeyword:
      case addkeyword:
      case currentkeyword:
      case deprecatedkeyword:
      case falsekeyword:
      case minkeyword:
      case maxkeyword:
      case nankeyword:
      case neginfkeyword:
      case notsupportedkeyword:
      case obsoletekeyword:
      case posinfkeyword:
      case replacekeyword:
      case systemkeyword:
      case truekeyword:
      case unboundedkeyword:
      case userkeyword:
      case IDENTIFIER:
        i = string();
        break;
      default:
        jj_la1[215] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public String identifierref() throws ParseException {
Token t;
String p = null;
String i = null;
    if (jj_2_301(2)) {
      p = prefix();
      jj_consume_token(107);
    } else {
      ;
    }
    t = jj_consume_token(IDENTIFIER);
                i = new String();
                if(p != null)
                        i += p + ":";
                i += t.image;
                {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public String string() throws ParseException {
 Token t, u;
String k = "",s = null,a = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
                        s = t.image;
      label_340:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 115:
          ;
          break;
        default:
          jj_la1[216] = jj_gen;
          break label_340;
        }
        jj_consume_token(115);
        u = jj_consume_token(STRING);
                        s = s + " + " + u.image;
      }
                         {if (true) return s;}
      break;
    case anyxmlkeyword:
    case argumentkeyword:
    case augmentkeyword:
    case basekeyword:
    case belongstokeyword:
    case bitkeyword:
    case casekeyword:
    case choicekeyword:
    case configkeyword:
    case contactkeyword:
    case containerkeyword:
    case defaultkeyword:
    case descriptionkeyword:
    case enumkeyword:
    case errorapptagkeyword:
    case errormessagekeyword:
    case extensionkeyword:
    case deviationkeyword:
    case deviatekeyword:
    case featurekeyword:
    case fractiondigitkeyword:
    case groupingkeyword:
    case identitykeyword:
    case iffeaturekeyword:
    case importkeyword:
    case includekeyword:
    case inputkeyword:
    case keykeyword:
    case leafkeyword:
    case leaflistkeyword:
    case lengthkeyword:
    case listkeyword:
    case mandatorykeyword:
    case maxelementskeyword:
    case minelementskeyword:
    case modulekeyword:
    case mustkeyword:
    case namespacekeyword:
    case notificationkeyword:
    case orderedbykeyword:
    case organizationkeyword:
    case outputkeyword:
    case pathkeyword:
    case patternkeyword:
    case positionkeyword:
    case prefixkeyword:
    case presencekeyword:
    case rangekeyword:
    case referencekeyword:
    case refinekeyword:
    case requireinstancekeyword:
    case revisionkeyword:
    case rpckeyword:
    case statuskeyword:
    case submodulekeyword:
    case typekeyword:
    case typedefkeyword:
    case uniquekeyword:
    case unitskeyword:
    case useskeyword:
    case valuekeyword:
    case whenkeyword:
    case yangversionkeyword:
    case yinelementkeyword:
    case addkeyword:
    case currentkeyword:
    case deprecatedkeyword:
    case falsekeyword:
    case minkeyword:
    case maxkeyword:
    case nankeyword:
    case neginfkeyword:
    case notsupportedkeyword:
    case obsoletekeyword:
    case posinfkeyword:
    case replacekeyword:
    case systemkeyword:
    case truekeyword:
    case unboundedkeyword:
    case userkeyword:
      s = anykeyword();
                         {if (true) return s;}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                        {if (true) return t.image;}
      break;
    case DECVALUE:
      t = jj_consume_token(DECVALUE);
                        {if (true) return t.image;}
      break;
    case NEGDECVALUE:
      t = jj_consume_token(NEGDECVALUE);
                        {if (true) return t.image;}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                        {if (true) return t.image;}
      break;
    default:
      jj_la1[217] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String integervalue() throws ParseException {
 String n = null;
Token t;
    if (jj_2_302(2)) {
      t = jj_consume_token(NEGDECVALUE);
                {if (true) return  t.image;}
    } else if (jj_2_303(2)) {
      n = nonnegativeintegervalue();
                {if (true) return n;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String nonnegativeintegervalue() throws ParseException {
 String p = null;
    // "0" or positive
            p = positiveintegervalue();
                {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public String positiveintegervalue() throws ParseException {
Token t;
String v = null;
    if (jj_2_304(2)) {
      t = jj_consume_token(DECVALUE);
                {if (true) return t.image;}
    } else if (jj_2_305(2)) {
      v = string();
                  {if (true) return v;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String zerointegervalue() throws ParseException {
Token t;
String v = null;
    if (jj_2_306(2)) {
      t = jj_consume_token(DECVALUE);
                {if (true) return t.image;}
    } else if (jj_2_307(2)) {
      v = string();
                  {if (true) return v;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String floatvalue() throws ParseException {
Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case neginfkeyword:
      t = jj_consume_token(neginfkeyword);
                {if (true) return t.image;}
      break;
    case posinfkeyword:
      t = jj_consume_token(posinfkeyword);
                {if (true) return t.image;}
      break;
    case nankeyword:
      t = jj_consume_token(nankeyword);
                {if (true) return t.image;}
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
                {if (true) return t.image;}
      break;
    default:
      jj_la1[218] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  static private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  static private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  static private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  static private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  static private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  static private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  static private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  static private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  static private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  static private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  static private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  static private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  static private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  static private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  static private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  static private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  static private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  static private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  static private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  static private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  static private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  static private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  static private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  static private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  static private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  static private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  static private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  static private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  static private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  static private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  static private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  static private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  static private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  static private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  static private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  static private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  static private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  static private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  static private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  static private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  static private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  static private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  static private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  static private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  static private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  static private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  static private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  static private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  static private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  static private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  static private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  static private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  static private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  static private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  static private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  static private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  static private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  static private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  static private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  static private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  static private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  static private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  static private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  static private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  static private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  static private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  static private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  static private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  static private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  static private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  static private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  static private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  static private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  static private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  static private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  static private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  static private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  static private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  static private boolean jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  static private boolean jj_2_161(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  static private boolean jj_2_162(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  static private boolean jj_2_163(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  static private boolean jj_2_164(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  static private boolean jj_2_165(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  static private boolean jj_2_166(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  static private boolean jj_2_167(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  static private boolean jj_2_168(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  static private boolean jj_2_169(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  static private boolean jj_2_170(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  static private boolean jj_2_171(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  static private boolean jj_2_172(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  static private boolean jj_2_173(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  static private boolean jj_2_174(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  static private boolean jj_2_175(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  static private boolean jj_2_176(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  static private boolean jj_2_177(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  static private boolean jj_2_178(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  static private boolean jj_2_179(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  static private boolean jj_2_180(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  static private boolean jj_2_181(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  static private boolean jj_2_182(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  static private boolean jj_2_183(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_183(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  static private boolean jj_2_184(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_184(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  static private boolean jj_2_185(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_185(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  static private boolean jj_2_186(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_186(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  static private boolean jj_2_187(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_187(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  static private boolean jj_2_188(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_188(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(187, xla); }
  }

  static private boolean jj_2_189(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_189(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(188, xla); }
  }

  static private boolean jj_2_190(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_190(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(189, xla); }
  }

  static private boolean jj_2_191(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_191(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(190, xla); }
  }

  static private boolean jj_2_192(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_192(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(191, xla); }
  }

  static private boolean jj_2_193(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_193(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(192, xla); }
  }

  static private boolean jj_2_194(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_194(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(193, xla); }
  }

  static private boolean jj_2_195(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_195(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(194, xla); }
  }

  static private boolean jj_2_196(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_196(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(195, xla); }
  }

  static private boolean jj_2_197(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_197(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(196, xla); }
  }

  static private boolean jj_2_198(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_198(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(197, xla); }
  }

  static private boolean jj_2_199(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_199(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(198, xla); }
  }

  static private boolean jj_2_200(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_200(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(199, xla); }
  }

  static private boolean jj_2_201(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_201(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(200, xla); }
  }

  static private boolean jj_2_202(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_202(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(201, xla); }
  }

  static private boolean jj_2_203(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_203(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(202, xla); }
  }

  static private boolean jj_2_204(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_204(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(203, xla); }
  }

  static private boolean jj_2_205(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_205(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(204, xla); }
  }

  static private boolean jj_2_206(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_206(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(205, xla); }
  }

  static private boolean jj_2_207(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_207(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(206, xla); }
  }

  static private boolean jj_2_208(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_208(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(207, xla); }
  }

  static private boolean jj_2_209(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_209(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(208, xla); }
  }

  static private boolean jj_2_210(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_210(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(209, xla); }
  }

  static private boolean jj_2_211(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_211(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(210, xla); }
  }

  static private boolean jj_2_212(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_212(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(211, xla); }
  }

  static private boolean jj_2_213(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_213(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(212, xla); }
  }

  static private boolean jj_2_214(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_214(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(213, xla); }
  }

  static private boolean jj_2_215(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_215(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(214, xla); }
  }

  static private boolean jj_2_216(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_216(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(215, xla); }
  }

  static private boolean jj_2_217(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_217(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(216, xla); }
  }

  static private boolean jj_2_218(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_218(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(217, xla); }
  }

  static private boolean jj_2_219(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_219(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(218, xla); }
  }

  static private boolean jj_2_220(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_220(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(219, xla); }
  }

  static private boolean jj_2_221(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_221(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(220, xla); }
  }

  static private boolean jj_2_222(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_222(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(221, xla); }
  }

  static private boolean jj_2_223(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_223(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(222, xla); }
  }

  static private boolean jj_2_224(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_224(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(223, xla); }
  }

  static private boolean jj_2_225(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_225(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(224, xla); }
  }

  static private boolean jj_2_226(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_226(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(225, xla); }
  }

  static private boolean jj_2_227(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_227(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(226, xla); }
  }

  static private boolean jj_2_228(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_228(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(227, xla); }
  }

  static private boolean jj_2_229(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_229(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(228, xla); }
  }

  static private boolean jj_2_230(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_230(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(229, xla); }
  }

  static private boolean jj_2_231(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_231(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(230, xla); }
  }

  static private boolean jj_2_232(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_232(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(231, xla); }
  }

  static private boolean jj_2_233(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_233(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(232, xla); }
  }

  static private boolean jj_2_234(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_234(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(233, xla); }
  }

  static private boolean jj_2_235(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_235(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(234, xla); }
  }

  static private boolean jj_2_236(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_236(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(235, xla); }
  }

  static private boolean jj_2_237(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_237(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(236, xla); }
  }

  static private boolean jj_2_238(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_238(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(237, xla); }
  }

  static private boolean jj_2_239(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_239(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(238, xla); }
  }

  static private boolean jj_2_240(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_240(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(239, xla); }
  }

  static private boolean jj_2_241(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_241(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(240, xla); }
  }

  static private boolean jj_2_242(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_242(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(241, xla); }
  }

  static private boolean jj_2_243(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_243(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(242, xla); }
  }

  static private boolean jj_2_244(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_244(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(243, xla); }
  }

  static private boolean jj_2_245(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_245(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(244, xla); }
  }

  static private boolean jj_2_246(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_246(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(245, xla); }
  }

  static private boolean jj_2_247(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_247(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(246, xla); }
  }

  static private boolean jj_2_248(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_248(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(247, xla); }
  }

  static private boolean jj_2_249(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_249(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(248, xla); }
  }

  static private boolean jj_2_250(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_250(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(249, xla); }
  }

  static private boolean jj_2_251(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_251(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(250, xla); }
  }

  static private boolean jj_2_252(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_252(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(251, xla); }
  }

  static private boolean jj_2_253(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_253(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(252, xla); }
  }

  static private boolean jj_2_254(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_254(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(253, xla); }
  }

  static private boolean jj_2_255(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_255(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(254, xla); }
  }

  static private boolean jj_2_256(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_256(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(255, xla); }
  }

  static private boolean jj_2_257(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_257(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(256, xla); }
  }

  static private boolean jj_2_258(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_258(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(257, xla); }
  }

  static private boolean jj_2_259(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_259(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(258, xla); }
  }

  static private boolean jj_2_260(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_260(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(259, xla); }
  }

  static private boolean jj_2_261(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_261(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(260, xla); }
  }

  static private boolean jj_2_262(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_262(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(261, xla); }
  }

  static private boolean jj_2_263(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_263(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(262, xla); }
  }

  static private boolean jj_2_264(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_264(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(263, xla); }
  }

  static private boolean jj_2_265(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_265(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(264, xla); }
  }

  static private boolean jj_2_266(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_266(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(265, xla); }
  }

  static private boolean jj_2_267(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_267(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(266, xla); }
  }

  static private boolean jj_2_268(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_268(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(267, xla); }
  }

  static private boolean jj_2_269(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_269(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(268, xla); }
  }

  static private boolean jj_2_270(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_270(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(269, xla); }
  }

  static private boolean jj_2_271(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_271(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(270, xla); }
  }

  static private boolean jj_2_272(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_272(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(271, xla); }
  }

  static private boolean jj_2_273(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_273(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(272, xla); }
  }

  static private boolean jj_2_274(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_274(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(273, xla); }
  }

  static private boolean jj_2_275(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_275(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(274, xla); }
  }

  static private boolean jj_2_276(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_276(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(275, xla); }
  }

  static private boolean jj_2_277(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_277(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(276, xla); }
  }

  static private boolean jj_2_278(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_278(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(277, xla); }
  }

  static private boolean jj_2_279(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_279(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(278, xla); }
  }

  static private boolean jj_2_280(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_280(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(279, xla); }
  }

  static private boolean jj_2_281(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_281(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(280, xla); }
  }

  static private boolean jj_2_282(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_282(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(281, xla); }
  }

  static private boolean jj_2_283(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_283(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(282, xla); }
  }

  static private boolean jj_2_284(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_284(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(283, xla); }
  }

  static private boolean jj_2_285(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_285(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(284, xla); }
  }

  static private boolean jj_2_286(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_286(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(285, xla); }
  }

  static private boolean jj_2_287(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_287(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(286, xla); }
  }

  static private boolean jj_2_288(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_288(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(287, xla); }
  }

  static private boolean jj_2_289(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_289(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(288, xla); }
  }

  static private boolean jj_2_290(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_290(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(289, xla); }
  }

  static private boolean jj_2_291(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_291(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(290, xla); }
  }

  static private boolean jj_2_292(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_292(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(291, xla); }
  }

  static private boolean jj_2_293(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_293(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(292, xla); }
  }

  static private boolean jj_2_294(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_294(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(293, xla); }
  }

  static private boolean jj_2_295(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_295(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(294, xla); }
  }

  static private boolean jj_2_296(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_296(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(295, xla); }
  }

  static private boolean jj_2_297(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_297(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(296, xla); }
  }

  static private boolean jj_2_298(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_298(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(297, xla); }
  }

  static private boolean jj_2_299(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_299(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(298, xla); }
  }

  static private boolean jj_2_300(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_300(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(299, xla); }
  }

  static private boolean jj_2_301(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_301(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(300, xla); }
  }

  static private boolean jj_2_302(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_302(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(301, xla); }
  }

  static private boolean jj_2_303(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_303(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(302, xla); }
  }

  static private boolean jj_2_304(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_304(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(303, xla); }
  }

  static private boolean jj_2_305(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_305(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(304, xla); }
  }

  static private boolean jj_2_306(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_306(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(305, xla); }
  }

  static private boolean jj_2_307(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_307(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(306, xla); }
  }

  static private boolean jj_3_201() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_406() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_196() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_344() {
    if (jj_3R_389()) return true;
    return false;
  }

  static private boolean jj_3_198() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_367() {
    if (jj_scan_token(referencekeyword)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_406()) return true;
    }
    return false;
  }

  static private boolean jj_3R_491() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3R_405() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_113() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_281() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_470() {
    if (jj_scan_token(defaultkeyword)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_491()) return true;
    }
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_279() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_366() {
    if (jj_scan_token(descriptionkeyword)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_405()) return true;
    }
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_207() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3_204() {
    if (jj_3R_364()) return true;
    return false;
  }

  static private boolean jj_3_74() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_206() {
    if (jj_3R_366()) return true;
    return false;
  }

  static private boolean jj_3R_474() {
    if (jj_scan_token(containerkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3_203() {
    if (jj_3R_363()) return true;
    return false;
  }

  static private boolean jj_3_205() {
    if (jj_3R_365()) return true;
    return false;
  }

  static private boolean jj_3_112() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_195() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_110() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_278() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_280() {
    if (jj_3R_375()) return true;
    return false;
  }

  static private boolean jj_3R_392() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_109() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_480() {
    if (jj_scan_token(useskeyword)) return true;
    if (jj_3R_395()) return true;
    return false;
  }

  static private boolean jj_3R_396() {
    if (jj_3R_388()) return true;
    return false;
  }

  static private boolean jj_3R_358() {
    if (jj_3R_398()) return true;
    return false;
  }

  static private boolean jj_3_108() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_194() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_275() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_357() {
    if (jj_3R_397()) return true;
    return false;
  }

  static private boolean jj_3_277() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_481() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_193() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_348() {
    if (jj_scan_token(patternkeyword)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_392()) return true;
    }
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_107() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) return true;
    }
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_192() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_191() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_449() {
    if (jj_3R_481()) return true;
    return false;
  }

  static private boolean jj_3R_448() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_380() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_448()) {
    jj_scanpos = xsp;
    if (jj_3R_449()) return true;
    }
    return false;
  }

  static private boolean jj_3_188() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_190() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_106() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_189() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_274() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_276() {
    if (jj_3R_375()) return true;
    return false;
  }

  static private boolean jj_3_187() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_398() {
    if (jj_scan_token(groupingkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_394() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_273() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_349() {
    if (jj_scan_token(lengthkeyword)) return true;
    if (jj_3R_393()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_394()) return true;
    }
    return false;
  }

  static private boolean jj_3_186() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_272() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_271() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_299() {
    if (jj_3R_385()) return true;
    if (jj_scan_token(108)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_479() {
    if (jj_scan_token(anyxmlkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_185() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_105() {
    if (jj_3R_356()) return true;
    return false;
  }

  static private boolean jj_3_269() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_503() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) return true;
    }
    return false;
  }

  static private boolean jj_3_104() {
    if (jj_scan_token(unboundedkeyword)) return true;
    return false;
  }

  static private boolean jj_3_184() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_268() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_270() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_183() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_3R_349()) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_266() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_181() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_267() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_3R_348()) return true;
    return false;
  }

  static private boolean jj_3R_496() {
    if (jj_3R_503()) return true;
    return false;
  }

  static private boolean jj_3_182() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_180() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_504() {
    if (jj_scan_token(109)) return true;
    return false;
  }

  static private boolean jj_3R_497() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_3R_348()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_473() {
    if (jj_scan_token(maxelementskeyword)) return true;
    if (jj_3R_496()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_497()) return true;
    }
    return false;
  }

  static private boolean jj_3_265() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_3R_349()) return true;
    return false;
  }

  static private boolean jj_3R_499() {
    if (jj_3R_504()) return true;
    return false;
  }

  static private boolean jj_3_179() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_502() {
    if (jj_3R_387()) return true;
    return false;
  }

  static private boolean jj_3R_483() {
    if (jj_3R_385()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_499()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_482()) return true;
    return false;
  }

  static private boolean jj_3R_390() {
    if (jj_scan_token(DECVALUE)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_494() {
    if (jj_3R_502()) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_298() {
    if (jj_3R_384()) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_345() {
    if (jj_scan_token(fractiondigitkeyword)) return true;
    if (jj_3R_390()) return true;
    return false;
  }

  static private boolean jj_3R_401() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3R_495() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_455() {
    if (jj_scan_token(DDOT)) return true;
    if (jj_scan_token(108)) return true;
    return false;
  }

  static private boolean jj_3R_363() {
    if (jj_scan_token(whenkeyword)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_401()) return true;
    }
    return false;
  }

  static private boolean jj_3R_472() {
    if (jj_scan_token(minelementskeyword)) return true;
    if (jj_3R_494()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_495()) return true;
    }
    return false;
  }

  static private boolean jj_3R_454() {
    if (jj_3R_483()) return true;
    return false;
  }

  static private boolean jj_3R_384() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_454()) {
    jj_scanpos = xsp;
    if (jj_3R_455()) return true;
    }
    return false;
  }

  static private boolean jj_3_177() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_178() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_176() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_175() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_103() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_498() {
    if (jj_scan_token(108)) return true;
    if (jj_3R_385()) return true;
    return false;
  }

  static private boolean jj_3_102() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_482() {
    Token xsp;
    if (jj_3R_498()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_498()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_174() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_101() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_173() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_452() {
    if (jj_3R_482()) return true;
    return false;
  }

  static private boolean jj_3_100() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_172() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_453() {
    if (jj_3R_384()) return true;
    return false;
  }

  static private boolean jj_3R_447() {
    if (jj_3R_480()) return true;
    return false;
  }

  static private boolean jj_3R_446() {
    if (jj_3R_479()) return true;
    return false;
  }

  static private boolean jj_3_170() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_383() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_452()) {
    jj_scanpos = xsp;
    if (jj_3R_453()) return true;
    }
    return false;
  }

  static private boolean jj_3R_445() {
    if (jj_3R_478()) return true;
    return false;
  }

  static private boolean jj_3R_342() {
    if (jj_3R_380()) return true;
    if (jj_scan_token(107)) return true;
    return false;
  }

  static private boolean jj_3_171() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_444() {
    if (jj_3R_477()) return true;
    return false;
  }

  static private boolean jj_3R_443() {
    if (jj_3R_476()) return true;
    return false;
  }

  static private boolean jj_3R_442() {
    if (jj_3R_475()) return true;
    return false;
  }

  static private boolean jj_3R_441() {
    if (jj_3R_474()) return true;
    return false;
  }

  static private boolean jj_3R_375() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_441()) {
    jj_scanpos = xsp;
    if (jj_3R_442()) {
    jj_scanpos = xsp;
    if (jj_3R_443()) {
    jj_scanpos = xsp;
    if (jj_3R_444()) {
    jj_scanpos = xsp;
    if (jj_3R_445()) {
    jj_scanpos = xsp;
    if (jj_3R_446()) {
    jj_scanpos = xsp;
    if (jj_3R_447()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_169() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_264() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_485() {
    if (jj_3R_388()) return true;
    return false;
  }

  static private boolean jj_3_263() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_297() {
    if (jj_3R_383()) return true;
    return false;
  }

  static private boolean jj_3R_463() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_297()) {
    jj_scanpos = xsp;
    if (jj_3R_485()) return true;
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_99() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_262() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_261() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_487() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3R_451() {
    if (jj_scan_token(111)) return true;
    return false;
  }

  static private boolean jj_3R_382() {
    if (jj_3R_387()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_168() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_259() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_450() {
    if (jj_3R_385()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_260() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_467() {
    if (jj_scan_token(mustkeyword)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_487()) return true;
    }
    return false;
  }

  static private boolean jj_3R_381() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_450()) {
    jj_scanpos = xsp;
    if (jj_3R_451()) return true;
    }
    if (jj_scan_token(112)) return true;
    return false;
  }

  static private boolean jj_3_258() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_3R_346()) return true;
    return false;
  }

  static private boolean jj_3_296() {
    if (jj_3R_382()) return true;
    return false;
  }

  static private boolean jj_3R_478() {
    if (jj_scan_token(choicekeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3R_456() {
    if (jj_3R_481()) return true;
    return false;
  }

  static private boolean jj_3_295() {
    if (jj_3R_381()) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_3R_347()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_3R_345()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_344()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_257() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_362() {
    if (jj_3R_400()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_167() {
    if (jj_3R_362()) return true;
    return false;
  }

  static private boolean jj_3_256() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_255() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_351() {
    if (jj_scan_token(typekeyword)) return true;
    if (jj_3R_395()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_488() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_294() {
    if (jj_3R_380()) return true;
    if (jj_scan_token(107)) return true;
    return false;
  }

  static private boolean jj_3R_385() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_294()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_3R_456()) return true;
    }
    return false;
  }

  static private boolean jj_3_254() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_468() {
    if (jj_scan_token(presencekeyword)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_488()) return true;
    }
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_253() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_400() {
    if (jj_3R_385()) return true;
    if (jj_3R_465()) return true;
    return false;
  }

  static private boolean jj_3_251() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_252() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_501() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  static private boolean jj_3_250() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_402() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3R_399() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_361() {
    Token xsp;
    if (jj_3R_399()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_486() {
    if (jj_scan_token(108)) return true;
    return false;
  }

  static private boolean jj_3R_465() {
    Token xsp;
    if (jj_3R_486()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_486()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_492() {
    if (jj_3R_501()) return true;
    return false;
  }

  static private boolean jj_3R_493() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_166() {
    if (jj_3R_361()) return true;
    return false;
  }

  static private boolean jj_3R_471() {
    if (jj_scan_token(mandatorykeyword)) return true;
    if (jj_3R_492()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_493()) return true;
    }
    return false;
  }

  static private boolean jj_3R_397() {
    if (jj_scan_token(typedefkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_165() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_249() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_248() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_355() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  static private boolean jj_3_164() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_247() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_163() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_162() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_161() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_500() {
    if (jj_3R_388()) return true;
    return false;
  }

  static private boolean jj_3_246() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_364() {
    if (jj_scan_token(iffeaturekeyword)) return true;
    if (jj_3R_395()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_402()) return true;
    }
    return false;
  }

  static private boolean jj_3_98() {
    if (jj_3R_355()) return true;
    return false;
  }

  static private boolean jj_3R_489() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3R_500()) return true;
    }
    return false;
  }

  static private boolean jj_3R_440() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3R_439() {
    if (jj_3R_366()) return true;
    return false;
  }

  static private boolean jj_3_160() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_159() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_490() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_158() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_438() {
    if (jj_3R_471()) return true;
    return false;
  }

  static private boolean jj_3R_393() {
    if (jj_3R_388()) return true;
    return false;
  }

  static private boolean jj_3_157() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_437() {
    if (jj_3R_469()) return true;
    return false;
  }

  static private boolean jj_3R_469() {
    if (jj_scan_token(configkeyword)) return true;
    if (jj_3R_489()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_490()) return true;
    }
    return false;
  }

  static private boolean jj_3R_374() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_437()) {
    jj_scanpos = xsp;
    if (jj_3R_438()) {
    jj_scanpos = xsp;
    if (jj_3R_439()) {
    jj_scanpos = xsp;
    if (jj_3R_440()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_245() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_244() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_156() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_155() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_152() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_354() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_154() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_436() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3_153() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_341() {
    if (jj_scan_token(modulekeyword)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_151() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_243() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_466() {
    if (jj_3R_388()) return true;
    return false;
  }

  static private boolean jj_3R_435() {
    if (jj_3R_366()) return true;
    return false;
  }

  static private boolean jj_3_242() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_97() {
    if (jj_3R_354()) return true;
    return false;
  }

  static private boolean jj_3R_403() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3R_466()) return true;
    }
    return false;
  }

  static private boolean jj_3R_373() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_435()) {
    jj_scanpos = xsp;
    if (jj_3R_436()) return true;
    }
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_241() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_404() {
    if (jj_scan_token(104)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_341()) return true;
    return false;
  }

  static private boolean jj_3_240() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_434() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3R_365() {
    if (jj_scan_token(statuskeyword)) return true;
    if (jj_3R_403()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_3R_404()) return true;
    }
    return false;
  }

  static private boolean jj_3_150() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_239() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_433() {
    if (jj_3R_366()) return true;
    return false;
  }

  static private boolean jj_3R_432() {
    if (jj_3R_471()) return true;
    return false;
  }

  static private boolean jj_3R_477() {
    if (jj_scan_token(listkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3R_353() {
    if (jj_3R_387()) return true;
    return false;
  }

  static private boolean jj_3R_431() {
    if (jj_3R_469()) return true;
    return false;
  }

  static private boolean jj_3R_430() {
    if (jj_3R_470()) return true;
    return false;
  }

  static private boolean jj_3_307() {
    if (jj_3R_388()) return true;
    return false;
  }

  static private boolean jj_3_149() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_372() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_430()) {
    jj_scanpos = xsp;
    if (jj_3R_431()) {
    jj_scanpos = xsp;
    if (jj_3R_432()) {
    jj_scanpos = xsp;
    if (jj_3R_433()) {
    jj_scanpos = xsp;
    if (jj_3R_434()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_378() {
    if (jj_scan_token(deviatekeyword)) return true;
    if (jj_scan_token(replacekeyword)) return true;
    return false;
  }

  static private boolean jj_3_148() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_238() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_306() {
    if (jj_scan_token(DECVALUE)) return true;
    return false;
  }

  static private boolean jj_3_96() {
    if (jj_3R_353()) return true;
    return false;
  }

  static private boolean jj_3_237() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_236() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_147() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_146() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_235() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_305() {
    if (jj_3R_388()) return true;
    return false;
  }

  static private boolean jj_3_145() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_95() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_356() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_304()) {
    jj_scanpos = xsp;
    if (jj_3_305()) return true;
    }
    return false;
  }

  static private boolean jj_3_304() {
    if (jj_scan_token(DECVALUE)) return true;
    return false;
  }

  static private boolean jj_3_94() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_144() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_429() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3_234() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_428() {
    if (jj_3R_366()) return true;
    return false;
  }

  static private boolean jj_3_93() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_143() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_233() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_427() {
    if (jj_3R_473()) return true;
    return false;
  }

  static private boolean jj_3R_387() {
    if (jj_3R_356()) return true;
    return false;
  }

  static private boolean jj_3_92() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_426() {
    if (jj_3R_472()) return true;
    return false;
  }

  static private boolean jj_3_142() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_343() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  static private boolean jj_3_139() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_425() {
    if (jj_3R_469()) return true;
    return false;
  }

  static private boolean jj_3_141() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_303() {
    if (jj_3R_387()) return true;
    return false;
  }

  static private boolean jj_3_302() {
    if (jj_scan_token(NEGDECVALUE)) return true;
    return false;
  }

  static private boolean jj_3R_424() {
    if (jj_3R_467()) return true;
    return false;
  }

  static private boolean jj_3_140() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_371() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_424()) {
    jj_scanpos = xsp;
    if (jj_3R_425()) {
    jj_scanpos = xsp;
    if (jj_3R_426()) {
    jj_scanpos = xsp;
    if (jj_3R_427()) {
    jj_scanpos = xsp;
    if (jj_3R_428()) {
    jj_scanpos = xsp;
    if (jj_3R_429()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_343()) return true;
    return false;
  }

  static private boolean jj_3_91() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_138() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_232() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_379() {
    if (jj_scan_token(deviatekeyword)) return true;
    if (jj_scan_token(deletekeyword)) return true;
    return false;
  }

  static private boolean jj_3_231() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_462() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  static private boolean jj_3_230() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_461() {
    if (jj_scan_token(NEGDECVALUE)) return true;
    return false;
  }

  static private boolean jj_3_229() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_352() {
    if (jj_scan_token(bitkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3R_460() {
    if (jj_scan_token(DECVALUE)) return true;
    return false;
  }

  static private boolean jj_3R_423() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3R_459() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_137() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_228() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_422() {
    if (jj_3R_366()) return true;
    return false;
  }

  static private boolean jj_3R_458() {
    if (jj_3R_481()) return true;
    return false;
  }

  static private boolean jj_3_89() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_227() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_421() {
    if (jj_3R_473()) return true;
    return false;
  }

  static private boolean jj_3R_476() {
    if (jj_scan_token(leaflistkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_136() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_90() {
    if (jj_3R_352()) return true;
    return false;
  }

  static private boolean jj_3R_420() {
    if (jj_3R_472()) return true;
    return false;
  }

  static private boolean jj_3_135() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_484() {
    if (jj_scan_token(115)) return true;
    return false;
  }

  static private boolean jj_3R_419() {
    if (jj_3R_469()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_87() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_457() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_484()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_388() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_457()) {
    jj_scanpos = xsp;
    if (jj_3R_458()) {
    jj_scanpos = xsp;
    if (jj_3R_459()) {
    jj_scanpos = xsp;
    if (jj_3R_460()) {
    jj_scanpos = xsp;
    if (jj_3R_461()) {
    jj_scanpos = xsp;
    if (jj_3R_462()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_88() {
    if (jj_3R_351()) return true;
    return false;
  }

  static private boolean jj_3R_418() {
    if (jj_3R_467()) return true;
    return false;
  }

  static private boolean jj_3_134() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_133() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_370() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_418()) {
    jj_scanpos = xsp;
    if (jj_3R_419()) {
    jj_scanpos = xsp;
    if (jj_3R_420()) {
    jj_scanpos = xsp;
    if (jj_3R_421()) {
    jj_scanpos = xsp;
    if (jj_3R_422()) {
    jj_scanpos = xsp;
    if (jj_3R_423()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_226() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_347() {
    Token xsp;
    if (jj_3_88()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_225() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_132() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_301() {
    if (jj_3R_380()) return true;
    if (jj_scan_token(107)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_386() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_301()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_131() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_224() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_377() {
    if (jj_scan_token(deviatekeyword)) return true;
    if (jj_scan_token(addkeyword)) return true;
    return false;
  }

  static private boolean jj_3_130() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_223() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_464() {
    if (jj_3R_388()) return true;
    return false;
  }

  static private boolean jj_3R_417() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3_293() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_129() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_222() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_300() {
    if (jj_3R_386()) return true;
    return false;
  }

  static private boolean jj_3R_395() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_300()) {
    jj_scanpos = xsp;
    if (jj_3R_464()) return true;
    }
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_416() {
    if (jj_3R_366()) return true;
    return false;
  }

  static private boolean jj_3_127() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_128() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_221() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_415() {
    if (jj_3R_471()) return true;
    return false;
  }

  static private boolean jj_3R_414() {
    if (jj_3R_469()) return true;
    return false;
  }

  static private boolean jj_3_126() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_413() {
    if (jj_3R_470()) return true;
    return false;
  }

  static private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  static private boolean jj_3R_412() {
    if (jj_3R_467()) return true;
    return false;
  }

  static private boolean jj_3_85() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_220() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_376() {
    if (jj_scan_token(deviatekeyword)) return true;
    if (jj_scan_token(notsupportedkeyword)) return true;
    return false;
  }

  static private boolean jj_3R_369() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_412()) {
    jj_scanpos = xsp;
    if (jj_3R_413()) {
    jj_scanpos = xsp;
    if (jj_3R_414()) {
    jj_scanpos = xsp;
    if (jj_3R_415()) {
    jj_scanpos = xsp;
    if (jj_3R_416()) {
    jj_scanpos = xsp;
    if (jj_3R_417()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_292() {
    if (jj_3R_379()) return true;
    return false;
  }

  static private boolean jj_3_219() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_291() {
    if (jj_3R_378()) return true;
    return false;
  }

  static private boolean jj_3R_391() {
    if (jj_scan_token(pathkeyword)) return true;
    if (jj_3R_463()) return true;
    return false;
  }

  static private boolean jj_3_125() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_290() {
    if (jj_3R_377()) return true;
    return false;
  }

  static private boolean jj_3_218() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_84() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_217() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_289() {
    if (jj_3R_376()) return true;
    return false;
  }

  static private boolean jj_3R_411() {
    if (jj_3R_367()) return true;
    return false;
  }

  static private boolean jj_3_86() {
    if (jj_3R_350()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_475() {
    if (jj_scan_token(leafkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3R_410() {
    if (jj_3R_366()) return true;
    return false;
  }

  static private boolean jj_3_216() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_124() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_83() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_409() {
    if (jj_3R_469()) return true;
    return false;
  }

  static private boolean jj_3_82() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_346() {
    if (jj_3R_391()) return true;
    return false;
  }

  static private boolean jj_3R_408() {
    if (jj_3R_468()) return true;
    return false;
  }

  static private boolean jj_3_122() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_407() {
    if (jj_3R_467()) return true;
    return false;
  }

  static private boolean jj_3_287() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_81() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_368() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_407()) {
    jj_scanpos = xsp;
    if (jj_3R_408()) {
    jj_scanpos = xsp;
    if (jj_3R_409()) {
    jj_scanpos = xsp;
    if (jj_3R_410()) {
    jj_scanpos = xsp;
    if (jj_3R_411()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_360() {
    if (jj_3R_398()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_121() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_120() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_359() {
    if (jj_3R_397()) return true;
    return false;
  }

  static private boolean jj_3_119() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    return false;
  }

  static private boolean jj_3_215() {
    if (jj_3R_374()) return true;
    return false;
  }

  static private boolean jj_3_214() {
    if (jj_3R_373()) return true;
    return false;
  }

  static private boolean jj_3_79() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_118() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_209() {
    if (jj_3R_368()) return true;
    return false;
  }

  static private boolean jj_3_213() {
    if (jj_3R_372()) return true;
    return false;
  }

  static private boolean jj_3_117() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_212() {
    if (jj_3R_371()) return true;
    return false;
  }

  static private boolean jj_3_210() {
    if (jj_3R_369()) return true;
    return false;
  }

  static private boolean jj_3_285() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_211() {
    if (jj_3R_370()) return true;
    return false;
  }

  static private boolean jj_3_115() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_286() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_288() {
    if (jj_3R_375()) return true;
    return false;
  }

  static private boolean jj_3_284() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_116() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3R_389() {
    if (jj_scan_token(enumkeyword)) return true;
    if (jj_3R_396()) return true;
    return false;
  }

  static private boolean jj_3_202() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_208() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_78() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_282() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_197() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_200() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_199() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_283() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_3_114() {
    if (jj_3R_342()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public yangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[219];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x90000000,0x0,0x24280000,0x800000,0x0,0x90000000,0x0,0x24280000,0x0,0x800000,0x90000000,0x0,0x24280000,0x24080000,0x20080000,0xfff80000,0x0,0x0,0x0,0x0,0x0,0xfff80000,0x0,0xfff80000,0x0,0xfff80000,0x0,0xfff80000,0x0,0xfff80000,0x0,0xfff80000,0x0,0xfff80000,0x0,0x80000000,0x0,0x80000000,0x0,0x80100000,0x80100000,0x0,0x0,0x0,0xfff80000,0x0,0xfffb0180,0x0,0x80400000,0x80400000,0x0,0xfff80000,0x0,0x80000000,0x80000000,0x0,0xfff80000,0x0,0xc0000000,0xc0000000,0x0,0x0,0x1400000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x0,0xfff80000,0x0,0x80000000,0x80000000,0x0,0xfff80000,0x0,0x0,0x80000000,0x80000000,0x0,0xfff80000,0x0,0xfffb0180,0xfff80000,0x0,0xfffb0180,0x0,0xfff80000,0x0,0xfffb0180,0x0,0xfff80000,0x0,0x0,0xfff80000,0x0,0xfff80000,0x0,0x0,0x80000000,0x80000000,0x0,0xfff80000,0x0,0xfff80000,0x0,0xfff80000,0x0,0xfff80000,0x0,0xfff80000,0x0,0xa4080000,0x0,0xa4080000,0x0,0xac080000,0x0,0xac080000,0x0,0xc8000000,0xc8000000,0x88000000,0x88000000,0xac080000,0xac080000,0xfff80000,0x0,0xfffb0180,0x0,0xfff80000,0x0,0xfffb0180,0xea080000,0xea080000,0x0,0x20080000,0xa0080000,0xa0080000,0x0,0x88000000,0x88000000,0x0,0x80200000,0x200000,0x0,0x0,0x88000000,0xc8000000,0x88000000,0x88000000,0xc8000000,0x80000000,0x88000000,0x26080000,0xa6080000,0xa6080000,0x26080000,0xa6080000,0xfff80000,0xfffb0180,0xfff80000,0x0,0xfff80000,0x0,0x80000000,0x0,0x80000000,0x0,0x24080000,0x0,0x24080000,0x24080000,0x0,0x24080000,0xa4080000,0x0,0xa4080000,0x0,0x80000000,0x80000000,0x0,0x48000000,0x48000000,0x0,0x40000000,0x40000000,0x0,0x48000000,0x48000000,0x0,0xfffb2180,0xfff80000,0x0,0xfff80000,0x0,0x0,0xfff80000,0xc00,0xfffb0180,0xfff81000,0x0,0x0,0xfff81000,0x0,0x1000,0xfff80000,0xfff80000,0xfffb0180,0x0,0xfffb0180,0x20000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1000000,0x1800,0x8000000,0x0,0x2058358,0x0,0x1800,0x8000000,0x0,0x2058358,0x1000000,0x0,0x8000000,0x1800,0x2058358,0x58000,0x58000,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x400,0x400,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x6,0x6,0x0,0x6,0x6,0x0,0x6,0x6,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x80000000,0x80000000,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x6,0x6,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0x58100,0x100,0x58100,0x0,0x858500,0x100,0x858500,0x0,0x880400,0x880400,0x4b00400,0x4b00400,0x4b5c500,0x4b5c500,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0x0,0xffffffff,0xd8400,0xd8400,0x0,0x58000,0x58400,0x58400,0x0,0x880400,0x880400,0x0,0x400,0x0,0x0,0x0,0x800000,0x880000,0xb00000,0xb00000,0x80000,0x0,0x80000,0x58000,0x58400,0x58400,0x58000,0x58400,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x10002500,0x100,0x10002500,0x0,0x58100,0x100,0x58100,0x58100,0x100,0x58100,0x58500,0x100,0x58500,0x0,0x20,0x0,0x0,0xb80000,0xb80000,0x0,0x800000,0x800000,0x0,0x380000,0x380000,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x400,0x40001,0x0,0x8,0x40,0x9100,0x40000,0x0,0x8,0x40,0x9100,0x40001,0x40000,0x8,0x0,0x9100,0x8000,0x8000,0xff7fff7f,0x0,0x81,0x81,0x80,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0x0,0x0,0x0,0x0,0x208,0x208,0x0,0x80000,0x0,0xff7fff7f,0x0,0xff7fff7f,0x1000000,0x208,0x208,0x0,0xff7fff7f,0x0,0x208,0x208,0x0,0xff7fff7f,0x0,0x4a08,0x4a08,0x4,0x0,0x1000000,0x0,0x8,0x8,0x0,0x8,0x8,0x0,0x8,0x8,0x0,0xff7fff7f,0x0,0x10208,0x10208,0x0,0xff7fff7f,0x0,0x1000000,0x208,0x208,0x0,0xff7fff7f,0x0,0xff7fff7f,0xff7fff7f,0x0,0xff7fff7f,0x40600000,0xff7fff7f,0x0,0xff7fff7f,0x1000000,0xff7fff7f,0x0,0x1000000,0xff7fff7f,0x0,0xff7fff7f,0x0,0x0,0x8,0x8,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0x9208,0x1000,0x9208,0x0,0x2920a,0x1000,0x2920a,0x0,0x24a08,0x24a08,0x24a08,0x24a08,0x2b208,0x2b208,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x0,0xff7fff7f,0x20208,0x20208,0x0,0x0,0x28208,0x28208,0x0,0x20208,0x20208,0x0,0x20218,0x10,0x0,0x0,0xa,0x8,0x8,0x8,0x8,0x8,0x8,0x8000,0x28208,0x28208,0x8000,0x28208,0xff7fff7f,0xff7fff7f,0xff7fff7f,0x0,0xff7fff7f,0x0,0x1208,0x1000,0x1208,0x0,0x9000,0x1000,0x9000,0x9000,0x1000,0x9000,0x9208,0x1000,0x9208,0x0,0x8,0x8,0x0,0x6000,0x6000,0x0,0x6000,0x6000,0x0,0x4800,0x4800,0x0,0xff7fff7f,0xff7fff7f,0x0,0xff7fff7f,0x0,0x0,0xff7fff7f,0x0,0xff7fff7f,0xff7fff7f,0x0,0x0,0xff7fff7f,0x0,0x0,0xff7fff7f,0xff7fff7f,0xff7fff7f,0x0,0xff7fff7f,0x98000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x500,0x0,0x0,0x0,0x500,0x3f,0x500,0x3f,0x500,0x3f,0x500,0x3f,0x500,0x3f,0x500,0x3f,0x500,0x3f,0x500,0x0,0x500,0x0,0x500,0x0,0x0,0x500,0x0,0x500,0x3f,0x500,0x3f,0x4,0x0,0x0,0x500,0x3f,0x500,0x0,0x0,0x500,0x3f,0x500,0x0,0x0,0x0,0x0,0x4,0x500,0x0,0x0,0x500,0x0,0x0,0x500,0x0,0x0,0x500,0x3f,0x500,0x0,0x0,0x500,0x3f,0x500,0x4,0x0,0x0,0x500,0x3f,0x500,0x3f,0x3f,0x500,0x3f,0x0,0x3f,0x500,0x3f,0x4,0x3f,0x500,0x4,0x3f,0x500,0x3f,0x500,0x12,0x0,0x0,0x500,0x3f,0x500,0x3f,0x500,0x3f,0x500,0x3f,0x500,0x3f,0x500,0x0,0x0,0x0,0x500,0x0,0x0,0x0,0x500,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x500,0x3f,0x20,0x3f,0x500,0x3f,0x0,0x0,0x500,0x0,0x0,0x0,0x500,0x0,0x0,0x500,0x0,0x0,0x500,0x500,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x3f,0x3f,0x500,0x3f,0x500,0x0,0x0,0x0,0x500,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x500,0x0,0x0,0x500,0x0,0x0,0x500,0x0,0x0,0x500,0x0,0x0,0x500,0x3f,0x103f,0x1000,0x3f,0x2000,0x1000,0x803f,0x0,0x3f,0x103f,0x2000,0x1000,0x3f,0x2000,0x0,0x3f,0x1f,0x3f,0x80000,0x3f,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[307];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public yang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public yang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new yangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 219; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 219; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public yang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new yangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 219; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 219; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public yang(yangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 219; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(yangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 219; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[116];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 219; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 116; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 307; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
            case 159: jj_3_160(); break;
            case 160: jj_3_161(); break;
            case 161: jj_3_162(); break;
            case 162: jj_3_163(); break;
            case 163: jj_3_164(); break;
            case 164: jj_3_165(); break;
            case 165: jj_3_166(); break;
            case 166: jj_3_167(); break;
            case 167: jj_3_168(); break;
            case 168: jj_3_169(); break;
            case 169: jj_3_170(); break;
            case 170: jj_3_171(); break;
            case 171: jj_3_172(); break;
            case 172: jj_3_173(); break;
            case 173: jj_3_174(); break;
            case 174: jj_3_175(); break;
            case 175: jj_3_176(); break;
            case 176: jj_3_177(); break;
            case 177: jj_3_178(); break;
            case 178: jj_3_179(); break;
            case 179: jj_3_180(); break;
            case 180: jj_3_181(); break;
            case 181: jj_3_182(); break;
            case 182: jj_3_183(); break;
            case 183: jj_3_184(); break;
            case 184: jj_3_185(); break;
            case 185: jj_3_186(); break;
            case 186: jj_3_187(); break;
            case 187: jj_3_188(); break;
            case 188: jj_3_189(); break;
            case 189: jj_3_190(); break;
            case 190: jj_3_191(); break;
            case 191: jj_3_192(); break;
            case 192: jj_3_193(); break;
            case 193: jj_3_194(); break;
            case 194: jj_3_195(); break;
            case 195: jj_3_196(); break;
            case 196: jj_3_197(); break;
            case 197: jj_3_198(); break;
            case 198: jj_3_199(); break;
            case 199: jj_3_200(); break;
            case 200: jj_3_201(); break;
            case 201: jj_3_202(); break;
            case 202: jj_3_203(); break;
            case 203: jj_3_204(); break;
            case 204: jj_3_205(); break;
            case 205: jj_3_206(); break;
            case 206: jj_3_207(); break;
            case 207: jj_3_208(); break;
            case 208: jj_3_209(); break;
            case 209: jj_3_210(); break;
            case 210: jj_3_211(); break;
            case 211: jj_3_212(); break;
            case 212: jj_3_213(); break;
            case 213: jj_3_214(); break;
            case 214: jj_3_215(); break;
            case 215: jj_3_216(); break;
            case 216: jj_3_217(); break;
            case 217: jj_3_218(); break;
            case 218: jj_3_219(); break;
            case 219: jj_3_220(); break;
            case 220: jj_3_221(); break;
            case 221: jj_3_222(); break;
            case 222: jj_3_223(); break;
            case 223: jj_3_224(); break;
            case 224: jj_3_225(); break;
            case 225: jj_3_226(); break;
            case 226: jj_3_227(); break;
            case 227: jj_3_228(); break;
            case 228: jj_3_229(); break;
            case 229: jj_3_230(); break;
            case 230: jj_3_231(); break;
            case 231: jj_3_232(); break;
            case 232: jj_3_233(); break;
            case 233: jj_3_234(); break;
            case 234: jj_3_235(); break;
            case 235: jj_3_236(); break;
            case 236: jj_3_237(); break;
            case 237: jj_3_238(); break;
            case 238: jj_3_239(); break;
            case 239: jj_3_240(); break;
            case 240: jj_3_241(); break;
            case 241: jj_3_242(); break;
            case 242: jj_3_243(); break;
            case 243: jj_3_244(); break;
            case 244: jj_3_245(); break;
            case 245: jj_3_246(); break;
            case 246: jj_3_247(); break;
            case 247: jj_3_248(); break;
            case 248: jj_3_249(); break;
            case 249: jj_3_250(); break;
            case 250: jj_3_251(); break;
            case 251: jj_3_252(); break;
            case 252: jj_3_253(); break;
            case 253: jj_3_254(); break;
            case 254: jj_3_255(); break;
            case 255: jj_3_256(); break;
            case 256: jj_3_257(); break;
            case 257: jj_3_258(); break;
            case 258: jj_3_259(); break;
            case 259: jj_3_260(); break;
            case 260: jj_3_261(); break;
            case 261: jj_3_262(); break;
            case 262: jj_3_263(); break;
            case 263: jj_3_264(); break;
            case 264: jj_3_265(); break;
            case 265: jj_3_266(); break;
            case 266: jj_3_267(); break;
            case 267: jj_3_268(); break;
            case 268: jj_3_269(); break;
            case 269: jj_3_270(); break;
            case 270: jj_3_271(); break;
            case 271: jj_3_272(); break;
            case 272: jj_3_273(); break;
            case 273: jj_3_274(); break;
            case 274: jj_3_275(); break;
            case 275: jj_3_276(); break;
            case 276: jj_3_277(); break;
            case 277: jj_3_278(); break;
            case 278: jj_3_279(); break;
            case 279: jj_3_280(); break;
            case 280: jj_3_281(); break;
            case 281: jj_3_282(); break;
            case 282: jj_3_283(); break;
            case 283: jj_3_284(); break;
            case 284: jj_3_285(); break;
            case 285: jj_3_286(); break;
            case 286: jj_3_287(); break;
            case 287: jj_3_288(); break;
            case 288: jj_3_289(); break;
            case 289: jj_3_290(); break;
            case 290: jj_3_291(); break;
            case 291: jj_3_292(); break;
            case 292: jj_3_293(); break;
            case 293: jj_3_294(); break;
            case 294: jj_3_295(); break;
            case 295: jj_3_296(); break;
            case 296: jj_3_297(); break;
            case 297: jj_3_298(); break;
            case 298: jj_3_299(); break;
            case 299: jj_3_300(); break;
            case 300: jj_3_301(); break;
            case 301: jj_3_302(); break;
            case 302: jj_3_303(); break;
            case 303: jj_3_304(); break;
            case 304: jj_3_305(); break;
            case 305: jj_3_306(); break;
            case 306: jj_3_307(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
