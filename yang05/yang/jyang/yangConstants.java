/* Generated By:JJTree&JavaCC: Do not edit this line. yangConstants.java */
package jyang;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface yangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DECVALUE = 7;
  /** RegularExpression Id. */
  int NEGDECVALUE = 8;
  /** RegularExpression Id. */
  int NONZERO = 9;
  /** RegularExpression Id. */
  int DQUOTE = 10;
  /** RegularExpression Id. */
  int SQUOTE = 11;
  /** RegularExpression Id. */
  int DDOT = 12;
  /** RegularExpression Id. */
  int DATE = 13;
  /** RegularExpression Id. */
  int FDIGIT = 14;
  /** RegularExpression Id. */
  int TDIGIT = 15;
  /** RegularExpression Id. */
  int STRING = 16;
  /** RegularExpression Id. */
  int FLOAT = 17;
  /** RegularExpression Id. */
  int EXPONENT = 18;
  /** RegularExpression Id. */
  int anyxmlkeyword = 19;
  /** RegularExpression Id. */
  int argumentkeyword = 20;
  /** RegularExpression Id. */
  int augmentkeyword = 21;
  /** RegularExpression Id. */
  int basekeyword = 22;
  /** RegularExpression Id. */
  int belongstokeyword = 23;
  /** RegularExpression Id. */
  int bitkeyword = 24;
  /** RegularExpression Id. */
  int casekeyword = 25;
  /** RegularExpression Id. */
  int choicekeyword = 26;
  /** RegularExpression Id. */
  int configkeyword = 27;
  /** RegularExpression Id. */
  int contactkeyword = 28;
  /** RegularExpression Id. */
  int containerkeyword = 29;
  /** RegularExpression Id. */
  int defaultkeyword = 30;
  /** RegularExpression Id. */
  int descriptionkeyword = 31;
  /** RegularExpression Id. */
  int enumkeyword = 32;
  /** RegularExpression Id. */
  int errorapptagkeyword = 33;
  /** RegularExpression Id. */
  int errormessagekeyword = 34;
  /** RegularExpression Id. */
  int extensionkeyword = 35;
  /** RegularExpression Id. */
  int deviationkeyword = 36;
  /** RegularExpression Id. */
  int deviatekeyword = 37;
  /** RegularExpression Id. */
  int featurekeyword = 38;
  /** RegularExpression Id. */
  int fractiondigitkeyword = 39;
  /** RegularExpression Id. */
  int groupingkeyword = 40;
  /** RegularExpression Id. */
  int identitykeyword = 41;
  /** RegularExpression Id. */
  int iffeaturekeyword = 42;
  /** RegularExpression Id. */
  int importkeyword = 43;
  /** RegularExpression Id. */
  int includekeyword = 44;
  /** RegularExpression Id. */
  int inputkeyword = 45;
  /** RegularExpression Id. */
  int keykeyword = 46;
  /** RegularExpression Id. */
  int leafkeyword = 47;
  /** RegularExpression Id. */
  int leaflistkeyword = 48;
  /** RegularExpression Id. */
  int lengthkeyword = 49;
  /** RegularExpression Id. */
  int listkeyword = 50;
  /** RegularExpression Id. */
  int mandatorykeyword = 51;
  /** RegularExpression Id. */
  int maxelementskeyword = 52;
  /** RegularExpression Id. */
  int minelementskeyword = 53;
  /** RegularExpression Id. */
  int modulekeyword = 54;
  /** RegularExpression Id. */
  int mustkeyword = 55;
  /** RegularExpression Id. */
  int namespacekeyword = 56;
  /** RegularExpression Id. */
  int notificationkeyword = 57;
  /** RegularExpression Id. */
  int orderedbykeyword = 58;
  /** RegularExpression Id. */
  int organizationkeyword = 59;
  /** RegularExpression Id. */
  int outputkeyword = 60;
  /** RegularExpression Id. */
  int pathkeyword = 61;
  /** RegularExpression Id. */
  int patternkeyword = 62;
  /** RegularExpression Id. */
  int positionkeyword = 63;
  /** RegularExpression Id. */
  int prefixkeyword = 64;
  /** RegularExpression Id. */
  int presencekeyword = 65;
  /** RegularExpression Id. */
  int rangekeyword = 66;
  /** RegularExpression Id. */
  int referencekeyword = 67;
  /** RegularExpression Id. */
  int refinekeyword = 68;
  /** RegularExpression Id. */
  int requireinstancekeyword = 69;
  /** RegularExpression Id. */
  int revisionkeyword = 70;
  /** RegularExpression Id. */
  int revisiondatekeyword = 71;
  /** RegularExpression Id. */
  int rpckeyword = 72;
  /** RegularExpression Id. */
  int statuskeyword = 73;
  /** RegularExpression Id. */
  int submodulekeyword = 74;
  /** RegularExpression Id. */
  int typekeyword = 75;
  /** RegularExpression Id. */
  int typedefkeyword = 76;
  /** RegularExpression Id. */
  int uniquekeyword = 77;
  /** RegularExpression Id. */
  int unitskeyword = 78;
  /** RegularExpression Id. */
  int useskeyword = 79;
  /** RegularExpression Id. */
  int valuekeyword = 80;
  /** RegularExpression Id. */
  int whenkeyword = 81;
  /** RegularExpression Id. */
  int yangversionkeyword = 82;
  /** RegularExpression Id. */
  int yinelementkeyword = 83;
  /** RegularExpression Id. */
  int addkeyword = 84;
  /** RegularExpression Id. */
  int currentkeyword = 85;
  /** RegularExpression Id. */
  int deprecatedkeyword = 86;
  /** RegularExpression Id. */
  int deletekeyword = 87;
  /** RegularExpression Id. */
  int falsekeyword = 88;
  /** RegularExpression Id. */
  int minkeyword = 89;
  /** RegularExpression Id. */
  int maxkeyword = 90;
  /** RegularExpression Id. */
  int nankeyword = 91;
  /** RegularExpression Id. */
  int neginfkeyword = 92;
  /** RegularExpression Id. */
  int notsupportedkeyword = 93;
  /** RegularExpression Id. */
  int obsoletekeyword = 94;
  /** RegularExpression Id. */
  int posinfkeyword = 95;
  /** RegularExpression Id. */
  int replacekeyword = 96;
  /** RegularExpression Id. */
  int systemkeyword = 97;
  /** RegularExpression Id. */
  int truekeyword = 98;
  /** RegularExpression Id. */
  int unboundedkeyword = 99;
  /** RegularExpression Id. */
  int userkeyword = 100;
  /** RegularExpression Id. */
  int IDENTIFIER = 101;
  /** RegularExpression Id. */
  int LETTER = 102;
  /** RegularExpression Id. */
  int DIGIT = 103;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<DECVALUE>",
    "<NEGDECVALUE>",
    "<NONZERO>",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"..\"",
    "<DATE>",
    "<FDIGIT>",
    "<TDIGIT>",
    "<STRING>",
    "<FLOAT>",
    "<EXPONENT>",
    "\"anyxml\"",
    "\"argument\"",
    "\"augment\"",
    "\"base\"",
    "\"belongs-to\"",
    "\"bit\"",
    "\"case\"",
    "\"choice\"",
    "\"config\"",
    "\"contact\"",
    "\"container\"",
    "\"default\"",
    "\"description\"",
    "\"enum\"",
    "\"error-app-tag\"",
    "\"error-message\"",
    "\"extension\"",
    "\"deviation\"",
    "\"deviate\"",
    "\"feature\"",
    "\"fraction-digit\"",
    "\"grouping\"",
    "\"identity\"",
    "\"if-feature\"",
    "\"import\"",
    "\"include\"",
    "\"input\"",
    "\"key\"",
    "\"leaf\"",
    "\"leaf-list\"",
    "\"length\"",
    "\"list\"",
    "\"mandatory\"",
    "\"max-elements\"",
    "\"min-elements\"",
    "\"module\"",
    "\"must\"",
    "\"namespace\"",
    "\"notification\"",
    "\"ordered-by\"",
    "\"organization\"",
    "\"output\"",
    "\"path\"",
    "\"pattern\"",
    "\"position\"",
    "\"prefix\"",
    "\"presence\"",
    "\"range\"",
    "\"reference\"",
    "\"refine\"",
    "\"require-instance\"",
    "\"revision\"",
    "\"revision-date\"",
    "\"rpc\"",
    "\"status\"",
    "\"submodule\"",
    "\"type\"",
    "\"typedef\"",
    "\"unique\"",
    "\"units\"",
    "\"uses\"",
    "\"value\"",
    "\"when\"",
    "\"yang-version\"",
    "\"yin-element\"",
    "\"add\"",
    "\"current\"",
    "\"deprecated\"",
    "\"delete\"",
    "\"false\"",
    "\"min\"",
    "\"max\"",
    "\"NaN\"",
    "\"-INF\"",
    "\"not-supported\"",
    "\"obsolete\"",
    "\"INF\"",
    "\"replace\"",
    "\"system\"",
    "\"true\"",
    "\"unbounded\"",
    "\"user\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\":\"",
    "\"/\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
  };

}
