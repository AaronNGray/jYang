options{  MULTI = true;  NODE_DEFAULT_VOID = true;  NODE_PREFIX = "YANG_";  NODE_PACKAGE = "jyang.parser";}PARSER_BEGIN(yang)package jyang.parser;import java.util.Enumeration;import java.util.Vector;import java.io.*;public class yang{  static private String filename;  static public void setFileName(String f)  {    filename = f;  }}PARSER_END(yang)TOKEN :{  < CMT :    (      "//" (~[ "\n", "\r" ])*      (        "\n"      | "\r"      | "\r\n"      )    )  |    (      "/*" (~[ "*" ])* "*"      (        ~[ "/" ] (~[ "*" ])* "*"      )*      "/"    ) >}TOKEN :{  < STRING :    (      "\""      (        ~[ "\"" ]      | "\\\""      )*      "\""      (        (          [ " ", "\t", "\n" ]        | < CMT >        )*        "+"        (          [ " ", "\t", "\n" ]        | < CMT >        )*        (          (            "\""            (              ~[ "\"" ]            | "\\\""            )*            "\""          )        |          (            "\'"            (              ~[ "\'" ]            | "\\\'"            )*            "\'"          )        )      )*    )  |    (      "\'" (~[ "\'" ])* "\'"      (        (          [ " ", "\t", "\n" ]        | < CMT >        )*        "+"        (          [ " ", "\t", "\n" ]        | < CMT >        )*        (          (            "\""            (              ~[ "\"" ]            | "\\\""            )*            "\""          )        |          (            "\'"            (              ~[ "\'" ]            | "\\\'"            )*            "\'"          )        )      )*    ) >}TOKEN :{  < WSP :    " "  | "\t" >| < CRLF :    "\n"  | "\r" >}TOKEN : /* KEYWORDS */{  < LB : "{" >| < RB : "}" >| < SC : ";" >| < anyxmlkeyword : "anyxml" >| < argumentkeyword : "argument" >| < augmentkeyword : "augment" >| < basekeyword : "base" >| < belongstokeyword : "belongs-to" >| < bitkeyword : "bit" >| < casekeyword : "case" >| < choicekeyword : "choice" >| < configkeyword : "config" >| < contactkeyword : "contact" >| < containerkeyword : "container" >| < defaultkeyword : "default" >| < descriptionkeyword : "description" >| < enumkeyword : "enum" >| < errorapptagkeyword : "error-app-tag" >| < errormessagekeyword : "error-message" >| < extensionkeyword : "extension" >| < deviationkeyword : "deviation" >| < deviatekeyword : "deviate" >| < featurekeyword : "feature" >| < fractiondigitskeyword : "fraction-digits" >| < groupingkeyword : "grouping" >| < identitykeyword : "identity" >| < iffeaturekeyword : "if-feature" >| < importkeyword : "import" >| < includekeyword : "include" >| < inputkeyword : "input" >| < keykeyword : "key" >| < leafkeyword : "leaf" >| < leaflistkeyword : "leaf-list" >| < lengthkeyword : "length" >| < listkeyword : "list" >| < mandatorykeyword : "mandatory" >| < maxelementskeyword : "max-elements" >| < minelementskeyword : "min-elements" >| < modulekeyword : "module" >| < mustkeyword : "must" >| < namespacekeyword : "namespace" >| < notificationkeyword : "notification" >| < orderedbykeyword : "ordered-by" >| < organizationkeyword : "organization" >| < outputkeyword : "output" >| < pathkeyword : "path" >| < patternkeyword : "pattern" >| < positionkeyword : "position" >| < prefixkeyword : "prefix" >| < presencekeyword : "presence" >| < rangekeyword : "range" >| < referencekeyword : "reference" >| < refinekeyword : "refine" >| < requireinstancekeyword : "require-instance" >| < revisionkeyword : "revision" >| < revisiondatekeyword : "revision-date" >| < rpckeyword : "rpc" >| < statuskeyword : "status" >| < submodulekeyword : "submodule" >| < typekeyword : "type" >| < typedefkeyword : "typedef" >| < uniquekeyword : "unique" >| < unitskeyword : "units" >| < useskeyword : "uses" >| < valuekeyword : "value" >| < whenkeyword : "when" >| < yangversionkeyword : "yang-version" >| < yinelementkeyword : "yin-element" >| < addkeyword : "add" >| < currentkeyword : "current" >| < deprecatedkeyword : "deprecated" >| < deletekeyword : "delete" >| < falsekeyword : "false" >| < minkeyword : "min" >| < maxkeyword : "max" >| < nankeyword : "NaN" >| < neginfkeyword : "-INF" >| < notsupportedkeyword : "not-supported" >| < obsoletekeyword : "obsolete" >| < posinfkeyword : "INF" >| < replacekeyword : "replace" >| < systemkeyword : "system" >| < truekeyword : "true" >| < unboundedkeyword : "unbounded" >| < userkeyword : "user" >| < P : < S > ":" < S > >| < S : (~[ " ", "{", "}", ";", "\t", "\n" ])+ >}JAVACODE void skip_to(int kind){  Token tok = getNextToken();  //System.out.print("skip : ");  YangErrorManager.addError  (    filename, tok.beginLine, tok.beginColumn, "unex_kw", tok.toString()  )  ;  boolean bracked = false;  if (kind != RB) while (tok.kind != kind)  {   // System.out.print(tok);    tok = getNextToken();  }  else  {    int level = 1;    boolean close = false;    while (!close)    {     // System.out.print(tok);      if (tok.kind == LB) level++;      if (tok.kind == RB) level--;      if (tok.kind == RB && level == 0) close = true;      if (level < 0) close = true;      if (!close) tok = getNextToken();    }  }  //System.out.println();}YANG_Specification Start() :{  YANG_Specification n = null;}{  optsep()  (    n = module()    {      return n;    }  | n = submodule()    {      return n;    }  )}YANG_Specification module() #Module :{  Token mt, t = null;  Node n = null;  YANG_Header h = null;  YANG_Linkage l = null;  YANG_Meta m = null;  YANG_Revision r = null;  YANG_Body b = null;  String mname = null;  Token currentToken = null;}{  mt = < modulekeyword > sep() mname = identifierargstr() optsep()  {    jjtThis.setName(mname);    jjtThis.setLine(mt.beginLine);    jjtThis.setCol(mt.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(mt.image);  }  < LB > stmtsep(jjtThis)  (    h = moduleheaderstmts()    {      jjtThis.addHeader(h);    }  )+  (    l = linkagestmts()    {      jjtThis.addLinkage(l);    }  )*  (    m = metastmts()    {      jjtThis.addMeta(m);    }  )*  (    r = revisionstmt() stmtsep(jjtThis) // No conform but saves a rule    {      jjtThis.addRevision(r);    }  )*  (    b = bodystmts()    {      jjtThis.addBody(b);    }  )*  < RB >  {    return jjtThis;  }}YANG_Specification submodule() #SubModule :{  YANG_Header sh = null;  YANG_Linkage l = null;  YANG_Meta s = null;  YANG_Revision r = null;  YANG_Body b = null;  Token st, t;  String mname = "";}{  st = < submodulekeyword > sep() mname = identifierargstr() optsep()  {    jjtThis.setSubModule(mname);    jjtThis.setLine(st.beginLine);    jjtThis.setCol(st.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(st.image);  }  < LB > stmtsep(jjtThis)  (    sh = submoduleheaderstmts()    {      jjtThis.addHeader(sh);    }  )+  (    l = linkagestmts()    {      jjtThis.addLinkage(l);    }  )*  (    s = metastmts()    {      jjtThis.addMeta(s);    }  )*  (    r = revisionstmt() stmtsep(jjtThis) // No conform but saves a rule    {      jjtThis.addRevision(r);    }  )*  (    b = bodystmts()    {      jjtThis.addBody(b);    }  )*  < RB >  {    return jjtThis;  }}YANG_Header moduleheaderstmts() :{  YANG_Header h = null;}{  (    h = yangversionstmt() stmtsep(h)  | h = namespacestmt() stmtsep(h)  | h = prefixstmt() stmtsep(h)  )  {    return h;  }}YANG_Header submoduleheaderstmts() : // these stmts can appear in any order
{  YANG_Header h = null;}{  (    h = belongstostmt() stmtsep(h)  | h = yangversionstmt() stmtsep(h)  )  {    return h;  }}YANG_Meta metastmts() : // these stmts can appear in any order
{  YANG_Meta n = null;}{  (    n = organizationstmt() stmtsep(n)  | n = contactstmt() stmtsep(n)  | n = descriptionstmt() stmtsep(n)  | n = referencestmt() stmtsep(n)  )  {    return (YANG_Meta) n;  }}YANG_Linkage linkagestmts() :{  YANG_Linkage n = null;}{  // these stmts can appear in any order
  (    n = importstmt() stmtsep(n)  | n = includestmt() stmtsep(n)  )  {    return n;  }}YANG_Body bodystmts() :{  YANG_Body b = null;  boolean ended = false;}{  (    (      b = extensionstmt()    | b = featurestmt()    | b = identitystmt()    | b = typedefstmt()    | b = groupingstmt()    | b = datadefstmt()    | b = augmentstmt()    | b = rpcstmt()    | b = notificationstmt()    | b = deviationstmt()    )    stmtsep(b)  )  {    return b;  }}YANG_DataDef datadefstmt() :{  YANG_DataDef d = null;}{  (    d = containerstmt()  | d = leafstmt()  | d = leafliststmt()  | d = liststmt()  | d = choicestmt()  | d = anyxmlstmt()  | d = usesstmt()  )  {    return d;  }}YANG_YangVersion yangversionstmt() #YangVersion :{  Token yt;  String y = null;}{  yt = < yangversionkeyword > sep() y = yangversionargstr() optsep() stmtend(jjtThis)  {    jjtThis.setVersion(y);    jjtThis.setFileName(filename);    jjtThis.setLine(yt.beginLine);    jjtThis.setCol(yt.beginColumn);    jjtThis.setLabel(yt.image);    return jjtThis;  }}String yangversionargstr() :{  String y = null;}{  //< a string which matches the rule  // yang-version-arg >  y = stringoroneword()  {    return y;  }}YANG_Import importstmt() #Import :{  Token t;  YANG_Prefix n = null;  String i;  YANG_Revision r = null;}{  t = < importkeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setIdentifier(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);  }  < LB > stmtsep(jjtThis)  (    n = prefixstmt() stmtsep(jjtThis)    {      jjtThis.setPrefix(n);    }    [      r = revisiondatestmt() stmtsep(jjtThis)      {        jjtThis.setRevision(r);      }    ]  )*  < RB >  {    //jjtThis.setFileName("import " + filename);
    return jjtThis;  }}YANG_Include includestmt() #Include :{  Token t;  String i;  YANG_Revision r = null;}{  t = < includekeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setIdentifier(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    [      r = revisiondatestmt() stmtsep(jjtThis)      {        jjtThis.setRevision(r);      }    ]    < RB >  )  {    return jjtThis;  }}YANG_NameSpace namespacestmt() #NameSpace :{  String uri;  Token t, tn;}{  t = < namespacekeyword > sep() uri = uristr() optsep() stmtend(jjtThis)  {    jjtThis.setNameSpace(uri);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}String uristr() :{  Token u, p;  String s = "";}{  //< a sring which matches the rule
  //   URI in RFC 3986 >  (    s = stringoroneword()  )  {    return s;  }}YANG_Prefix prefixstmt() #Prefix :{  String s;  Token t;}{  t = < prefixkeyword > sep() s = prefixargstr() optsep() stmtend(jjtThis)  {    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setPrefix(s);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Belong belongstostmt() #Belong :{  Token t;  String b = null;  YANG_Prefix p = null;}{  t = < belongstokeyword > sep() b = identifierargstr() optsep() < LB > stmtsep(jjtThis) p = prefixstmt() stmtsep(jjtThis) < RB >  {    jjtThis.setBelong(b);    jjtThis.setPrefix(p);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Organization organizationstmt() #Organization :{  Token t;  String s;}{  t = < organizationkeyword > sep() s = stringoroneword() optsep() stmtend(jjtThis)  {    jjtThis.setOrganization(s);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Contact contactstmt() #Contact :{  Token t;  String c;}{  t = < contactkeyword > sep() c = stringoroneword() optsep() stmtend(jjtThis)  {    jjtThis.setContact(c);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Description descriptionstmt() #Description :{  Token t;  String d = "";}{  t = < descriptionkeyword > sep() d = stringoroneword() optsep() stmtend(jjtThis)  {    jjtThis.setDescription(d);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Reference referencestmt() #Reference :{  Token t;  String r;}{  t = < referencekeyword > sep() r = stringoroneword() optsep() stmtend(jjtThis)  {    jjtThis.setReference(r);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Units unitsstmt() #Units :{  Token t, ut;  String u = null;}{  t = < unitskeyword > sep() u = stringoroneword() optsep() stmtend(jjtThis)  {    jjtThis.setUnits(u);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Revision revisionstmt() #Revision :{  Token t;  YANG_Description d = null;  YANG_Reference r = null;  String da = null;}{  t = < revisionkeyword > sep() da = revisiondate() optsep()  {    jjtThis.setDate(da);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);  }  (    < SC >  |    (      < LB > stmtsep(jjtThis) [ d = descriptionstmt() stmtsep(jjtThis) ] [ r = referencestmt() stmtsep(jjtThis) ] < RB >      {        if (d != null) jjtThis.setDescription(d);        if (r != null) jjtThis.setReference(r);      }    )  )  {    return jjtThis;  }}String revisiondate() :{  String r = null;}{  r = dateargstr()  {    return r;  }}YANG_Revision revisiondatestmt() #Revision :{  Token t;  YANG_Description d = null;  String da = null;}{  t = < revisiondatekeyword > sep() da = revisiondate() stmtend(jjtThis)  {    jjtThis.setDate(da);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);  }  {    return jjtThis;  }}YANG_Extension extensionstmt() #Extension :{  Token t;  String s = null;  YANG_Argument a = null;  YANG_Status st = null;  YANG_Description d = null;  YANG_Reference r = null;}{  t = < extensionkeyword > sep() s = identifierargstr() optsep()  {    jjtThis.setExtension(s);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      //extensionAnyOrder()
      a = argumentstmt() stmtsep(jjtThis)      {        jjtThis.setArgument(a);      }    | st = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(st);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_Argument argumentstmt() #Argument :{  YANG_Yin y = null;  String i = null;  Token t, a;  String any = "";}{  t = < argumentkeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setArgument(i);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    [      y = yinelementstmt() stmtsep(jjtThis)      {        jjtThis.setYin(y);      }    ]    < RB >  )  {    return jjtThis;  }}YANG_Yin yinelementstmt() #Yin :{  Token t;  String y = null;}{  t = < yinelementkeyword > sep() y = yinelementargstr() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setYin(y);    jjtThis.setLabel(t.image);    return jjtThis;  }}String yinelementargstr() :{  String y = null;}{  //< a string which matches the rule
  //   yinelementarg >
  y = stringoroneword()  {    return y;  }}YANG_Identity identitystmt() #Identity :{  Token t;  String i = null;  YANG_Base b = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  t = < identitykeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setIdentity(i);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > optsep()    (      b = basestmt() stmtsep(jjtThis)      {        jjtThis.setBase(b);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_Base basestmt() #Base :{  Token t;  String i = null;}{  t = < basekeyword > sep() i = identifierrefargstr() stmtend(jjtThis)  {    jjtThis.setBase(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Feature featurestmt() #Feature :{  Token t;  String f = null;  YANG_IfFeature i = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  t = < featurekeyword > sep() f = identifierargstr() optsep()  {    jjtThis.setFeature(f);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      i = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(i);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_IfFeature iffeaturestmt() #IfFeature :{  Token t;  String i = null;}{  t = < iffeaturekeyword > sep() i = identifierrefargstr() stmtend(jjtThis)  {    jjtThis.setIfFeature(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_TypeDef typedefstmt() #TypeDef :{  Token t;  String i = null;  YANG_Type ty = null;  YANG_Units u = null;  YANG_Default df = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  t = < typedefkeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setTypedef(i);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);  }  < LB > stmtsep(jjtThis)  (    ty = typestmt() stmtsep(jjtThis)    {      jjtThis.setType(ty);    }  | u = unitsstmt() stmtsep(jjtThis)    {      jjtThis.setUnits(u);    }  | df = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(df);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  < RB >  {    return jjtThis;  }}YANG_Type typestmt() #Type :{  Token t;  boolean header = false, lb = false;  String it = null;  YANG_Base i = null;  String ii = null;  YANG_Enum e = null;  YANG_Decimal64Spec d = null;  YANG_LeafRefSpecification k = null;  YANG_BitSpecification b = null;  YANG_UnionSpecification u = null;  YANG_NumericalRestriction n = null;  YANG_StringRestriction s = null;}{  try  {    t = < typekeyword > sep() it = identifierrefargstr() optsep()    {      jjtThis.setType(it);      jjtThis.setFileName(filename);      jjtThis.setLine(t.beginLine);      jjtThis.setCol(t.beginColumn);      jjtThis.setLabel(t.image);      header = true;    }    (< SC >  | (< LB >    {      lb = true;    }    stmtsep(jjtThis) (n = numericalrestrictions()    {      jjtThis.setNumRest(n);    }  | d = decimal64specification()    {      jjtThis.setDec64Spec(d);    }  | s = stringrestrictions()    {      jjtThis.setStringRest(s);    }  | (LOOKAHEAD(2)    e = enumstmt() optsep() // No conform to save a rule    {      jjtThis.addEnum(e);    }    ) +  | LOOKAHEAD(2)    k = leafrefspecification()    {      jjtThis.setLeafRef(k);    }  | LOOKAHEAD(2)    u = unionspecification()    {      jjtThis.setUnionSpec(u);    }  | ii = instanceidentifierspecification(jjtThis)    {      jjtThis.setInstanceIdentifierSpec(ii);    }  | i = identityrefspecification(jjtThis)    {      jjtThis.setIdentityRefSpec(i);    }  | b = bitsspecification()    {      jjtThis.setBitSpec(b);    }    ) * < RB >))    {      //jjtThis.checkTypeSyntax();
      return jjtThis;    }  }  catch (ParseException pe)  {    if (lb)    {      skip_to(RB);    }    else YangErrorManager.addError(filename, token.beginLine, token.endColumn + 1, "token_exp", ";");    return jjtThis;  }}YANG_NumericalRestriction numericalrestrictions() :{  YANG_Range r = null;}{  r = rangestmt() stmtsep(r)  {    return r;  }}YANG_Range rangestmt() #Range :{  String r = null;  YANG_ErrorMessage errmess = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference re = null;  Token rt = null;}{  rt = < rangekeyword > sep() r = rangeargstr() optsep()  {    jjtThis.setLine(rt.beginLine);    jjtThis.setCol(rt.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(rt.image);    jjtThis.setRange(r);  }  (    < SC >  | < LB > stmtsep(jjtThis)    //(rangeAnyOrder())*
    (      errmess = errormessagestmt() stmtsep(jjtThis)      {        jjtThis.setErrMess(errmess);      }    | eat = errorapptagstmt() stmtsep(jjtThis)      {        jjtThis.setErrAppTag(eat);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | re = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(re);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_Decimal64Spec decimal64specification() #Decimal64Spec :{  String s = null;  YANG_Range r = null;}{  (    s = fractiondigitstmt(jjtThis) optsep()    [      LOOKAHEAD(2)      r = rangestmt()      {        jjtThis.setRange(r);      }    ]    optsep()    {      jjtThis.setFractionDigit(s);      jjtThis.setFileName(filename);      return jjtThis;    }  )}String fractiondigitstmt(YANG_Decimal64Spec j) :{  Token f = null;  String s = null;}{  f = < fractiondigitskeyword > sep() s = fractiondigitargstr() stmtend(j)  {    j.setLine(f.beginLine);    j.setCol(f.beginColumn);    j.setLabel(f.image);    return s;  }}String fractiondigitargstr() :{  String f = null;}{  f = stringoroneword()  {    return f;  }}YANG_StringRestriction stringrestrictions() #StringRestriction :// these stmts can appear in any order{  YANG_Length l = null;  YANG_Pattern p = null;}{  (    (      l = lengthstmt() stmtsep(jjtThis)      {        jjtThis.setLine(l.getLine());        jjtThis.setCol(l.getCol());        jjtThis.setFileName(filename);        jjtThis.setLength(l);      }      (        LOOKAHEAD(2)        p = patternstmt() stmtsep(jjtThis)        {          jjtThis.setLine(p.getLine());          jjtThis.setCol(p.getCol());          jjtThis.setFileName(filename);          jjtThis.addPattern(p);        }      )*    )  |    (      LOOKAHEAD(2)      p = patternstmt() stmtsep(jjtThis)      {        jjtThis.setLine(p.getLine());        jjtThis.setCol(p.getCol());        jjtThis.setFileName(filename);        jjtThis.addPattern(p);      }    )+    [      LOOKAHEAD(2)      l = lengthstmt() stmtsep(jjtThis)      {        jjtThis.setLine(l.getLine());        jjtThis.setCol(l.getCol());        jjtThis.setFileName(filename);        jjtThis.setLength(l);      }    ]  )  {    return jjtThis;  }}YANG_Length lengthstmt() #Length :{  String l = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference r = null;  Token lk;}{  lk = < lengthkeyword > sep() l = lengthargstr() optsep()  {    jjtThis.setLine(lk.beginLine);    jjtThis.setCol(lk.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(lk.image);    jjtThis.setLength(l);  }  try  {    (< SC >  | < LB > stmtsep(jjtThis)  //(lengthAnyOrder())*
    (em = errormessagestmt() stmtsep(jjtThis)    {      jjtThis.setErrMess(em);    }  | eat = errorapptagstmt() stmtsep(jjtThis)    {      jjtThis.setErrAppTag(eat);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }    ) * < RB >)  }  catch (ParseException p)  {    skip_to(RB);  }  {    return jjtThis;  }}YANG_Pattern patternstmt() #Pattern :{  String p = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt eat = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{  t = < patternkeyword > sep() p = stringoroneword() optsep()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(t.image);    jjtThis.setPattern(p);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      em = errormessagestmt() stmtsep(jjtThis)      {        jjtThis.setErrMess(em);      }    | eat = errorapptagstmt() stmtsep(jjtThis)      {        jjtThis.setErrAppTag(eat);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_Default defaultstmt() #Default :{  Token t, dt;  String d = null;}{  t = < defaultkeyword > sep() d = stringoroneword() stmtend(jjtThis)  {    jjtThis.setDefault(d);    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Enum enumstmt() #Enum :{  String e = null;  YANG_Value v = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t, te;}{  t = < enumkeyword > sep() e = stringoroneword() optsep()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setEnum(e);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      v = valuestmt() stmtsep(jjtThis)      {        jjtThis.setValue(v);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_LeafRefSpecification leafrefspecification() #LeafRefSpecification :{  YANG_Path p = null;  String r = null;}{  (    p = pathstmt() stmtsep(jjtThis)    {      jjtThis.setPath(p);      jjtThis.setFileName(filename);    }    [      LOOKAHEAD(2)      r = requireinstancestmt(jjtThis) stmtsep(jjtThis)    ]  )  {    if (r != null) jjtThis.setRequireInstance(r);    return jjtThis;  }}YANG_Path pathstmt() #Path :{  String p = null;  Token t;}{  t = < pathkeyword > sep() p = pathargstr() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setPath(p);    jjtThis.setLabel(t.image);    return jjtThis;  }}String requireinstancestmt(YangNode j) :{  String s = null;}{  < requireinstancekeyword > sep() s = requireinstanceargstr() stmtend(j)  {    return s;  }}String requireinstanceargstr() :{  String r = null;}{  r = stringoroneword()  {    return r;  }}String instanceidentifierspecification(YangNode j) :{  String s = null;}{  //[                                        No conform because it is not usefulness  s = requireinstancestmt(j) stmtsep(j)  {    return s;  }  //]}YANG_Base identityrefspecification(YangNode j) :{  YANG_Base b = null;}{  b = basestmt() stmtsep(j)  {    return b;  }}YANG_UnionSpecification unionspecification() #UnionSpecification :{  YANG_Type t = null;}{  (    LOOKAHEAD(2)    t = typestmt() stmtsep(jjtThis)    {      jjtThis.addType(t);    }  )+  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_BitSpecification bitsspecification() #BitSpecification :{  YANG_Bit b = null;}{  (    LOOKAHEAD(2)    b = bitstmt() stmtsep(jjtThis)    {      jjtThis.addBit(b);    }  )+  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_Bit bitstmt() #Bit :{  String i = null;  YANG_Position p = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t = null;}{  t = < bitkeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setBit(i);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      p = positionstmt() stmtsep(jjtThis)      {        jjtThis.setPosition(p);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    return jjtThis;  }  //<RB>
}YANG_Position positionstmt() #Position :{  String p = null;  Token t = null;}{  t = < positionkeyword > sep() p = positionvalueargstr() stmtend(jjtThis)  {    jjtThis.setPosition(p);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(t.image);    return jjtThis;  }}String positionvalueargstr() :{  String p = null;}{  // < a string which matches the rule
  //  positionvaluearg >
  p = stringoroneword()  {    return p;  }}YANG_Status statusstmt() #Status :{  Token t;  String s = null;}{  t = < statuskeyword > sep() s = statusargstr() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setStatus(s);    jjtThis.setLabel(t.image);    return jjtThis;  }}String statusargstr() :{  String s = null;}{  s = stringoroneword()  {    return s;  }}YANG_Config configstmt() #Config :{  Token t;  String c = null;}{  t = < configkeyword > sep() c = configargstr() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setConfig(c);    jjtThis.setLabel(t.image);    return jjtThis;  }}String configargstr() :{  String c = null;}{  //	< a string which matches the rule
  //           configarg >  c = stringoroneword()  {    return c;  }}YANG_Mandatory mandatorystmt() #Mandatory :{  Token t;  String m = null;}{  t = < mandatorykeyword > sep() m = mandatoryargstr() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setMandatory(m);    jjtThis.setLabel(t.image);    return jjtThis;  }}String mandatoryargstr() :{  String m = null;}{  //< a string which matches the rule
  //   mandatoryarg >
  m = stringoroneword()  {    return m;  }}YANG_Presence presencestmt() #Presence :{  Token t;  String p = null;}{  t = < presencekeyword > sep() p = stringoroneword() stmtend(jjtThis)  {    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setPresence(p);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_OrderedBy orderedbystmt() #OrderedBy :{  Token t;  String o = null;}{  t = < orderedbykeyword > sep() o = orderedbyargstr() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setOrderedBy(o);    jjtThis.setLabel(t.image);    return jjtThis;  }}String orderedbyargstr() :{  String o = null;}{  //	< a string which matches the rule
  //           orderedbyarg >
  o = stringoroneword()  {    return o;  }}YANG_Must muststmt() #Must :{  Token must;  String m = null;  YANG_ErrorMessage em = null;  YANG_ErrorAppt ea = null;  YANG_Description d = null;  YANG_Reference r = null;}{  must = < mustkeyword > sep() m = string() optsep()  {    jjtThis.setLine(must.beginLine);    jjtThis.setCol(must.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(must.image);    jjtThis.setMust(m);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      em = errormessagestmt() stmtsep(jjtThis)      {        jjtThis.setErrMess(em);      }    | ea = errorapptagstmt() stmtsep(jjtThis)      {        jjtThis.setErrAppTag(ea);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_ErrorMessage errormessagestmt() #ErrorMessage :{  Token t;  String e = null;}{  t = < errormessagekeyword > sep() e = stringoroneword() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setErrorMessage(e);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_ErrorAppt errorapptagstmt() #ErrorAppt :{  Token t;  String e = null;}{  t = < errorapptagkeyword > sep() e = stringoroneword() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setErrorAppt(e);    return jjtThis;  }}YANG_MinElement minelementsstmt() #MinElement :{  Token t;  String m = null;}{  t = < minelementskeyword > sep() m = minvalueargstr() stmtend(jjtThis)  {    jjtThis.setMinElement(m);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(t.image);    return jjtThis;  }}String minvalueargstr() :{  String m = null;}{  //	< a string which matches the rule
  //         minvaluearg >
  m = stringoroneword()  {    return m;  }}YANG_MaxElement maxelementsstmt() #MaxElement :{  Token t;  String m = null;}{  t = < maxelementskeyword > sep() m = maxvalueargstr() stmtend(jjtThis)  {    jjtThis.setFileName(filename);    jjtThis.setMaxElement(m);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setLabel(t.image);    return jjtThis;  }}String maxvalueargstr() :{  String m = null;}{  //	< a string which matches the rule
  //           maxvalue >
  m = stringoroneword()  {    return m;  }}YANG_Value valuestmt() #Value :{  String d = null;  Token t = null;}{  t = < valuekeyword > sep() d = stringoroneword() stmtend(jjtThis)  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setValue(d);    jjtThis.setLabel(t.image);    return jjtThis;  }}YANG_Body groupingstmt() #Grouping :{  boolean lb = false;  Token to;  String i = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef dd = null;}{  try  {    to = < groupingkeyword > sep() i = identifierargstr() optsep()    {      jjtThis.setFileName(filename);      jjtThis.setLine(to.beginLine);      jjtThis.setCol(to.beginColumn);      jjtThis.setGrouping(i);      jjtThis.setLabel(to.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtThis)  //(groupAnyOrder())*
    (try    {      s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    | (LOOKAHEAD(2)      (t = typedefstmt()      {        jjtThis.addTypeDef(t);      }    | g = groupingstmt()      {        if (g instanceof YANG_Grouping) jjtThis.addGrouping((YANG_Grouping) g);      }      ) stmtsep(jjtThis)) +    | dd = datadefstmt() stmtsep(jjtThis)      {        jjtThis.addDataDef(dd);      }    }    catch (ParseException p)    {      getNextToken();    }    ) * < RB >)    {      return jjtThis;    }  }  catch (ParseException pe)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn + 1, "token_exp", ";");    return jjtThis;  }}YANG_Container containerstmt() #Container :{  boolean lb = false;  Token to;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must m = null;  YANG_Presence p = null;  YANG_Config c = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef da = null;}{  try  {    to = < containerkeyword > sep() i = identifierargstr() optsep()    {      jjtThis.setFileName(filename);      jjtThis.setLine(to.beginLine);      jjtThis.setCol(to.beginColumn);      jjtThis.setContainer(i);      jjtThis.setLabel(to.image);    }    (< SC >  | < LB >    {      lb = true;    }    stmtsep(jjtThis)  //(containerAnyOrder())*
    (w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | p = presencestmt() stmtsep(jjtThis)    {      jjtThis.setPresence(p);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  | (LOOKAHEAD(2)    (t = typedefstmt()    {      jjtThis.addTypeDef(t);    }  | g = groupingstmt()    {      jjtThis.addGrouping((YANG_Grouping) g);    }    ) stmtsep(jjtThis)) +  | da = datadefstmt() stmtsep(jjtThis)    {      jjtThis.addDataDef(da);    }    ) * < RB >)    {      return jjtThis;    }  }  catch (ParseException pe)  {    if (lb) skip_to(RB);    else YangErrorManager.addError(filename, token.beginLine, token.endColumn + 1, "token_exp", ";");    return jjtThis;  }}YANG_Leaf leafstmt() #Leaf :{  boolean lb = false;  Token leaf;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Type t = null;  YANG_Units u = null;  YANG_Must m = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_Status s = null;  YANG_Description de = null;  YANG_Reference r = null;}{  try  {    leaf = < leafkeyword > sep() i = identifierargstr() optsep()    {      jjtThis.setLine(leaf.beginLine);      jjtThis.setCol(leaf.beginColumn);      jjtThis.setFileName(filename);      jjtThis.setLeaf(i);      jjtThis.setLabel(leaf.image);    }    < LB >    {      lb = true;    }    stmtsep(jjtThis)  //(leafAnyOrder())*
    (w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | t = typestmt() stmtsep(jjtThis)    {      jjtThis.setType(t);    }  | u = unitsstmt() stmtsep(jjtThis)    {      jjtThis.setUnits(u);    }  | m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | d = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(d);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | ma = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(ma);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | de = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(de);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }    ) * < RB >    {      return jjtThis;    }  }  catch (ParseException pe)  {    if (lb) skip_to(RB);    return jjtThis;  }}YANG_LeafList leafliststmt() #LeafList :{  Token leaflist;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Type t = null;  YANG_Units u = null;  YANG_Must mu = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_OrderedBy o = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  leaflist = < leaflistkeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setLine(leaflist.beginLine);    jjtThis.setCol(leaflist.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLeafList(i);    jjtThis.setLabel(leaflist.image);  }  < LB > stmtsep(jjtThis)  // these stmts can appear in any order
  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | t = typestmt() stmtsep(jjtThis)    {      jjtThis.setType(t);    }  | u = unitsstmt() stmtsep(jjtThis)    {      jjtThis.setUnits(u);    }  | mu = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(mu);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(ma);    }  | o = orderedbystmt() stmtsep(jjtThis)    {      jjtThis.setOrderedBy(o);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  < RB >  {    return jjtThis;  }}YANG_List liststmt() #List :{  Token list;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must m = null;  YANG_Key k = null;  YANG_Unique u = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_OrderedBy o = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef dd = null;}{  list = < listkeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setLine(list.beginLine);    jjtThis.setCol(list.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setList(i);    jjtThis.setLabel(list.image);  }  < LB > stmtsep(jjtThis)  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | k = keystmt() stmtsep(jjtThis)    {      jjtThis.setKey(k);    }  | u = uniquestmt() stmtsep(jjtThis)    {      jjtThis.addUnique(u);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(ma);    }  | o = orderedbystmt() stmtsep(jjtThis)    {      jjtThis.setOrderedBy(o);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  | t = typedefstmt() stmtsep(jjtThis)    {      jjtThis.addTypeDef(t);    }  | g = groupingstmt() stmtsep(jjtThis)    {      jjtThis.addGrouping((YANG_Grouping) g);    }  | dd = datadefstmt() stmtsep(jjtThis)    {      jjtThis.addDataDef(dd);    }  )*  < RB >  {    return jjtThis;  }}YANG_Key keystmt() #Key :{  Token key;  String k = null;}{  key = < keykeyword > sep() k = keyargstr() stmtend(jjtThis)  {    jjtThis.setLine(key.beginLine);    jjtThis.setCol(key.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setKey(k);    jjtThis.setLabel(key.image);    return jjtThis;  }}String keyargstr() :{  String k = null;}{  //< a string which matches the rule
  //   keyarg >  k = stringoroneword()  {    return k;  }}YANG_Unique uniquestmt() #Unique :{  Token unique;  String u = null;}{  unique = < uniquekeyword > sep() u = uniqueargstr() stmtend(jjtThis)  {    jjtThis.setLine(unique.beginLine);    jjtThis.setCol(unique.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setUnique(u);    jjtThis.setLabel(unique.image);    return jjtThis;  }}String uniqueargstr() :{  String u = null;}{  //	< a string which matches the rule
  //           uniquearg >
  u = stringoroneword()  {    return u;  }}YANG_Choice choicestmt() #Choice :{  Token choice;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Default d = null;  YANG_Config cf = null;  YANG_Mandatory m = null;  YANG_Status s = null;  YANG_Description de = null;  YANG_Reference r = null;  YANG_ShortCase sc = null;  YANG_Case c = null;}{  choice = < choicekeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setLine(choice.beginLine);    jjtThis.setCol(choice.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setChoice(i);    jjtThis.setLabel(choice.image);  }  (    < SC >  |    (      < LB > stmtsep(jjtThis)      (        w = whenstmt() stmtsep(jjtThis)        {          jjtThis.setWhen(w);        }      | iff = iffeaturestmt() stmtsep(jjtThis)        {          jjtThis.addIfFeature(iff);        }      | d = defaultstmt() stmtsep(jjtThis)        {          jjtThis.setDefault(d);        }      | cf = configstmt() stmtsep(jjtThis)        {          jjtThis.setConfig(cf);        }      | m = mandatorystmt() stmtsep(jjtThis)        {          jjtThis.setMandatory(m);        }      | s = statusstmt() stmtsep(jjtThis)        {          jjtThis.setStatus(s);        }      | de = descriptionstmt() stmtsep(jjtThis)        {          jjtThis.setDescription(de);        }      | r = referencestmt() stmtsep(jjtThis)        {          jjtThis.setReference(r);        }      | sc = shortcasestmt() stmtsep(jjtThis)        {          jjtThis.addShortCase(sc);        }      | c = casestmt() stmtsep(jjtThis)        {          jjtThis.addCase(c);        }      )*      < RB >    )  )  {    return jjtThis;  }}YANG_ShortCase shortcasestmt() :{  YANG_ShortCase d = null;}{  (    d = containerstmt()  | d = leafstmt()  | d = leafliststmt()  | d = liststmt()  | d = anyxmlstmt()  )  {    return d;  }}YANG_Case casestmt() #Case :{  Token tcase;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DataDef c = null;}{  tcase = < casekeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setLine(tcase.beginLine);    jjtThis.setCol(tcase.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setCase(i);    jjtThis.setLabel(tcase.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    //(caseAnyOrder())*
    (      w = whenstmt() stmtsep(jjtThis)      {        jjtThis.setWhen(w);      }    | iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    | c = datadefstmt() stmtsep(jjtThis)      {        jjtThis.addDataDef(c);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_AnyXml anyxmlstmt() #AnyXml :{  Token any;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Must mu = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;}{  any = < anyxmlkeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setLine(any.beginLine);    jjtThis.setCol(any.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setAnyXml(i);    jjtThis.setLabel(any.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    //(anyxmlAnyOrder())*
    (      w = whenstmt() stmtsep(jjtThis)      {        jjtThis.setWhen(w);      }    | iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | mu = muststmt() stmtsep(jjtThis)      {        jjtThis.addMust(mu);      }    | c = configstmt() stmtsep(jjtThis)      {        jjtThis.setConfig(c);      }    | m = mandatorystmt() stmtsep(jjtThis)      {        jjtThis.setMandatory(m);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_Uses usesstmt() #Uses :{  Token uses;  String i = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_Refine re = null;  YANG_UsesAugment u = null;}{  uses = < useskeyword > sep() i = identifierrefargstr() optsep()  {    jjtThis.setLine(uses.beginLine);    jjtThis.setCol(uses.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setUses(i);    jjtThis.setLabel(uses.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    //(useAnyOrder())*
    (      LOOKAHEAD(3)      w = whenstmt() stmtsep(jjtThis)      {        jjtThis.setWhen(w);      }    | LOOKAHEAD(3)      iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | LOOKAHEAD(3)      s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | LOOKAHEAD(3)      d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | LOOKAHEAD(3)      r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    | re = refinementstmt() stmtsep(jjtThis)      {        jjtThis.addRefinement(re);      }    | u = usesaugmentstmt() stmtsep(jjtThis)      {        jjtThis.addUsesAugment(u);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_Refine refinementstmt() #RefineAnyNode :{  YANG_Must m = null;  YANG_Presence p = null;  YANG_Config c = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_Default dt = null;  YANG_Mandatory ma = null;  YANG_MinElement mi = null;  YANG_MaxElement max = null;  Token t;  String i = null;}{  t = < refinekeyword > sep() i = refineargstr() optsep()  (    < SC >  | < LB > stmtsep(jjtThis)    (      m = muststmt() stmtsep(jjtThis)      {        jjtThis.addMust(m);      }    | p = presencestmt() stmtsep(jjtThis)      {        jjtThis.setPresence(p);      }    | c = configstmt() stmtsep(jjtThis)      {        jjtThis.setConfig(c);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    | dt = defaultstmt() stmtsep(jjtThis)      {        jjtThis.setDefault(dt);      }    | ma = mandatorystmt() stmtsep(jjtThis)      {        jjtThis.setMandatory(ma);      }    | mi = minelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMinElement(mi);      }    | max = maxelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMaxElement(max);      }    )*    < RB >  )  {    jjtThis.setFileName(filename);    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setRefineAnyNodeId(i);    jjtThis.setLabel(t.image);    return jjtThis;  }}String refineargstr() :{  String r = null;}{  r = stringoroneword()  {    return r;  }}YANG_RefineContainer refinecontainerstmt() #RefineContainer :{  YANG_Must m = null;  YANG_Presence p = null;  YANG_Config c = null;  YANG_Description d = null;  YANG_Reference r = null;}{  //(refinecontainerAnyOrder())*
  (    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | p = presencestmt() stmtsep(jjtThis)    {      jjtThis.setPresence(p);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineLeaf refineleafstmt() #RefineLeaf :{  YANG_Must m = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_Description de = null;  YANG_Reference r = null;}{  (    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | d = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(d);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | ma = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(ma);    }  | de = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(de);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineLeafList refineleafliststmt() #RefineLeafList :{  String i = null;  YANG_Must m = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{  //(refineleaflistAnyOrder())*
  (    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(ma);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineList refineliststmt() #RefineList :{  String i = null;  YANG_Must m = null;  YANG_Config c = null;  YANG_MinElement mi = null;  YANG_MaxElement ma = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{  //(refinelistAnyOrder())*
  (    m = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(m);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | mi = minelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMinElement(mi);    }  | ma = maxelementsstmt() stmtsep(jjtThis)    {      jjtThis.setMaxElement(ma);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineChoice refinechoicestmt() #RefineChoice :{  String i = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Description de = null;  YANG_Reference r = null;  Token t;}{  //(refinechoiceAnyOrder())*
  (    d = defaultstmt() stmtsep(jjtThis)    {      jjtThis.setDefault(d);    }  | c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | m = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(m);    }  | de = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(de);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )*  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineCase refinecasestmt() #RefineCase :{  String i = null;  YANG_Description d = null;  YANG_Reference r = null;  Token t;}{  //(refinecaseAnyOrder())*
  (    d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_RefineAnyXml refineanyxmlstmt() #RefineAnyXml :{  String i = null;  YANG_Config c = null;  YANG_Mandatory m = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_Must mu = null;  Token t;}{  //(refineanyxmlAnyOrder())*
  (    mu = muststmt() stmtsep(jjtThis)    {      jjtThis.addMust(mu);    }    c = configstmt() stmtsep(jjtThis)    {      jjtThis.setConfig(c);    }  | m = mandatorystmt() stmtsep(jjtThis)    {      jjtThis.setMandatory(m);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  )  {    jjtThis.setFileName(filename);    return jjtThis;  }}YANG_UsesAugment usesaugmentstmt() #UsesAugment :{  Token aug, aa;  String ds = null;  String a = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DataDef da = null;  YANG_Case c = null;}{  aug = < augmentkeyword > sep() a = usesaugmentargstr() optsep()  {    jjtThis.setLine(aug.beginLine);    jjtThis.setCol(aug.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setUsesAugment(a);    jjtThis.setLabel(aug.image);  }  < LB > stmtsep(jjtThis)  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  |    (      (        da = datadefstmt() stmtsep(jjtThis)      )      {        jjtThis.addDataDef(da);      }    |      (        c = casestmt() stmtsep(jjtThis)      )      {        jjtThis.addCase(c);      }    )  )*  < RB >  {    return jjtThis;  }}String usesaugmentargstr() :{  String s = null;}{  s = stringoroneword()  {    return s;  }}YANG_Augment augmentstmt() #Augment :{  Token aug, aa;  String a = null;  YANG_When w = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DataDef da = null;  YANG_Case c = null;  YANG_Input i = null;  YANG_Output o = null;}{  aug = < augmentkeyword > sep() a = augmentargstr() optsep()  {    jjtThis.setLine(aug.beginLine);    jjtThis.setCol(aug.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setAugment(a);    jjtThis.setLabel(aug.image);  }  < LB > stmtsep(jjtThis)  (    w = whenstmt() stmtsep(jjtThis)    {      jjtThis.setWhen(w);    }  | iff = iffeaturestmt() stmtsep(jjtThis)    {      jjtThis.addIfFeature(iff);    }  | s = statusstmt() stmtsep(jjtThis)    {      jjtThis.setStatus(s);    }  | d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  |    (      (        da = datadefstmt() stmtsep(jjtThis)      )      {        jjtThis.addDataDef(da);      }    |      (        c = casestmt() stmtsep(jjtThis)      )      {        jjtThis.addCase(c);      }    )  )*  < RB >  {    return jjtThis;  }}String augmentargstr() :{  String a = null;}{  a = stringoroneword()  {    return a;  }}YANG_Unknown unknownstatement() #Unknown :{  String p = null;  String i = null, str = "";  Token s;  YANG_Unknown unknown = null;}{  (    s = < P >    {      jjtThis.setExtension(s.image);      jjtThis.setLabel(s.image);    }    [      LOOKAHEAD(2)      sep() str = stringoroneword()      {        jjtThis.setArgument(str);      }    ]    optsep()    (      < SC >    | < LB > optsep()      (        unknown = unknownstatement2() optsep()        {          jjtThis.addUnknown(unknown);        }      )*      < RB > optsep()    )  )  {    return jjtThis;  }}YANG_Unknown unknownstatement2() #Unknown :{  String a = null, i = null, str = "";  Token dp = null, s;  YANG_Unknown unknown = null;}{  (    optsep()    (      LOOKAHEAD(2)      (        LOOKAHEAD(2)        s = < S >      | LOOKAHEAD(2)        s = < P >      )      {        jjtThis.setExtension(s.image);        jjtThis.setLabel(s.image);      }    | LOOKAHEAD(2)      (        a = anykeyword()        {          jjtThis.setExtension(a);        }      )    )    [      LOOKAHEAD(2)      sep() str = stringoroneword()      {        jjtThis.setArgument(str);      }    ]    optsep()    (      < SC >    | < LB >      (        unknown = unknownstatement2() optsep()        {          jjtThis.addUnknown(unknown);        }      )*      < RB >    )  )  {    return jjtThis;  }}YANG_When whenstmt() #When :{  Token when;  String w = null;  YANG_Description d = null;  YANG_Reference r = null;}{  when = < whenkeyword > sep() w = string() optsep()  (    < SC >  | < LB > stmtsep(jjtThis)    (      d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    )*    < RB >  )  {    jjtThis.setLine(when.beginLine);    jjtThis.setCol(when.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setWhen(w);    jjtThis.setLabel(when.image);    return jjtThis;  }}YANG_Rpc rpcstmt() #Rpc :{  Token to;  String i = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_Input in = null;  YANG_Output o = null;}{  to = < rpckeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setRpc(i);    jjtThis.setLabel(to.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    |      (        t = typedefstmt()        {          jjtThis.addTypeDef(t);        }      | g = groupingstmt()        {          jjtThis.addGrouping((YANG_Grouping) g);        }      )      stmtsep(jjtThis)    | in = inputstmt() stmtsep(jjtThis)      {        jjtThis.setInput(in);      }    | o = outputstmt() stmtsep(jjtThis)      {        jjtThis.setOutput(o);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_Input inputstmt() #Input :{  Token to;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef d = null;}{  to = < inputkeyword > optsep()  {    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(to.image);  }  < LB > stmtsep(jjtThis)  (    (      t = typedefstmt()      {        jjtThis.addTypeDef(t);      }    | g = groupingstmt()      {        jjtThis.addGrouping((YANG_Grouping) g);      }    )    stmtsep(jjtThis)  |    (      LOOKAHEAD(2)      d = datadefstmt() stmtsep(jjtThis)      {        jjtThis.addDataDef(d);      }    )+  )*  < RB >  {    return jjtThis;  }}YANG_Output outputstmt() #Output :{  Token to;  String i = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef d = null;}{  to = < outputkeyword > optsep()  {    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(to.image);  }  < LB > stmtsep(jjtThis)  (    (      t = typedefstmt()      {        jjtThis.addTypeDef(t);      }    | g = groupingstmt()      {        jjtThis.addGrouping((YANG_Grouping) g);      }    )    stmtsep(jjtThis)  |    (      LOOKAHEAD(2)      d = datadefstmt() stmtsep(jjtThis)    )+    {      jjtThis.addDataDef(d);    }  )*  < RB >  {    return jjtThis;  }}YANG_Notification notificationstmt() #Notification :{  Token to;  String i = null;  YANG_IfFeature iff = null;  YANG_Status s = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_TypeDef t = null;  YANG_Body g = null;  YANG_DataDef da = null;}{  to = < notificationkeyword > sep() i = identifierargstr() optsep()  {    jjtThis.setLine(to.beginLine);    jjtThis.setCol(to.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setNotification(i);    jjtThis.setLabel(to.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    //(notificationAnyOrder())*
    (      iff = iffeaturestmt() stmtsep(jjtThis)      {        jjtThis.addIfFeature(iff);      }    | s = statusstmt() stmtsep(jjtThis)      {        jjtThis.setStatus(s);      }    | d = descriptionstmt() stmtsep(jjtThis)      {        jjtThis.setDescription(d);      }    | r = referencestmt() stmtsep(jjtThis)      {        jjtThis.setReference(r);      }    |      (        t = typedefstmt()        {          jjtThis.addTypeDef(t);        }      | g = groupingstmt()        {          jjtThis.addGrouping((YANG_Grouping) g);        }      )      stmtsep(jjtThis)    |      (        LOOKAHEAD(2)        da = datadefstmt() stmtsep(jjtThis)      )+      {        jjtThis.addDataDef(da);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_Deviation deviationstmt() #Deviation :{  Token t, u;  String dev = null;  YANG_Description d = null;  YANG_Reference r = null;  YANG_DeviateNotSupported dns = null;  YANG_DeviateAdd da = null;  YANG_DeviateReplace dr = null;  YANG_DeviateDelete dd = null;}{  t = < deviationkeyword > sep() dev = deviationargstr() optsep()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setDeviation(dev);    jjtThis.setLabel(t.image);  }  < LB > stmtsep(jjtThis)  (    d = descriptionstmt() stmtsep(jjtThis)    {      jjtThis.setDescription(d);    }  | r = referencestmt() stmtsep(jjtThis)    {      jjtThis.setReference(r);    }  |    (      u = < deviatekeyword > sep()      (        dns = deviatenotsupportedstmt() stmtsep(jjtThis)        {          jjtThis.setDeviateNotSupported(dns);        }      | da = deviateaddstmt() stmtsep(jjtThis)        {          jjtThis.addDeviateAdd(da);        }      | dr = deviatereplacestmt() stmtsep(jjtThis)        {          jjtThis.addDeviateReplace(dr);        }      | dd = deviatedeletestmt() stmtsep(jjtThis)        {          jjtThis.addDeviateDelete(dd);        }      )    )    /*  t = < deviatekeyword > sep() < notsupportedkeyword > optsep() dns = deviatenotsupportedstmt() stmtsep(jjtThis)    {      jjtThis.setDeviateNotSupported(dns);    }  | t = < deviatekeyword > sep() a = < addkeyword > optsep() da = deviateaddstmt() stmtsep(jjtThis)    {      jjtThis.addDeviateAdd(da);    }  )      | dr = deviatereplacestmt() stmtsep(jjtThis)    {      jjtThis.addDeviateReplace(dr);    }  | dd = deviatedeletestmt() stmtsep(jjtThis)    {      jjtThis.addDeviateDelete(dd);    }    */  )+  < RB >  {    return jjtThis;  }}String deviationargstr() :{  String d = null;}{  d = stringoroneword()  {    return d;  }}YANG_DeviateNotSupported deviatenotsupportedstmt() #DeviateNotSupported :{  Token u;}{  u = < notsupportedkeyword > optsep()  {    jjtThis.setLine(u.beginLine);    jjtThis.setCol(u.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(u.image);  }  (    < SC >  | < LB > stmtsep(jjtThis) < RB >  )  {    return jjtThis;  }}YANG_DeviateAdd deviateaddstmt() #DeviateAdd :{  Token a;  YANG_Units u = null;  YANG_Must m = null;  YANG_Unique uq = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_MinElement min = null;  YANG_MaxElement max = null;}{  a = < addkeyword > optsep()  {    jjtThis.setLine(a.beginLine);    jjtThis.setCol(a.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(a.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      u = unitsstmt() stmtsep(jjtThis)      {        jjtThis.setUnits(u);      }    | m = muststmt() stmtsep(jjtThis)      {        jjtThis.addMust(m);      }    | uq = uniquestmt() stmtsep(jjtThis)      {        jjtThis.addUnique(uq);      }    | d = defaultstmt() stmtsep(jjtThis)      {        jjtThis.setDefault(d);      }    | c = configstmt() stmtsep(jjtThis)      {        jjtThis.setConfig(c);      }    | ma = mandatorystmt() stmtsep(jjtThis)      {        jjtThis.setMandatory(ma);      }    | min = minelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMinElement(min);      }    | max = maxelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMaxElement(max);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_DeviateDelete deviatedeletestmt() #DeviateDelete :{  Token t;  YANG_Units u = null;  YANG_Must m = null;  YANG_Unique uq = null;  YANG_Default d = null;}{  t = < deletekeyword > optsep()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      u = unitsstmt() stmtsep(jjtThis)      {        jjtThis.setUnits(u);      }    | m = muststmt() stmtsep(jjtThis)      {        jjtThis.addMust(m);      }    | uq = uniquestmt() stmtsep(jjtThis)      {        jjtThis.setUnique(uq);      }    | d = defaultstmt() stmtsep(jjtThis)      {        jjtThis.setDefault(d);      }    )*    < RB >  )  {    return jjtThis;  }}YANG_DeviateReplace deviatereplacestmt() #DeviateReplace :{  Token t;  YANG_Units u = null;  YANG_Type tp = null;  YANG_Default d = null;  YANG_Config c = null;  YANG_Mandatory ma = null;  YANG_MinElement min = null;  YANG_MaxElement max = null;}{  t = < replacekeyword > optsep()  {    jjtThis.setLine(t.beginLine);    jjtThis.setCol(t.beginColumn);    jjtThis.setFileName(filename);    jjtThis.setLabel(t.image);  }  (    < SC >  | < LB > stmtsep(jjtThis)    (      tp = typestmt() stmtsep(jjtThis)      {        jjtThis.setType(tp);      }    | u = unitsstmt() stmtsep(jjtThis)      {        jjtThis.setUnits(u);      }    | d = defaultstmt() stmtsep(jjtThis)      {        jjtThis.setDefault(d);      }    | c = configstmt() stmtsep(jjtThis)      {        jjtThis.setConfig(c);      }    | ma = mandatorystmt() stmtsep(jjtThis)      {        jjtThis.setMandatory(ma);      }    | min = minelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMinElement(min);      }    | max = maxelementsstmt() stmtsep(jjtThis)      {        jjtThis.setMaxElement(max);      }    )*    < RB >  )  {    return jjtThis;  }}// Ranges
String rangeargstr() :{  String r = null;}{  //	< a string which matches the rule
  //         rangearg >  r = stringoroneword()  {    return r;  }}// Lengths
String lengthargstr() :{  String l = null;}{  //	< a string which matches the rule
  //         lengtharg >  l = stringoroneword()  {    return l;  }}// DateString dateargstr() :{  String d = null;}{  //< a string which matches the rule
  //   datearg >
  d = stringoroneword()  {    return d;  }}// leafref pathString pathargstr() :{  String p = "", pa = "";}{  //	< a string which matches the rule
  //          patharg >  p = stringoroneword()  {    return p + pa;  }}// Basic RulesString prefixargstr() :{  String p = "";}{  p = stringoroneword()  {    return p;  }}String identifierargstr() :{  String i = null;}{  i = stringoroneword()  {    return i;  }}String identifierrefargstr() :{  String i = null;}{  // < a string which matches the rule  //   identifier-ref-arg  i = stringoroneword()  {    return i;  }}String stringoroneword() :{  Token t;  String s = "";}{  (    s = string()  | s = anykeyword()  |    (      LOOKAHEAD(2)      t = < S >    | LOOKAHEAD(2)      t = < P >    )    {      s = t.image;    }  )  {    return s;  }}String string() :{  Token s;}{  s = < STRING >  {    return YangBuiltInTypes.concat(s.image);  }}void stmtend(YangNode zis) :{  YANG_Unknown un = null;}{  (    < SC >  | < LB > optsep()    (      un = unknownstatement()      {        zis.addUnknown(un);      }    )*    < RB > optsep()  )}void sep() :{}{  (    < WSP >  | linebreack()  | < CMT >  )+}String optsep() :{  Token t = null;  String o = "";}{  (    LOOKAHEAD(2)    (      t = < WSP >      {        o = o + " ";      }    | linebreack()      {        o = o + "\n";      }    | t = < CMT >      {        o = o + t.image;      }    )  )*  {    return o;  }}void stmtsep(YangNode zis) :{}{  (    LOOKAHEAD(2)    stmtsep2(zis)  )*}void stmtsep2(YangNode zis) :{  YANG_Unknown un = null;}{  (    < WSP >  | < CRLF >  | < CMT >  | un = unknownstatement()    {      zis.addUnknown(un);    }  )}void linebreack() :{}{  < CRLF >}String anykeyword() :{  Token t;}{  (    t = < anyxmlkeyword >  | t = < argumentkeyword >  | t = < augmentkeyword >  | t = < basekeyword >  | t = < belongstokeyword >  | t = < bitkeyword >  | t = < casekeyword >  | t = < choicekeyword >  | t = < configkeyword >  | t = < contactkeyword >  | t = < containerkeyword >  | t = < defaultkeyword >  | t = < descriptionkeyword >  | t = < enumkeyword >  | t = < errorapptagkeyword >  | t = < errormessagekeyword >  | t = < extensionkeyword >  | t = < deviationkeyword >  | t = < deviatekeyword >  | t = < featurekeyword >  | t = < fractiondigitskeyword >  | t = < groupingkeyword >  | t = < identitykeyword >  | t = < iffeaturekeyword >  | t = < importkeyword >  | t = < includekeyword >  | t = < inputkeyword >  | t = < keykeyword >  | t = < leafkeyword >  | t = < leaflistkeyword >  | t = < lengthkeyword >  | t = < listkeyword >  | t = < mandatorykeyword >  | t = < maxelementskeyword >  | t = < minelementskeyword >  | t = < modulekeyword >  | t = < mustkeyword >  | t = < namespacekeyword >  | t = < notificationkeyword >  | t = < orderedbykeyword >  | t = < organizationkeyword >  | t = < outputkeyword >  | t = < pathkeyword >  | t = < patternkeyword >  | t = < positionkeyword >  | t = < prefixkeyword >  | t = < presencekeyword >  | t = < rangekeyword >  | t = < referencekeyword >  | t = < refinekeyword >  | t = < requireinstancekeyword >  | t = < revisionkeyword >  | t = < rpckeyword >  | t = < statuskeyword >  | t = < submodulekeyword >  | t = < typekeyword >  | t = < typedefkeyword >  | t = < uniquekeyword >  | t = < unitskeyword >  | t = < useskeyword >  | t = < valuekeyword >  | t = < whenkeyword >  | t = < yangversionkeyword >  | t = < yinelementkeyword >  | t = < addkeyword >  | t = < currentkeyword >  | t = < deprecatedkeyword >  | t = < falsekeyword >  | t = < deletekeyword >  | t = < maxkeyword >  | t = < minkeyword >  | t = < nankeyword >  | t = < neginfkeyword >  | t = < notsupportedkeyword >  | t = < obsoletekeyword >  | t = < posinfkeyword >  | t = < replacekeyword >  | t = < systemkeyword >  | t = < truekeyword >  | t = < unboundedkeyword >  | t = < userkeyword >  )  {    return t.image;  }}