package jyang.parser;
/*
 * Copyright 2008 Emmanuel Nataf, Olivier Festor
 * 
 * This file is part of jyang.

    jyang is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    jyang is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with jyang.  If not, see <http://www.gnu.org/licenses/>.

 */
import java.util.Vector;



/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

public class SimpleNode implements Node {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected yang parser;

	private Vector<YANG_Unknown> unknowns = new Vector<YANG_Unknown>();

	public void addUnknown(YANG_Unknown u){
		unknowns.add(u);
	}
	public Vector<YANG_Unknown> getUnknowns(){
		return unknowns;
	}
    /**
     * special Yang parser 
     **/
    private int line, col;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(yang p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }
  
  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

    public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return yangTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
	SimpleNode n = (SimpleNode)children[i];
	if (n != null) {
	  n.dump(prefix + " ");
	}
      }
    }
  }

    public void setLine(int l){
	line = l;
    }
    public void setCol(int c){
	col = c;
    }
    public int getLine(){
	return line;
    }
    public int getCol(){
	return col;
    }
/*
    public void check() throws YangParserException{
    }

    public void check(String[] paths, yang p) throws ParseException{
    }
  */  
    public String unquote(String s){
    	if(s.charAt(0) == '"')
    	    s = s.substring(1);
    	if(s.charAt(s.length()-1) == '"')
    	    s = s.substring(0, s.length()-1);
    	return s;
    }
}

